#!/usr/bin/env bash
set -euo pipefail

# Config
COMPOSE_FILE="docker-compose.yml"
CONTAINER="steccom-mediawiki"
PORT="8080"
ROOT="$(pwd)"
API_URL="http://localhost:8000"                       # FastAPI (–¥–ª—è publish)

# Detect compose binary (docker compose vs docker-compose), else fallback to bare docker
COMPOSE=""
MODE=""
detect_compose() {
  if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
    COMPOSE="docker compose"
    MODE="compose"
  elif command -v docker-compose >/dev/null 2>&1; then
    # Validate docker-compose actually runs (old Debian package may be broken)
    if docker-compose version >/dev/null 2>&1; then
      COMPOSE="docker-compose"
      MODE="compose"
    else
      MODE="bare"
    fi
  else
    MODE="bare"
  fi
}

ensure_requirements() {
  detect_compose
  if [[ "${MODE}" == "compose" ]]; then
    if [[ ! -f "${COMPOSE_FILE}" ]]; then
      echo "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω: ${COMPOSE_FILE}"
      exit 1
    fi
  fi
}

# Ensure volumes exist and ownership is correct for www-data (uid:33,gid:33)
ensure_volumes() {
  mkdir -p ./mediawiki_db_persistent ./mediawiki_data ./mediawiki
  # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  if chown -R 33:33 ./mediawiki_db_persistent ./mediawiki_data 2>/dev/null; then
    :
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å chown 33:33 –¥–ª—è mediawiki_* (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤). –ü—Ä–æ–¥–æ–ª–∂–∞—é..."
  fi
}

usage() {
  cat <<EOF
Usage: $0 <command> [options]

Commands:
  start             –ó–∞–ø—É—Å—Ç–∏—Ç—å MediaWiki (compose –∏–ª–∏ bare docker)
  stop              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MediaWiki
  restart           –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MediaWiki
  status            –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CSS/–∫–∞—Ä—Ç–∏–Ω–∫–∏
  purge             –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à–∞ Wiki –∏ purge –≥–ª–∞–≤–Ω–æ–π
  publish           –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å KB –≤ MediaWiki —á–µ—Ä–µ–∑ FastAPI (–Ω—É–∂–µ–Ω $TOKEN)
                    Options: --user admin --pass Admin123456789 --glob "docs/kb/*.json"
  logs              –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MediaWiki
  backup            –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  restore           –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞

Examples:
  $0 start
  $0 status
  TOKEN="..." $0 publish --user admin --pass Admin123456789 --glob "docs/kb/*.json"
  $0 backup
EOF
}

# ---------------- Compose mode commands ----------------
start_compose() {
  echo "üöÄ –ó–∞–ø—É—Å–∫ MediaWiki —á–µ—Ä–µ–∑ ${COMPOSE}..."
  ${COMPOSE} -f "${COMPOSE_FILE}" up -d
}

stop_compose() {
  echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MediaWiki..."
  ${COMPOSE} -f "${COMPOSE_FILE}" down
}

status_compose() {
  echo "üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (compose):"
  ${COMPOSE} -f "${COMPOSE_FILE}" ps || true
}

logs_compose() {
  echo "üìã –õ–æ–≥–∏ MediaWiki:"
  ${COMPOSE} -f "${COMPOSE_FILE}" logs -f mediawiki
}

purge_compose() {
  ${COMPOSE} -f "${COMPOSE_FILE}" exec -T mediawiki rm -rf /var/www/html/cache/* >/dev/null 2>&1 || true
}

# ---------------- Bare docker fallback ----------------
start_bare() {
  echo "üöÄ –ó–∞–ø—É—Å–∫ MediaWiki —á–µ—Ä–µ–∑ bare docker..."
  docker rm -f "${CONTAINER}" >/dev/null 2>&1 || true
  docker run -d --name "${CONTAINER}" \
    -p "${PORT}:80" \
    -e MEDIAWIKI_DB_TYPE=sqlite \
    -e MEDIAWIKI_DB_NAME=mediawiki \
    -e MEDIAWIKI_SITE_NAME="–°–¢–≠–ö–ö–û–ú Wiki" \
    -e MEDIAWIKI_SITE_LANG=ru \
    -e MEDIAWIKI_ADMIN_USER=admin \
    -e MEDIAWIKI_ADMIN_PASS=Admin123456789 \
    -e MEDIAWIKI_ENABLE_UPLOADS=true \
    -v "${ROOT}/mediawiki_db_persistent:/var/www/html/data" \
    -v "${ROOT}/mediawiki_data:/var/www/html/images" \
    -v "${ROOT}/mediawiki/LocalSettings.php:/var/www/html/LocalSettings.php:ro" \
    --restart unless-stopped \
    mediawiki:1.39
}

stop_bare() {
  echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MediaWiki (bare)..."
  docker stop "${CONTAINER}" >/dev/null 2>&1 || true
  docker rm "${CONTAINER}" >/dev/null 2>&1 || true
}

status_bare() {
  echo "üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (bare):"
  docker ps --filter "name=${CONTAINER}" --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}' || true
}

logs_bare() {
  echo "üìã –õ–æ–≥–∏ MediaWiki (bare):"
  docker logs -f "${CONTAINER}"
}

purge_bare() {
  docker exec -T "${CONTAINER}" rm -rf /var/www/html/cache/* >/dev/null 2>&1 || true
}

# ---------------- Common flows ----------------
start() {
  ensure_requirements
  ensure_volumes
  if [[ "${MODE}" == "compose" ]]; then
    start_compose
  else
    start_bare
  fi
  
  echo "‚è≥ –ñ–¥—É –ø–æ–¥–Ω—è—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..."
  sleep 10
  
  # Purge –≥–ª–∞–≤–Ω–æ–π
  curl -s "http://localhost:${PORT}/index.php?title=–ó–∞–≥–ª–∞–≤–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞&action=purge" >/dev/null || true
  status
}

stop() {
  ensure_requirements
  if [[ "${MODE}" == "compose" ]]; then
    stop_compose
  else
    stop_bare
  fi
  echo "‚úÖ MediaWiki –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

restart() {
  stop
  start
}

purge() {
  ensure_requirements
  if [[ "${MODE}" == "compose" ]]; then
    purge_compose
  else
    purge_bare
  fi
  curl -s "http://localhost:${PORT}/index.php?title=–ó–∞–≥–ª–∞–≤–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞&action=purge" >/dev/null || true
  echo "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, –≥–ª–∞–≤–Ω–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

status() {
  ensure_requirements
  if [[ "${MODE}" == "compose" ]]; then
    status_compose
  else
    status_bare
  fi
  echo
  echo "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS (–æ–∂–∏–¥–∞–µ—Ç—Å—è Content-Type: text/css)"
  curl -I "http://localhost:${PORT}/load.php?lang=ru&modules=skins.vector.styles.legacy&only=styles&skin=vector" | sed -n '1,10p' || true
  echo
  echo "üñº  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è image/png)"
  curl -I "http://localhost:${PORT}/resources/assets/poweredby_mediawiki_88x31.png" | sed -n '1,10p' || true
  echo
  echo "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}/"
  echo "üìä API: http://localhost:${PORT}/api.php"
}

logs() {
  ensure_requirements
  if [[ "${MODE}" == "compose" ]]; then
    logs_compose
  else
    logs_bare
  fi
}

backup() {
  echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
  BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
  mkdir -p "$BACKUP_DIR"
  
  # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  cp -r mediawiki_db_persistent "$BACKUP_DIR/"
  cp -r mediawiki_data "$BACKUP_DIR/"
  
  echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤: $BACKUP_DIR"
}

restore() {
  ensure_requirements
  if [[ $# -eq 0 ]]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <–ø—É—Ç—å_–∫_–±—ç–∫–∞–ø—É>"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
    ls -la backups/ 2>/dev/null || echo "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    exit 1
  fi
  
  BACKUP_PATH="$1"
  if [[ ! -d "$BACKUP_PATH" ]]; then
    echo "‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: $BACKUP_PATH"
    exit 1
  fi
  
  echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $BACKUP_PATH"
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MediaWiki
  if [[ "${MODE}" == "compose" ]]; then
    stop_compose
  else
    stop_bare
  fi
  
  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  rm -rf mediawiki_db_persistent mediawiki_data
  cp -r "$BACKUP_PATH/mediawiki_db_persistent" ./
  cp -r "$BACKUP_PATH/mediawiki_data" ./
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º MediaWiki
  if [[ "${MODE}" == "compose" ]]; then
    start_compose
  else
    start_bare
  fi
  
  echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

publish() {
  # Args
  local USER="admin"
  local PASS="Admin123456789"
  local GLOB="docs/kb/*.json"

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --user) USER="$2"; shift 2 ;;
      --pass) PASS="$2"; shift 2 ;;
      --glob) GLOB="$2"; shift 2 ;;
      *) echo "Unknown option: $1"; usage; exit 1 ;;
    esac
  done

  if [[ -z "${TOKEN:-}" ]]; then
    echo "ERROR: TOKEN env is required. Example:"
    echo '  TOKEN="..." '$0' publish --user admin --pass Admin123456789 --glob "docs/kb/*.json"'
    exit 1
  fi

  echo "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è KB ‚Üí MediaWiki —á–µ—Ä–µ–∑ FastAPI..."
  curl -s -X POST "${API_URL}/wiki/publish" \
    -H "Authorization: Bearer ${TOKEN}" \
    -H "Content-Type: application/json" \
    -d "{\"wiki_url\":\"http://localhost:${PORT}/api.php\",\"username\":\"${USER}\",\"password\":\"${PASS}\",\"kb_glob\":\"${GLOB}\"}" | jq . || true
}

cmd="${1:-}"
shift || true

case "${cmd}" in
  start)   start ;;
  stop)    stop ;;
  restart) restart ;;
  status)  status ;;
  purge)   purge ;;
  logs)    logs ;;
  backup)  backup ;;
  restore) restore "$@" ;;
  publish) publish "$@" ;;
  ""|help|-h|--help) usage ;;
  *) echo "Unknown command: ${cmd}"; usage; exit 1 ;;
esac
