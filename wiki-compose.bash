#!/usr/bin/env bash
set -euo pipefail

# Config
COMPOSE_FILE="docker-compose.yml"
CONTAINER="steccom-mediawiki"
PORT="8080"
ROOT="$(pwd)"
API_URL="http://localhost:8000"                       # FastAPI (–¥–ª—è publish)

usage() {
  cat <<EOF
Usage: $0 <command> [options]

Commands:
  start             –ó–∞–ø—É—Å—Ç–∏—Ç—å MediaWiki —á–µ—Ä–µ–∑ docker-compose
  stop              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MediaWiki
  restart           –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MediaWiki
  status            –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CSS/–∫–∞—Ä—Ç–∏–Ω–∫–∏
  purge             –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Wiki –∏ purge –≥–ª–∞–≤–Ω–æ–π
  publish           –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å KB –≤ MediaWiki —á–µ—Ä–µ–∑ FastAPI (–Ω—É–∂–µ–Ω $TOKEN)
                    Options: --user admin --pass Admin123456789 --glob "docs/kb/*.json"
  logs              –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MediaWiki
  backup            –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  restore           –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞

Examples:
  $0 start
  $0 status
  TOKEN="..." $0 publish --user admin --pass Admin123456789 --glob "docs/kb/*.json"
  $0 backup
EOF
}

ensure_requirements() {
  command -v docker-compose >/dev/null 2>&1 || { echo "docker-compose not found"; exit 1; }
  if [[ ! -f "${COMPOSE_FILE}" ]]; then
    echo "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω: ${COMPOSE_FILE}"
    exit 1
  fi
}

start() {
  ensure_requirements
  echo "üöÄ –ó–∞–ø—É—Å–∫ MediaWiki —á–µ—Ä–µ–∑ docker-compose..."
  docker-compose up -d
  
  echo "‚è≥ –ñ–¥—É –ø–æ–¥–Ω—è—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..."
  sleep 10
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  if docker-compose ps | grep -q "healthy"; then
    echo "‚úÖ MediaWiki –∑–∞–ø—É—â–µ–Ω –∏ –∑–¥–æ—Ä–æ–≤"
  else
    echo "‚ö†Ô∏è  MediaWiki –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ—à–ª–∞"
  fi
  
  # Purge –≥–ª–∞–≤–Ω–æ–π
  curl -s "http://localhost:${PORT}/index.php?title=–ó–∞–≥–ª–∞–≤–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞&action=purge" >/dev/null || true
  status
}

stop() {
  echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MediaWiki..."
  docker-compose down
  echo "‚úÖ MediaWiki –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

restart() {
  stop
  start
}

purge() {
  # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ purge –≥–ª–∞–≤–Ω–æ–π
  docker-compose exec mediawiki rm -rf /var/www/html/cache/* >/dev/null 2>&1 || true
  curl -s "http://localhost:${PORT}/index.php?title=–ó–∞–≥–ª–∞–≤–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞&action=purge" >/dev/null || true
  echo "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, –≥–ª–∞–≤–Ω–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

status() {
  echo "üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
  docker-compose ps
  echo
  echo "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS (–æ–∂–∏–¥–∞–µ—Ç—Å—è Content-Type: text/css)"
  curl -I "http://localhost:${PORT}/load.php?lang=ru&modules=skins.vector.styles.legacy&only=styles&skin=vector" | sed -n '1,10p' || true
  echo
  echo "üñº  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è image/png)"
  curl -I "http://localhost:${PORT}/resources/assets/poweredby_mediawiki_88x31.png" | sed -n '1,10p' || true
  echo
  echo "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}/"
  echo "üìä API: http://localhost:${PORT}/api.php"
}

logs() {
  echo "üìã –õ–æ–≥–∏ MediaWiki:"
  docker-compose logs -f mediawiki
}

backup() {
  echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
  BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
  mkdir -p "$BACKUP_DIR"
  
  # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  cp -r mediawiki_db_persistent "$BACKUP_DIR/"
  cp -r mediawiki_data "$BACKUP_DIR/"
  
  echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤: $BACKUP_DIR"
}

restore() {
  if [[ $# -eq 0 ]]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <–ø—É—Ç—å_–∫_–±—ç–∫–∞–ø—É>"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
    ls -la backups/ 2>/dev/null || echo "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    exit 1
  fi
  
  BACKUP_PATH="$1"
  if [[ ! -d "$BACKUP_PATH" ]]; then
    echo "‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: $BACKUP_PATH"
    exit 1
  fi
  
  echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $BACKUP_PATH"
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MediaWiki
  docker-compose down
  
  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  rm -rf mediawiki_db_persistent mediawiki_data
  cp -r "$BACKUP_PATH/mediawiki_db_persistent" ./
  cp -r "$BACKUP_PATH/mediawiki_data" ./
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º MediaWiki
  docker-compose up -d
  
  echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

publish() {
  # Args
  local USER="admin"
  local PASS="Admin123456789"
  local GLOB="docs/kb/*.json"

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --user) USER="$2"; shift 2 ;;
      --pass) PASS="$2"; shift 2 ;;
      --glob) GLOB="$2"; shift 2 ;;
      *) echo "Unknown option: $1"; usage; exit 1 ;;
    esac
  done

  if [[ -z "${TOKEN:-}" ]]; then
    echo "ERROR: TOKEN env is required. Example:"
    echo '  TOKEN="..." '$0' publish --user admin --pass Admin123456789 --glob "docs/kb/*.json"'
    exit 1
  fi

  echo "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è KB ‚Üí MediaWiki —á–µ—Ä–µ–∑ FastAPI..."
  curl -s -X POST "${API_URL}/wiki/publish" \
    -H "Authorization: Bearer ${TOKEN}" \
    -H "Content-Type: application/json" \
    -d "{\"wiki_url\":\"http://localhost:${PORT}/api.php\",\"username\":\"${USER}\",\"password\":\"${PASS}\",\"kb_glob\":\"${GLOB}\"}" | jq . || true
}

cmd="${1:-}"
shift || true

case "${cmd}" in
  start)   start ;;
  stop)    stop ;;
  restart) restart ;;
  status)  status ;;
  purge)   purge ;;
  logs)    logs ;;
  backup)  backup ;;
  restore) restore "$@" ;;
  publish) publish "$@" ;;
  ""|help|-h|--help) usage ;;
  *) echo "Unknown command: ${cmd}"; usage; exit 1 ;;
esac
