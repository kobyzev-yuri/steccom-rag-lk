#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "modules"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AgentsTester:
    """–¢–µ—Å—Ç–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –∏ SQL"""
    
    def __init__(self):
        self.results = {}
        self.models_to_test = [
            "qwen2.5-coder:7b",
            "qwen3:8b", 
            "llama3:8b",
            "llama3.1:8b"
        ]
        
    def test_sql_agent(self, model_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç SQL –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∞–≥–µ–Ω—Ç —Å –º–æ–¥–µ–ª—å—é {model_name}")
        
        try:
            from modules.core.rag import generate_sql
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è SQL
            test_questions = [
                "–ü–æ–∫–∞–∂–∏ SBD —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –º–∞–π –º–µ—Å—è—Ü –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É",
                "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ VSAT_DATA –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ?",
                "–ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?",
                "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"
            ]
            
            results = []
            total_time = 0
            successful_queries = 0
            
            for i, question in enumerate(test_questions):
                logger.info(f"  üìù –í–æ–ø—Ä–æ—Å {i+1}: {question}")
                
                start_time = time.time()
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
                    sql_query = generate_sql(question, "test_company")
                    query_time = time.time() - start_time
                    total_time += query_time
                    
                    if sql_query and len(sql_query.strip()) > 10:
                        successful_queries += 1
                        logger.info(f"    ‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {query_time:.2f}—Å")
                    else:
                        logger.warning(f"    ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π SQL")
                    
                    results.append({
                        'question': question,
                        'sql_query': sql_query,
                        'time': query_time,
                        'success': bool(sql_query and len(sql_query.strip()) > 10)
                    })
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ SQL: {e}")
                    results.append({
                        'question': question,
                        'sql_query': '',
                        'time': 0,
                        'success': False,
                        'error': str(e)
                    })
            
            success_rate = successful_queries / len(test_questions)
            avg_time = total_time / len(test_questions)
            
            return {
                'model': model_name,
                'success_rate': success_rate,
                'avg_time': avg_time,
                'total_time': total_time,
                'successful_queries': successful_queries,
                'total_questions': len(test_questions),
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQL –∞–≥–µ–Ω—Ç–∞: {e}")
            return {
                'model': model_name,
                'success_rate': 0,
                'avg_time': 0,
                'error': str(e)
            }
    
    def test_text_analysis(self, model_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–æ–¥–µ–ª—å—é {model_name}")
        
        try:
            from modules.core.base_agent import BaseAgent
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            agent = BaseAgent(
                agent_name=f"text_analyzer_{model_name.replace(':', '_')}",
                model_type="document_analysis"
            )
            agent.model_name = model_name
            agent._init_chat_model()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            test_texts = [
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.",
                "SBD (Short Burst Data) - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—É—é —Å–µ—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º —ç–Ω–µ—Ä–≥–∏–∏.",
                "VSAT —Å–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ –≥–µ–æ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–æ 100 –ú–±–∏—Ç/—Å."
            ]
            
            results = []
            total_time = 0
            successful_analyses = 0
            
            for i, text in enumerate(test_texts):
                logger.info(f"  üìÑ –¢–µ–∫—Å—Ç {i+1}: {text[:50]}...")
                
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)
2. –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø–æ–Ω—è—Ç–∏—è
3. –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
4. –û—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É

–¢–µ–∫—Å—Ç: {text}

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                
                start_time = time.time()
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    response = agent.chat_model.invoke(prompt)
                    analysis_time = time.time() - start_time
                    total_time += analysis_time
                    
                    if response and len(str(response.content).strip()) > 20:
                        successful_analyses += 1
                        logger.info(f"    ‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {analysis_time:.2f}—Å")
                    else:
                        logger.warning(f"    ‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
                    results.append({
                        'text': text,
                        'analysis': str(response.content) if hasattr(response, 'content') else str(response),
                        'time': analysis_time,
                        'success': bool(response and len(str(response.content).strip()) > 20)
                    })
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    results.append({
                        'text': text,
                        'analysis': '',
                        'time': 0,
                        'success': False,
                        'error': str(e)
                    })
            
            success_rate = successful_analyses / len(test_texts)
            avg_time = total_time / len(test_texts)
            
            return {
                'model': model_name,
                'success_rate': success_rate,
                'avg_time': avg_time,
                'total_time': total_time,
                'successful_analyses': successful_analyses,
                'total_texts': len(test_texts),
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                'model': model_name,
                'success_rate': 0,
                'avg_time': 0,
                'error': str(e)
            }
    
    def test_chat_agent(self, model_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —á–∞—Ç –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç –∞–≥–µ–Ω—Ç —Å –º–æ–¥–µ–ª—å—é {model_name}")
        
        try:
            from modules.core.base_agent import BaseAgent
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –∞–≥–µ–Ω—Ç–∞
            agent = BaseAgent(
                agent_name=f"chat_agent_{model_name.replace(':', '_')}",
                model_type="chat"
            )
            agent.model_name = model_name
            agent._init_chat_model()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            test_questions = [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ SBD –ø–∞–∫–µ—Ç –≤ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç VSAT —Å–∏—Å—Ç–µ–º–∞?",
                "–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SBD –∏ VSAT_DATA",
                "–ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?"
            ]
            
            results = []
            total_time = 0
            successful_responses = 0
            
            for i, question in enumerate(test_questions):
                logger.info(f"  ‚ùì –í–æ–ø—Ä–æ—Å {i+1}: {question}")
                
                start_time = time.time()
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                    response = agent.chat_model.invoke(question)
                    response_time = time.time() - start_time
                    total_time += response_time
                    
                    if response and len(str(response.content).strip()) > 20:
                        successful_responses += 1
                        logger.info(f"    ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {response_time:.2f}—Å")
                    else:
                        logger.warning(f"    ‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
                    results.append({
                        'question': question,
                        'answer': str(response.content) if hasattr(response, 'content') else str(response),
                        'time': response_time,
                        'success': bool(response and len(str(response.content).strip()) > 20)
                    })
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
                    results.append({
                        'question': question,
                        'answer': '',
                        'time': 0,
                        'success': False,
                        'error': str(e)
                    })
            
            success_rate = successful_responses / len(test_questions)
            avg_time = total_time / len(test_questions)
            
            return {
                'model': model_name,
                'success_rate': success_rate,
                'avg_time': avg_time,
                'total_time': total_time,
                'successful_responses': successful_responses,
                'total_questions': len(test_questions),
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç –∞–≥–µ–Ω—Ç–∞: {e}")
            return {
                'model': model_name,
                'success_rate': 0,
                'avg_time': 0,
                'error': str(e)
            }
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        
        all_results = {
            'test_date': datetime.now().isoformat(),
            'models_tested': self.models_to_test,
            'sql_results': {},
            'text_analysis_results': {},
            'chat_results': {},
            'summary': {}
        }
        
        for model in self.models_to_test:
            logger.info(f"\n{'='*50}")
            logger.info(f"üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ú–û–î–ï–õ–¨: {model}")
            logger.info(f"{'='*50}")
            
            # –¢–µ—Å—Ç SQL –∞–≥–µ–Ω—Ç–∞
            logger.info(f"\nüìä SQL –ê–ì–ï–ù–¢ - {model}")
            sql_result = self.test_sql_agent(model)
            all_results['sql_results'][model] = sql_result
            
            # –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            logger.info(f"\nüìù –¢–ï–ö–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó - {model}")
            text_result = self.test_text_analysis(model)
            all_results['text_analysis_results'][model] = text_result
            
            # –¢–µ—Å—Ç —á–∞—Ç –∞–≥–µ–Ω—Ç–∞
            logger.info(f"\nüí¨ –ß–ê–¢ –ê–ì–ï–ù–¢ - {model}")
            chat_result = self.test_chat_agent(model)
            all_results['chat_results'][model] = chat_result
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_results['summary'] = self._analyze_results(all_results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._save_results(all_results)
        
        return all_results
    
    def _analyze_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        summary = {
            'best_sql_model': None,
            'best_text_model': None,
            'best_chat_model': None,
            'overall_best_model': None,
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sql_scores = {}
        for model, result in results['sql_results'].items():
            if result.get('success_rate', 0) > 0:
                sql_scores[model] = result['success_rate'] / (result.get('avg_time', 1) + 1)
        
        if sql_scores:
            summary['best_sql_model'] = max(sql_scores, key=sql_scores.get)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        text_scores = {}
        for model, result in results['text_analysis_results'].items():
            if result.get('success_rate', 0) > 0:
                text_scores[model] = result['success_rate'] / (result.get('avg_time', 1) + 1)
        
        if text_scores:
            summary['best_text_model'] = max(text_scores, key=text_scores.get)
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        chat_scores = {}
        for model, result in results['chat_results'].items():
            if result.get('success_rate', 0) > 0:
                chat_scores[model] = result['success_rate'] / (result.get('avg_time', 1) + 1)
        
        if chat_scores:
            summary['best_chat_model'] = max(chat_scores, key=chat_scores.get)
        
        # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
        overall_scores = {}
        for model in results['models_tested']:
            sql_score = results['sql_results'].get(model, {}).get('success_rate', 0)
            text_score = results['text_analysis_results'].get(model, {}).get('success_rate', 0)
            chat_score = results['chat_results'].get(model, {}).get('success_rate', 0)
            
            overall_scores[model] = (sql_score + text_score + chat_score) / 3
        
        if overall_scores:
            summary['overall_best_model'] = max(overall_scores, key=overall_scores.get)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if summary['overall_best_model']:
            summary['recommendations'].append(f"–õ—É—á—à–∞—è –æ–±—â–∞—è –º–æ–¥–µ–ª—å: {summary['overall_best_model']}")
        
        if summary['best_sql_model']:
            summary['recommendations'].append(f"–õ—É—á—à–∞—è –¥–ª—è SQL: {summary['best_sql_model']}")
        
        if summary['best_text_model']:
            summary['recommendations'].append(f"–õ—É—á—à–∞—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {summary['best_text_model']}")
        
        if summary['best_chat_model']:
            summary['recommendations'].append(f"–õ—É—á—à–∞—è –¥–ª—è —á–∞—Ç–∞: {summary['best_chat_model']}")
        
        return summary
    
    def _save_results(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"agents_test_results_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def print_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–ì–ï–ù–¢–û–í")
        print("="*60)
        
        summary = results['summary']
        
        print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['test_date']}")
        print(f"ü§ñ –ú–æ–¥–µ–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results['models_tested'])}")
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò:")
        if summary.get('overall_best_model'):
            print(f"  ü•á –û–±—â–∞—è: {summary['overall_best_model']}")
        if summary.get('best_sql_model'):
            print(f"  üìä SQL: {summary['best_sql_model']}")
        if summary.get('best_text_model'):
            print(f"  üìù –¢–µ–∫—Å—Ç: {summary['best_text_model']}")
        if summary.get('best_chat_model'):
            print(f"  üí¨ –ß–∞—Ç: {summary['best_chat_model']}")
        
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in summary.get('recommendations', []):
            print(f"  ‚Ä¢ {rec}")
        
        print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í KB ADMIN")
    print("=" * 50)
    
    try:
        tester = AgentsTester()
        results = tester.run_comprehensive_test()
        tester.print_summary(results)
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)







