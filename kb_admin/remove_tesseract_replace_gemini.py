#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è tesseract –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–º–µ–Ω—ã –∏—Ö –Ω–∞ Gemini
–£–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ä—ã–π OCR –∫–æ–¥ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ Gemini –æ–±—Ä–∞–±–æ—Ç–∫—É
"""

import os
import sys
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TesseractToGeminiMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä —Å tesseract –Ω–∞ Gemini"""
    
    def __init__(self):
        self.current_dir = Path(__file__).parent
        self.files_to_update = []
        self.files_to_remove = []
        
    def find_tesseract_usage(self):
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è tesseract –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        logger.info("üîç –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tesseract –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
        
        tesseract_patterns = [
            "pytesseract",
            "tesseract",
            "OCRProcessor",
            "ocr_processor",
            "extract_text_from_image",
            "image_to_string"
        ]
        
        for root, dirs, files in os.walk(self.current_dir):
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            
                        for pattern in tesseract_patterns:
                            if pattern in content:
                                self.files_to_update.append(file_path)
                                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω tesseract –≤: {file_path}")
                                break
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    def update_smart_document_agent(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ smart_document_agent.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gemini"""
        logger.info("üîß –û–±–Ω–æ–≤–ª—è–µ–º smart_document_agent.py...")
        
        file_path = self.current_dir / "modules" / "core" / "smart_document_agent.py"
        
        if not file_path.exists():
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã OCR –Ω–∞ Gemini
            content = content.replace(
                "from modules.documents.ocr_processor import OCRProcessor",
                "# OCR –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Gemini - from modules.documents.vision_processor import VisionProcessor"
            )
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OCRProcessor
            content = content.replace(
                "ocr_processor = OCRProcessor()",
                "vision_processor = VisionProcessor()"
            )
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã OCR –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ Gemini
            content = content.replace(
                "ocr_result = ocr_processor.process_document(str(file_path))",
                "gemini_result = vision_processor.analyze_image_with_gemini(file_path)"
            )
            
            content = content.replace(
                "if ocr_result['success'] and ocr_result.get('text_content'):",
                "if gemini_result.get('success') and gemini_result.get('analysis'):"
            )
            
            content = content.replace(
                "text = ocr_result['text_content']",
                "text = gemini_result['analysis']"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info("‚úÖ smart_document_agent.py –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
    
    def create_gemini_ocr_wrapper(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
        logger.info("üîß –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É Gemini OCR...")
        
        wrapper_content = '''"""
Gemini OCR Wrapper
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã tesseract –Ω–∞ Gemini
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
"""

from pathlib import Path
from typing import Dict, Any, Union
import logging
from .vision_processor import VisionProcessor

logger = logging.getLogger(__name__)

class GeminiOCRWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã OCRProcessor –Ω–∞ Gemini"""
    
    def __init__(self, upload_dir: str = "data/uploads", **kwargs):
        self.upload_dir = Path(upload_dir)
        self.upload_dir.mkdir(parents=True, exist_ok=True)
        self.vision_processor = VisionProcessor()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º OCRProcessor)
        self.supported_formats = {'.pdf', '.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif'}
    
    def process_document(self, file_path: Union[str, Path]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å OCRProcessor)"""
        try:
            file_path = Path(file_path)
            
            if not file_path.exists():
                return {
                    'success': False,
                    'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}',
                    'text_content': ''
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            if file_path.suffix.lower() not in self.supported_formats:
                return {
                    'success': False,
                    'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_path.suffix}',
                    'text_content': ''
                }
            
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –Ω–∞–ø—Ä—è–º—É—é
            if file_path.suffix.lower() in ['.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif']:
                result = self.vision_processor.analyze_image_with_gemini(file_path)
                
                if result.get('success'):
                    return {
                        'success': True,
                        'text_content': result.get('analysis', ''),
                        'metadata': {
                            'model': result.get('model', ''),
                            'provider': result.get('provider', '')
                        }
                    }
                else:
                    return {
                        'success': False,
                        'error': result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Gemini'),
                        'text_content': ''
                    }
            
            # –î–ª—è PDF –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini
            elif file_path.suffix.lower() == '.pdf':
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                try:
                    from .pdf_processor import PDFProcessor
                    pdf_processor = PDFProcessor()
                    text = pdf_processor.extract_text(str(file_path))
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    if len(text.strip()) < 100:
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF
                        # —á–µ—Ä–µ–∑ Gemini, –Ω–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                        pass
                    
                    return {
                        'success': True,
                        'text_content': text,
                        'metadata': {'method': 'pdf_extraction'}
                    }
                    
                except Exception as e:
                    return {
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}',
                        'text_content': ''
                    }
            
            return {
                'success': False,
                'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
                'text_content': ''
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_path}: {e}")
            return {
                'success': False,
                'error': str(e),
                'text_content': ''
            }
    
    def extract_text_from_image(self, image: Union[str, Path], preprocess: bool = True) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å OCRProcessor)"""
        try:
            image_path = Path(image)
            result = self.vision_processor.extract_text_from_image_gemini(image_path)
            return result if result != "Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞" else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    def extract_text_from_pdf_scans(self, pdf_path: str, dpi: int = 300) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å–∫–∞–Ω–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å OCRProcessor)"""
        try:
            # –î–ª—è PDF —Å–∫–∞–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ + Gemini –∞–Ω–∞–ª–∏–∑
            result = self.process_document(pdf_path)
            return result.get('text_content', '') if result.get('success') else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Å–∫–∞–Ω–∞: {e}")
            return ""

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
OCRProcessor = GeminiOCRWrapper
'''
        
        wrapper_path = self.current_dir / "modules" / "documents" / "gemini_ocr_wrapper.py"
        
        try:
            with open(wrapper_path, 'w', encoding='utf-8') as f:
                f.write(wrapper_content)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–±–µ—Ä—Ç–∫–∞ Gemini OCR: {wrapper_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ—Ä—Ç–∫–∏: {e}")
    
    def update_requirements(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt - —É–¥–∞–ª–µ–Ω–∏–µ tesseract –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîß –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt...")
        
        requirements_files = [
            self.current_dir / "requirements.txt",
            self.current_dir.parent / "requirements.txt"
        ]
        
        tesseract_deps = [
            "pytesseract",
            "opencv-python",
            "pdf2image"
        ]
        
        for req_file in requirements_files:
            if req_file.exists():
                try:
                    with open(req_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    # –£–¥–∞–ª—è–µ–º tesseract –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    updated_lines = []
                    for line in lines:
                        should_keep = True
                        for dep in tesseract_deps:
                            if dep in line.lower():
                                should_keep = False
                                logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {line.strip()}")
                                break
                        
                        if should_keep:
                            updated_lines.append(line)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ Gemini
                    updated_lines.append("\n# Gemini OCR (–∑–∞–º–µ–Ω—è–µ—Ç tesseract)\n")
                    updated_lines.append("# requests - –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤\n")
                    updated_lines.append("# Pillow - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")
                    
                    with open(req_file, 'w', encoding='utf-8') as f:
                        f.writelines(updated_lines)
                    
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {req_file}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {req_file}: {e}")
    
    def create_migration_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üìä –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        report_content = f"""# –ú–∏–≥—Ä–∞—Ü–∏—è —Å Tesseract –Ω–∞ Gemini OCR

## üìÖ –î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
{__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

### 1. **–ó–∞–º–µ–Ω–∞ OCR –¥–≤–∏–∂–∫–∞**
- ‚ùå –£–¥–∞–ª–µ–Ω: Tesseract OCR
- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: Google Gemini —á–µ—Ä–µ–∑ ProxyAPI
- üîß –°–æ–∑–¥–∞–Ω–∞ –æ–±–µ—Ä—Ç–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: `gemini_ocr_wrapper.py`

### 2. **–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã**
- `smart_document_agent.py` - –∑–∞–º–µ–Ω–µ–Ω OCR –Ω–∞ Gemini
- `vision_processor.py` - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- `requirements.txt` - —É–¥–∞–ª–µ–Ω—ã tesseract –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

### 3. **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**
- üñºÔ∏è **–õ—É—á—à–∏–π –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** (–¥–æ 20MB)
- üìÑ **–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å–∫–∞–Ω–æ–≤**
- üß† **–£–º–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**
- üåê **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞** —á–µ—Ä–µ–∑ Gemini

### 4. **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Gemini –Ω–∞–¥ Tesseract**
- ‚úÖ **–í—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å** —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- ‚úÖ **–õ—É—á—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ** —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- ‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- ‚úÖ **–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º –∏ –¥–∏–∞–≥—Ä–∞–º–º** –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É
- ‚úÖ **–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏** –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ tesseract

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
```env
# ProxyAPI –¥–ª—è Gemini
PROXYAPI_BASE_URL=https://api.proxyapi.ru/openai/v1
PROXYAPI_API_KEY=your_api_key_here
USE_GEMINI=true
```

### –ú–æ–¥–µ–ª–∏ Gemini
- `gemini-2.0-flash` - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- `gemini-1.5-pro` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

## üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –í –∫–æ–¥–µ
```python
from modules.documents.vision_processor import VisionProcessor

vision_processor = VisionProcessor()
result = vision_processor.analyze_image_with_gemini(image_path)
```

### –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
```python
# –°—Ç–∞—Ä—ã–π –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
from modules.documents.gemini_ocr_wrapper import OCRProcessor
ocr = OCRProcessor()
result = ocr.process_document(file_path)
```

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å –≤–∞—à–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
2. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞** - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PROXYAPI_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω
3. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

- Tesseract –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ requirements.txt
- –°—Ç–∞—Ä—ã–π OCR –∫–æ–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ deprecated
- –í—Å–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ tesseract, –Ω–æ —ç—Ç–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è

---
*–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
"""
        
        report_path = self.current_dir / "TESSERACT_TO_GEMINI_MIGRATION_REPORT.md"
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏: {report_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å Tesseract –Ω–∞ Gemini...")
        
        try:
            # 1. –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è tesseract
            self.find_tesseract_usage()
            
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ smart_document_agent
            self.update_smart_document_agent()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ—Ä—Ç–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.create_gemini_ocr_wrapper()
            
            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements
            self.update_requirements()
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            self.create_migration_report()
            
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å Tesseract –Ω–∞ Gemini OCR")
    print("=" * 50)
    
    try:
        migrator = TesseractToGeminiMigrator()
        migrator.run_migration()
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç: TESSERACT_TO_GEMINI_MIGRATION_REPORT.md")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()







