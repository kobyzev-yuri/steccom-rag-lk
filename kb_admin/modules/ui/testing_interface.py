"""
Testing Interface for KB Admin
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ KB
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict, Any
import json
from datetime import datetime

from ..testing.relevance_analyzer import RelevanceAnalyzer, RelevanceTestResult
from ..core.knowledge_manager import KnowledgeBaseManager


class TestingInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.analyzer = RelevanceAnalyzer()
        self.kb_manager = KnowledgeBaseManager()
    
    def render_testing_interface(self):
        """–†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ KB")
        
        # –í—ã–±–æ—Ä KB –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        kb_selection = self._render_kb_selection()
        
        if not kb_selection:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_settings = self._render_test_settings()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", type="primary"):
            self._run_relevance_test(kb_selection, test_settings)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'test_results' in st.session_state:
            self._render_test_results()
    
    def _render_kb_selection(self) -> int:
        """–†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ KB"""
        st.subheader("üìö –í—ã–±–æ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        try:
            kbs = self.kb_manager.get_knowledge_bases()
            
            if not kbs:
                st.warning("–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ KB –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ KB'")
                return None
            
            kb_options = {f"{kb['name']} ({kb['category']})": kb['id'] for kb in kbs}
            
            selected_kb_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
                options=list(kb_options.keys()),
                index=0
            )
            
            return kb_options[selected_kb_name]
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ KB: {e}")
            return None
    
    def _render_test_settings(self) -> Dict[str, Any]:
        """–†–µ–Ω–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            model_options = {
                "GPT-4o (ProxyAPI)": "gpt-4o",
                "GPT-3.5-turbo (ProxyAPI)": "gpt-3.5-turbo", 
                "Qwen 2.5 1.5B (Ollama)": "qwen2.5:1.5b"
            }
            
            selected_model = st.selectbox(
                "–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                options=list(model_options.keys()),
                index=0
            )
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            num_questions = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:",
                min_value=1,
                max_value=20,
                value=5
            )
        
        with col2:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            categories = st.multiselect(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:",
                options=["billing", "technical", "ui_guide", "all"],
                default=["billing"]
            )
            
            # –ü–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            min_accuracy = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.1
            )
        
        return {
            "model": model_options[selected_model],
            "num_questions": num_questions,
            "categories": categories,
            "min_accuracy": min_accuracy
        }
    
    def _run_relevance_test(self, kb_id: int, settings: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        
        with st.spinner("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏..."):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                test_questions = self._get_test_questions(settings)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                results = self.analyzer.test_kb_relevance(kb_id, test_questions)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state.test_results = results
                st.session_state.test_settings = settings
                st.session_state.test_kb_id = kb_id
                
                st.success(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def _get_test_questions(self, settings: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        all_questions = self.analyzer._get_default_test_questions()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = settings.get("categories", ["billing"])
        if "all" in categories:
            return all_questions
        
        filtered_questions = []
        for question in all_questions:
            if question["category"] in categories:
                filtered_questions.append(question)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        num_questions = settings.get("num_questions", 5)
        return filtered_questions[:num_questions]
    
    def _render_test_results(self):
        """–†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        st.markdown("---")
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        results = st.session_state.test_results
        settings = st.session_state.test_settings
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.analyzer.generate_relevance_report(results)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self._render_metrics_summary(report["summary"])
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        self._render_quality_charts(report)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._render_detailed_results(results)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._render_recommendations(report)
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._render_export_options(results, report)
    
    def _render_metrics_summary(self, summary: Dict[str, Any]):
        """–†–µ–Ω–¥–µ—Ä —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"""
        st.subheader("üìà –°–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                value=summary["overall_quality"].title(),
                delta=None
            )
        
        with col2:
            st.metric(
                label="–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å",
                value=f"{summary['average_accuracy']:.1%}",
                delta=None
            )
        
        with col3:
            st.metric(
                label="–°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞",
                value=f"{summary['average_completeness']:.1%}",
                delta=None
            )
        
        with col4:
            st.metric(
                label="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
                value=f"{summary['average_response_time']:.1f}—Å",
                delta=None
            )
    
    def _render_quality_charts(self, report: Dict[str, Any]):
        """–†–µ–Ω–¥–µ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            quality_dist = report["quality_distribution"]
            
            if quality_dist:
                fig = px.pie(
                    values=list(quality_dist.values()),
                    names=list(quality_dist.keys()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –æ—Ç–≤–µ—Ç–æ–≤",
                    color_discrete_map={
                        "excellent": "#2E8B57",
                        "good": "#32CD32", 
                        "fair": "#FFD700",
                        "poor": "#FF6347"
                    }
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            results = st.session_state.test_results
            
            response_times = [r.response_time for r in results]
            questions = [f"Q{i+1}" for i in range(len(results))]
            
            fig = go.Figure(data=go.Bar(
                x=questions,
                y=response_times,
                marker_color=['#2E8B57' if t < 5 else '#FFD700' if t < 10 else '#FF6347' for t in response_times]
            ))
            
            fig.update_layout(
                title="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º",
                xaxis_title="–í–æ–ø—Ä–æ—Å—ã",
                yaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)"
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    def _render_detailed_results(self, results: List[RelevanceTestResult]):
        """–†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data = []
        for i, result in enumerate(results):
            data.append({
                "‚Ññ": i + 1,
                "–í–æ–ø—Ä–æ—Å": result.question[:50] + "..." if len(result.question) > 50 else result.question,
                "–¢–æ—á–Ω–æ—Å—Ç—å": f"{result.accuracy_score:.1%}",
                "–ü–æ–ª–Ω–æ—Ç–∞": f"{result.completeness_score:.1%}",
                "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": f"{result.relevance_score:.1%}",
                "–ö–∞—á–µ—Å—Ç–≤–æ": result.overall_quality.title(),
                "–í—Ä–µ–º—è": f"{result.response_time:.1f}—Å",
                "–ò—Å—Ç–æ—á–Ω–∏–∫–∏": result.sources_found
            })
        
        df = pd.DataFrame(data)
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        def highlight_quality(val):
            if val == "Excellent":
                return "background-color: #2E8B57; color: white"
            elif val == "Good":
                return "background-color: #32CD32; color: white"
            elif val == "Fair":
                return "background-color: #FFD700; color: black"
            elif val == "Poor":
                return "background-color: #FF6347; color: white"
            return ""
        
        styled_df = df.style.applymap(highlight_quality, subset=['–ö–∞—á–µ—Å—Ç–≤–æ'])
        st.dataframe(styled_df, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        
        selected_question = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            options=[f"Q{i+1}: {r.question[:30]}..." for i, r in enumerate(results)],
            index=0
        )
        
        question_index = int(selected_question.split(":")[0][1:]) - 1
        result = results[question_index]
        
        with st.expander("–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–í–æ–ø—Ä–æ—Å:**")
                st.write(result.question)
                
                st.write("**–û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**")
                for keyword in result.expected_keywords:
                    st.write(f"‚Ä¢ {keyword}")
            
            with col2:
                st.write("**–û—Ç–≤–µ—Ç:**")
                st.write(result.actual_answer)
                
                st.write("**–ú–µ—Ç—Ä–∏–∫–∏:**")
                st.write(f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {result.accuracy_score:.1%}")
                st.write(f"‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: {result.completeness_score:.1%}")
                st.write(f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_score:.1%}")
                st.write(f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result.response_time:.1f}—Å")
                st.write(f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result.sources_found}")
            
            st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            for rec in result.recommendations:
                st.write(f"‚Ä¢ {rec}")
    
    def _render_recommendations(self, report: Dict[str, Any]):
        """–†–µ–Ω–¥–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.write("**–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
        for rec in report["recommendations"]:
            st.write(f"‚Ä¢ {rec}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        if report["problem_areas"]:
            st.write("**–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:**")
            for area in report["problem_areas"]:
                with st.expander(f"‚ùå {area['question'][:50]}... ({area['quality']})"):
                    st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                    for rec in area["recommendations"]:
                        st.write(f"‚Ä¢ {rec}")
    
    def _render_export_options(self, results: List[RelevanceTestResult], report: Dict[str, Any]):
        """–†–µ–Ω–¥–µ—Ä –æ–ø—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                self._export_to_csv(results)
        
        with col2:
            if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"):
                self._export_report(report)
        
        with col3:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª"):
                self._save_to_protocol(results)
    
    def _export_to_csv(self, results: List[RelevanceTestResult]):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        data = []
        for result in results:
            data.append({
                "question": result.question,
                "expected_keywords": ", ".join(result.expected_keywords),
                "actual_answer": result.actual_answer,
                "accuracy_score": result.accuracy_score,
                "completeness_score": result.completeness_score,
                "relevance_score": result.relevance_score,
                "overall_quality": result.overall_quality,
                "response_time": result.response_time,
                "sources_found": result.sources_found,
                "model_used": result.model_used,
                "timestamp": result.timestamp
            })
        
        df = pd.DataFrame(data)
        csv = df.to_csv(index=False)
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"kb_relevance_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    
    def _export_report(self, report: Dict[str, Any]):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        report_json = json.dumps(report, ensure_ascii=False, indent=2)
        
        st.download_button(
            label="üìã –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
            data=report_json,
            file_name=f"kb_relevance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        )
    
    def _save_to_protocol(self, results: List[RelevanceTestResult]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª
            st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª: {e}")
