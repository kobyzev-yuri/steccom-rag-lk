"""
PDF Upload Interface for KB Admin
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import streamlit as st
import os
from pathlib import Path
from typing import List, Dict, Optional
import pandas as pd

class PDFUploadInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, kb_manager, pdf_processor):
        self.kb_manager = kb_manager
        self.pdf_processor = pdf_processor
        self.upload_dir = Path("data/uploads")
        self.upload_dir.mkdir(parents=True, exist_ok=True)
    
    def render_upload_interface(self):
        """–†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        self._render_existing_files()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._render_file_upload()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        self._render_file_processing()
    
    def _render_existing_files(self):
        """–ü–æ–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        st.subheader("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PDF —Ñ–∞–π–ª—ã")
        
        pdf_files = list(self.upload_dir.glob("*.pdf"))
        
        if pdf_files:
            st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∞–π–ª–∞–º–∏
            file_data = []
            for pdf_file in pdf_files:
                file_size = pdf_file.stat().st_size / 1024  # KB
                file_data.append({
                    "–§–∞–π–ª": pdf_file.name,
                    "–†–∞–∑–º–µ—Ä (KB)": f"{file_size:.1f}",
                    "–ü—É—Ç—å": str(pdf_file)
                })
            
            df = pd.DataFrame(file_data)
            st.dataframe(df, use_container_width=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–æ–≤
            with st.expander("üìÑ –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–æ–≤"):
                for pdf_file in pdf_files:
                    st.write(f"**{pdf_file.name}**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
                    try:
                        text = self.pdf_processor.extract_text(str(pdf_file))
                        if text:
                            preview = text[:300] + "..." if len(text) > 300 else text
                            st.text_area(f"–ü—Ä–µ–≤—å—é {pdf_file.name}:", preview, height=100, key=f"preview_{pdf_file.name}")
                        else:
                            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                    
                    st.markdown("---")
        else:
            st.info("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads –Ω–µ—Ç PDF —Ñ–∞–π–ª–æ–≤")
    
    def _render_file_upload(self):
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö PDF —Ñ–∞–π–ª–æ–≤")
        
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
            type=['pdf'],
            accept_multiple_files=True,
            help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        )
        
        if uploaded_files:
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
            with st.expander("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"):
                for file in uploaded_files:
                    file_size = len(file.getvalue()) / 1024
                    st.write(f"‚Ä¢ **{file.name}** ({file_size:.1f} KB)")
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            if st.button("üíæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", type="primary"):
                self._upload_files(uploaded_files)
    
    def _upload_files(self, uploaded_files):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        uploaded_count = 0
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, uploaded_file in enumerate(uploaded_files):
            try:
                status_text.text(f"–ó–∞–≥—Ä—É–∑–∫–∞: {uploaded_file.name}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                file_path = self.upload_dir / uploaded_file.name
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getvalue())
                
                uploaded_count += 1
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {uploaded_file.name}: {e}")
            
            progress_bar.progress((i + 1) / len(uploaded_files))
        
        status_text.text("")
        st.success(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count} –∏–∑ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        st.rerun()
    
    def _render_file_processing(self):
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        st.subheader("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–ó
        kbs = self.kb_manager.get_knowledge_bases()
        
        if not kbs:
            st.warning("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ë–ó –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ë–ó'")
            return
        
        # –í—ã–±–æ—Ä –ë–ó
        kb_options = {f"{kb['name']} ({kb['category']})": kb['id'] for kb in kbs}
        selected_kb_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:", list(kb_options.keys()))
        selected_kb_id = kb_options[selected_kb_name]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ë–ó
        selected_kb = next(kb for kb in kbs if kb['id'] == selected_kb_id)
        st.info(f"**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:** {selected_kb['name']} | **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {selected_kb['category']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        pdf_files = list(self.upload_dir.glob("*.pdf"))
        
        if not pdf_files:
            st.warning("–ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.write("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
        
        selected_files = []
        for pdf_file in pdf_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
            docs = self.kb_manager.get_documents(selected_kb_id)
            already_processed = any(doc['title'] == pdf_file.name for doc in docs)
            
            if already_processed:
                st.write(f"‚úÖ {pdf_file.name} (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)")
            else:
                if st.checkbox(f"üìÑ {pdf_file.name}", key=f"process_{pdf_file.name}"):
                    selected_files.append(pdf_file)
        
        if selected_files:
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(selected_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", type="primary"):
                self._process_files(selected_files, selected_kb_id)
    
    def _process_files(self, pdf_files: List[Path], kb_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        processed_count = 0
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, pdf_file in enumerate(pdf_files):
            try:
                status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_file.name}")
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                with open(pdf_file, 'rb') as f:
                    file_content = f.read()
                
                # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è PDFProcessor
                class MockUploadedFile:
                    def __init__(self, name, content):
                        self.name = name
                        self._content = content
                    
                    def getvalue(self):
                        return self._content
                
                mock_file = MockUploadedFile(pdf_file.name, file_content)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                result = self.pdf_processor.process_pdf(
                    mock_file, 
                    kb_id, 
                    pdf_file.stem
                )
                
                if result['success']:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–ó
                    doc_id = self.kb_manager.add_document(
                        kb_id,
                        result['title'],
                        result['file_path'],
                        result['content_type'],
                        result['file_size'],
                        result['metadata']
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    self.kb_manager.update_document_status(doc_id, True, 'completed')
                    processed_count += 1
                    
                    st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {pdf_file.name}")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name} - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name} - {e}")
            
            progress_bar.progress((i + 1) / len(pdf_files))
        
        status_text.text("")
        st.success(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        st.rerun()
    
    def render_simple_kb_creation(self):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ó –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        st.header("ü§ñ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        st.info("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        pdf_files = list(self.upload_dir.glob("*.pdf"))
        
        if not pdf_files:
            st.warning("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads –Ω–µ—Ç PDF —Ñ–∞–π–ª–æ–≤")
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'")
            return
        
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        with st.expander("üìã –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
            for pdf_file in pdf_files:
                file_size = pdf_file.stat().st_size / 1024
                st.write(f"‚Ä¢ **{pdf_file.name}** ({file_size:.1f} KB)")
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó
        with st.form("create_kb_form"):
            st.subheader("üìö –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            
            kb_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:",
                value="–ù–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
                help="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            )
            
            kb_category = st.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:",
                [
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                    "–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                    "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
                    "–î—Ä—É–≥–æ–µ"
                ]
            )
            
            kb_description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ:",
                value=f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–∑ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤",
                help="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            )
            
            submitted = st.form_submit_button("üöÄ –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π", type="primary")
            
            if submitted:
                if not kb_name.strip():
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                else:
                    self._create_kb_with_files(kb_name, pdf_files, kb_category, kb_description)
    
    def _create_kb_with_files(self, name: str, pdf_files: List[Path], 
                             category: str = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", 
                             description: str = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ë–ó —Å —Ñ–∞–π–ª–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ë–ó
            kb_id = self.kb_manager.create_knowledge_base(
                name=name,
                description=description or f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {name}",
                category=category,
                created_by=st.session_state.get('username', 'admin')
            )
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            processed_count = 0
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, pdf_file in enumerate(pdf_files):
                try:
                    status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_file.name}")
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(pdf_file, 'rb') as f:
                        file_content = f.read()
                    
                    # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç
                    class MockUploadedFile:
                        def __init__(self, name, content):
                            self.name = name
                            self._content = content
                        
                        def getvalue(self):
                            return self._content
                    
                    mock_file = MockUploadedFile(pdf_file.name, file_content)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                    result = self.pdf_processor.process_pdf(
                        mock_file, 
                        kb_id, 
                        pdf_file.stem
                    )
                    
                    if result['success']:
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–ó
                        doc_id = self.kb_manager.add_document(
                            kb_id,
                            result['title'],
                            result['file_path'],
                            result['content_type'],
                            result['file_size'],
                            result['metadata']
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        self.kb_manager.update_document_status(doc_id, True, 'completed')
                        processed_count += 1
                        
                        st.write(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {pdf_file.name}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name}")
                
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name} - {e}")
                
                progress_bar.progress((i + 1) / len(pdf_files))
            
            status_text.text("")
            st.success(f"üéâ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            st.rerun()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")






