"""
Main Interface for KB Admin
–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
"""

import streamlit as st
import os
import sys
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KB Admin
sys.path.append(str(Path(__file__).parent.parent))

from modules.core.knowledge_manager import KnowledgeBaseManager
from modules.core.text_analyzer import TextAnalyzer
from modules.core.chunk_optimizer import ChunkOptimizer
from modules.rag.multi_kb_rag import MultiKBRAG
from modules.documents.pdf_processor import PDFProcessor
from modules.testing.kb_test_protocol import KBTestProtocol
from modules.integrations.mediawiki_client import MediaWikiClient
from modules.admin.admin_panel import AdminPanel
from modules.ui.pdf_upload_interface import PDFUploadInterface
from modules.core.smart_document_agent import SmartLibrarian
from modules.ui.settings_page import render_settings_page
from modules.ui.agent_model_manager import AgentModelManager


class KBAdminInterface:
    """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å KB Admin"""
    
    def __init__(self):
        self.kb_manager = KnowledgeBaseManager()
        self.text_analyzer = TextAnalyzer()
        self.chunk_optimizer = ChunkOptimizer()
        self.pdf_processor = PDFProcessor()
        self.protocol = KBTestProtocol()
        self.admin_panel = AdminPanel()
        self.pdf_upload_interface = PDFUploadInterface(self.kb_manager, self.pdf_processor)
        self.smart_librarian = SmartLibrarian(self.kb_manager, self.pdf_processor)
        self.model_manager = AgentModelManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
        if 'kb_admin_rag' not in st.session_state:
            st.session_state.kb_admin_rag = MultiKBRAG()
        self.rag = st.session_state.kb_admin_rag
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaWiki –∫–ª–∏–µ–Ω—Ç–∞
        try:
            self.mediawiki_client = MediaWikiClient(
                "http://localhost:8080/api.php",
                username="admin",
                password="Admin123456789"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MediaWiki –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.mediawiki_client = None
    
    def render_main_page(self):
        """–†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        st.set_page_config(
            page_title="KB Admin - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π",
            page_icon="üß†",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.title("üß† KB Admin - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
        st.markdown("---")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self._render_sidebar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self._render_main_content()
    
    def _render_sidebar(self):
        """–†–µ–Ω–¥–µ—Ä –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        with st.sidebar:
            st.header("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            
            # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_options = [
                "üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
                "üìö –£–º–Ω—ã–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å",
                "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (AI Billing)",
                "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ KB",
                "ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            ]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if 'current_page' not in st.session_state:
                st.session_state.current_page = "üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_index = page_options.index(st.session_state.current_page) if st.session_state.current_page in page_options else 0
            
            page = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                page_options,
                index=current_index
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if page != st.session_state.current_page:
                st.session_state.current_page = page
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.markdown("---")
            st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            self._render_sidebar_stats()
            
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            st.markdown("---")
            st.header("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
            self._render_quick_actions()
    
    def _render_sidebar_stats(self):
        """–†–µ–Ω–¥–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            # –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∏–≥–∞–Ω–∏—è
            if 'kb_stats_cache' not in st.session_state:
                st.session_state.kb_stats_cache = self.kb_manager.get_statistics()
            
            stats = st.session_state.kb_stats_cache
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π", stats['total_knowledge_bases'])
                st.metric("–î–æ–∫—É–º–µ–Ω—Ç—ã", stats['total_documents'])
            
            with col2:
                st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", stats['processed_documents'])
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç", f"{stats['processing_rate']:.1f}%")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _render_quick_actions(self):
        """–†–µ–Ω–¥–µ—Ä –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å RAG", key="refresh_rag_btn"):
            try:
                self.rag.load_all_active_kbs()
                st.success("RAG —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        if st.button("üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã", key="run_tests_btn"):
            st.session_state.run_tests = True
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", key="clear_cache_btn"):
            if 'kb_admin_rag' in st.session_state:
                del st.session_state.kb_admin_rag
            if 'kb_stats_cache' in st.session_state:
                del st.session_state.kb_stats_cache
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
        if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", key="refresh_stats_btn"):
            if 'kb_stats_cache' in st.session_state:
                del st.session_state.kb_stats_cache
            st.success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    def _render_main_content(self):
        """–†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        page = st.session_state.get('current_page', 'üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã')
        
        if page == "üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã":
            self._render_overview()
        elif page == "üìö –£–º–Ω—ã–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å":
            self._render_smart_librarian()
        elif page == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (AI Billing)":
            self._render_admin_panel()
        elif page == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ KB":
            self._render_kb_management()
        # –°–æ–∑–¥–∞–Ω–∏–µ/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ë–ó —Ç–µ–ø–µ—Ä—å –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ—Ç–æ–∫ "–£–º–Ω—ã–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å"
        elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self._render_settings()
        elif page == "ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏":
            self._render_model_management()
    
    def _render_overview(self):
        """–†–µ–Ω–¥–µ—Ä –æ–±–∑–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
        st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã KB Admin")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        try:
            stats = self.kb_manager.get_statistics()
            
            with col1:
                st.metric(
                    label="–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                    value=stats['total_knowledge_bases'],
                    delta=None
                )
            
            with col2:
                st.metric(
                    label="–î–æ–∫—É–º–µ–Ω—Ç—ã",
                    value=stats['total_documents'],
                    delta=None
                )
            
            with col3:
                st.metric(
                    label="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                    value=stats['processed_documents'],
                    delta=f"{stats['processing_rate']:.1f}%"
                )
            
            with col4:
                # –°—Ç–∞—Ç—É—Å RAG —Å–∏—Å—Ç–µ–º—ã
                rag_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if hasattr(self.rag, 'vectorstores') and len(self.rag.vectorstores) > 0 else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                st.metric(
                    label="RAG —Å–∏—Å—Ç–µ–º–∞",
                    value=rag_status,
                    delta=None
                )
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        st.markdown("---")
        st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        try:
            self._render_analytics_charts()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("---")
        st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
        self._render_recent_activities()
    
    def _render_analytics_charts(self):
        """–†–µ–Ω–¥–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            stats = self.kb_manager.get_statistics()
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if stats['documents_by_category']:
                import plotly.express as px
                
                categories = list(stats['documents_by_category'].keys())
                counts = list(stats['documents_by_category'].values())
                
                fig = px.pie(
                    values=counts,
                    names=categories,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
                )
                st.plotly_chart(fig, width='stretch')
            
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏: {e}")
    
    def _render_recent_activities(self):
        """–†–µ–Ω–¥–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        activities = [
            {"time": "10:30", "action": "–°–æ–∑–¥–∞–Ω–∞ KB '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã'", "user": "admin"},
            {"time": "09:45", "action": "–ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç 'reg_sbd.pdf'", "user": "admin"},
            {"time": "09:15", "action": "–ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏", "user": "admin"},
        ]
        
        for activity in activities:
            st.write(f"üïí **{activity['time']}** - {activity['action']} ({activity['user']})")
    
    def _render_kb_management(self):
        """–†–µ–Ω–¥–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KB"""
        st.header("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π KB
        with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π", expanded=False):
            self._render_create_kb_form()
        
        # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö KB
        st.subheader("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        self._render_kb_list()
    
    def _render_create_kb_form(self):
        """–†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è KB"""
        with st.form("create_kb_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ë–ó*", placeholder="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã")
                kb_category = st.selectbox(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è*",
                    ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
                     "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∏–ª–ª–∏–Ω–≥–∞", "–î—Ä—É–≥–æ–µ"]
                )
            
            with col2:
                kb_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                created_by = st.text_input("–ê–≤—Ç–æ—Ä*", value="admin")
            
            submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            
            if submitted:
                if kb_name and kb_category and created_by:
                    try:
                        kb_id = self.kb_manager.create_knowledge_base(
                            kb_name, kb_description, kb_category, created_by
                        )
                        st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{kb_name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
                else:
                    st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    def _render_kb_list(self):
        """–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ KB"""
        try:
            kbs = self.kb_manager.get_knowledge_bases()
            
            if not kbs:
                st.info("–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ë–ó.")
                return
            
            for kb in kbs:
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
                    
                    with col1:
                        st.write(f"**{kb['name']}**")
                        st.caption(kb['description'] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                    
                    with col2:
                        st.write(f"üìÅ {kb['category']}")
                        st.caption(f"–°–æ–∑–¥–∞–Ω–∞: {kb['created_at'][:10]}")
                    
                    with col3:
                        docs = self.kb_manager.get_documents(kb['id'])
                        st.write(f"üìÑ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    
                    with col4:
                        if st.button("‚öôÔ∏è", key=f"manage_{kb['id']}"):
                            st.session_state.selected_kb = kb['id']
                    
                    st.markdown("---")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ KB: {e}")
    
    def _render_document_upload(self):
        """–†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if hasattr(self.admin_panel, 'render_document_upload'):
            self.admin_panel.render_document_upload()
        else:
            st.error("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def _render_text_analysis(self):
        """–†–µ–Ω–¥–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
        st.header("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–æ–¥—É–ª–µ")
    
    def _render_chunk_optimization(self):
        """–†–µ–Ω–¥–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤"""
        st.header("‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–æ–¥—É–ª–µ")
    
    def _render_relevance_testing(self):
        """–†–µ–Ω–¥–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        from .testing_interface import TestingInterface
        testing_interface = TestingInterface()
        testing_interface.render_testing_interface()
    
    def _render_configuration_comparison(self):
        """–†–µ–Ω–¥–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        st.header("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–æ–¥—É–ª–µ")
    
    def _render_integrations(self):
        """–†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        st.header("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–æ–¥—É–ª–µ")
    
    def _render_smart_librarian(self):
        """–†–µ–Ω–¥–µ—Ä –£–º–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è"""
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.smart_librarian.render_welcome()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.markdown("---")
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤;
        # —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ KB –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —à–∞–≥–∞—Ö
        self._render_document_analysis()
    
    def _render_document_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        if 'analysis_in_progress' not in st.session_state:
            st.session_state.analysis_in_progress = False
        if 'analysis_results' not in st.session_state:
            st.session_state.analysis_results = None
        if 'selected_files' not in st.session_state:
            st.session_state.selected_files = []
        if 'doc_status' not in st.session_state:
            st.session_state.doc_status = None
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        # st.write(f"üîç DEBUG: analysis_in_progress = {st.session_state.analysis_in_progress}")
        # st.write(f"üîç DEBUG: analysis_results = {st.session_state.analysis_results is not None}")
        # st.write(f"üîç DEBUG: selected_files = {len(st.session_state.selected_files)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ upload_dir
        current_upload_dir = str(self.smart_librarian.document_manager.upload_dir)
        if st.session_state.doc_status is None or st.session_state.get('last_upload_dir_for_analysis') != current_upload_dir:
            st.session_state.doc_status = self.smart_librarian.document_manager.scan_upload_directory()
            st.session_state.last_upload_dir_for_analysis = current_upload_dir
        
        doc_status = st.session_state.doc_status
        
        # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if st.session_state.analysis_in_progress and st.session_state.analysis_results:
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            self._display_analysis_results()
            return
        
        # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if st.session_state.analysis_in_progress and not st.session_state.analysis_results:
            st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ "–∑–∞—Å—Ç—Ä—è–≤—à–µ–≥–æ" –∞–Ω–∞–ª–∏–∑–∞
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑", key="reset_stuck_analysis_btn"):
                st.session_state.analysis_in_progress = False
                st.session_state.analysis_results = None
                st.session_state.selected_files = []
                st.session_state.doc_status = None
                st.rerun()
            
            self._display_analysis_results()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if doc_status['new']:
            st.subheader("üÜï –ù–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            st.info(f"–ù–∞–π–¥–µ–Ω–æ {len(doc_status['new'])} –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
            for doc in doc_status['new']:
                file_path = Path(doc['file_path'])
                checkbox_key = f"analyze_new_{doc['file_name']}"
                
                st.checkbox(f"üìÑ {doc['file_name']} ({doc['file_size']/1024:.1f} KB)", 
                           key=checkbox_key)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            selected_files = []
            for doc in doc_status['new']:
                file_path = Path(doc['file_path'])
                checkbox_key = f"analyze_new_{doc['file_name']}"
                if st.session_state.get(checkbox_key, False):
                    selected_files.append(file_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞
            if selected_files:
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å form
                with st.form("analyze_form", clear_on_submit=False):
                    st.write("**–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É:**")
                    for file_path in selected_files:
                        st.write(f"üìÑ {file_path.name}")
                    
                    submitted = st.form_submit_button("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", type="primary")
                    
                    if submitted:
                        st.session_state.analysis_in_progress = True
                        st.session_state.selected_files = selected_files
                        st.rerun()
            else:
                st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if doc_status['processed']:
            st.subheader("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(doc_status['processed'])} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
    def _display_analysis_results(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not st.session_state.analysis_results:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            selected_files = st.session_state.get('selected_files', [])
            if selected_files:
                try:
                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã..."):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª SmartLibrarian —Å –ø–æ–ª–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                        results = self.smart_librarian.process_documents_smart(selected_files)
                        st.session_state.analysis_results = results
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    st.session_state.analysis_in_progress = False
                    st.session_state.analysis_results = None
            else:
                st.error("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ process_documents_smart
        # –ó–¥–µ—Å—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        results = st.session_state.analysis_results
        
        if results:
            st.subheader("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            analyses = results.get('analyses', [])
            strategy = results.get('strategy', {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.info(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(analyses)}")
            
            with col2:
                if strategy:
                    st.info(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy.get('type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if st.button("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", key="reset_analysis"):
                st.session_state.analysis_results = None
                st.session_state.analysis_in_progress = False
                st.rerun()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            st.write(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy is not None}")
            if strategy:
                st.write(f"üîç DEBUG: –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy.get('type')}")
            
            if strategy and strategy.get('type') != 'no_documents':
                st.markdown("---")
                st.subheader("üéØ –î–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π")
                st.write(f"üîç DEBUG: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–π–¥–µ–Ω–∞, —Ç–∏–ø: {strategy.get('type')}")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write("üîç DEBUG: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ë–ó'")
                    if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ë–ó", key="create_kb_from_analysis"):
                        # –°–æ–∑–¥–∞–µ–º –ë–ó –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        try:
                            st.write(f"üîç DEBUG: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {strategy}")
                            
                            if strategy['type'] == 'single_kb':
                                self._create_kb_from_strategy(strategy)
                            elif strategy['type'] == 'mixed_kb':
                                self._create_kb_from_strategy(strategy)
                            else:
                                st.warning("–°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Smart Librarian –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
                            import traceback
                            st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                
                with col2:
                    st.write("üîç DEBUG: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–ª–æ–∫ '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–ó'")
                    # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–ó
                    try:
                        existing = self.kb_manager.get_knowledge_bases(active_only=True) or []
                        if existing:
                            kb_options = {f"ID {kb['id']}: {kb['name']}": kb['id'] for kb in existing}
                            selected_kb = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ë–ó:", list(kb_options.keys()), key="select_existing_kb")
                            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–ó", key="add_to_existing_kb"):
                                self._process_documents_to_kb(strategy.get('documents', []), kb_options[selected_kb])
                                st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–ó")
                        else:
                            st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ë–ó")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–ó: {e}")
                
                with col3:
                    st.write("üîç DEBUG: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã'")
                    if st.button("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", key="generate_test_questions"):
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∏–∑ session_state
                            analyses = st.session_state.analysis_results.get('analyses', [])
                            st.write(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {len(analyses)}")
                            
                            if analyses:
                                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
                                first_analysis = analyses[0]
                                st.write(f"üîç DEBUG: –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(first_analysis.keys())}")
                                st.write(f"üîç DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–Ω–∞–ª–∏–∑–∞: {first_analysis}")
                                
                                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã..."):
                                    try:
                                        test_questions = self.smart_librarian.generate_relevance_test_questions(first_analysis)
                                        st.write(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions) if test_questions else 0}")
                                        
                                        if test_questions:
                                            st.session_state.generated_test_questions = test_questions
                                            st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                                            st.rerun()
                                        else:
                                            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
                                    except Exception as e:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
                                        import traceback
                                        st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                            else:
                                st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
                            import traceback
                            st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                if st.session_state.get('generated_test_questions'):
                    st.markdown("---")
                    st.subheader("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                    questions = st.session_state.generated_test_questions
                    st.write(f"üîç DEBUG: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏")
                    
                    st.info("üí° –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ RAG —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã.")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                    for i, question in enumerate(questions, 1):
                        with st.expander(f"‚ùì –í–æ–ø—Ä–æ—Å {i}: {question['question']}"):
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if 'answer' in question and question['answer']:
                                st.write("**üìù –û—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:**")
                                st.write(question['answer'])
                            else:
                                st.write("**üìù –û—Ç–≤–µ—Ç:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            if 'source_info' in question and question['source_info']:
                                st.write(f"**üîç –ò—Å—Ç–æ—á–Ω–∏–∫:** {question['source_info']}")
                            
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {question.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                            st.write(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {question.get('difficulty', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                            st.write(f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(question.get('expected_keywords', []))}")
                    
                    st.success("‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –≥–æ—Ç–æ–≤—ã. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RAG —Å–∏—Å—Ç–µ–º—É.")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            for i, analysis in enumerate(analyses):
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if f"selected_doc_{i}" not in st.session_state:
                    st.session_state[f"selected_doc_{i}"] = False
                
                with st.expander(f"üìÑ {analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')} ({analysis.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')})"):
                    # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    col1, col2 = st.columns([1, 4])
                    with col1:
                        selected = st.checkbox(
                            "‚úÖ –í—ã–±—Ä–∞—Ç—å –¥–ª—è KB", 
                            value=st.session_state[f"selected_doc_{i}"],
                            key=f"select_doc_{i}"
                        )
                        st.session_state[f"selected_doc_{i}"] = selected
                    
                    with col2:
                        if selected:
                            st.success("üìå –î–æ–∫—É–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB")
                        else:
                            st.info("üìã –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç
                    if 'smart_summary' in analysis and analysis['smart_summary']:
                        st.write("**üß† –ê–±—Å—Ç—Ä–∞–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:**")
                        st.text_area("–ê–±—Å—Ç—Ä–∞–∫—Ç", value=analysis['smart_summary'], height=200, disabled=True, key=f"abstract_{i}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    full_text = None
                    if 'original_cleaned_text' in analysis and analysis['original_cleaned_text']:
                        full_text = analysis['original_cleaned_text']
                    elif 'full_cleaned_text' in analysis and analysis['full_cleaned_text']:
                        full_text = analysis['full_cleaned_text']
                    elif 'raw_ocr_text' in analysis and analysis['raw_ocr_text']:
                        full_text = analysis['raw_ocr_text']
                    
                    if full_text:
                        st.write("**üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:**")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å
                        preview_text = full_text[:2000] + "..." if len(full_text) > 2000 else full_text
                        st.text_area("–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", value=preview_text, height=300, disabled=True, key=f"full_text_{i}")
                        
                        if len(full_text) > 2000:
                            st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ 2000 –∏–∑ {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–ó.")
                    else:
                        st.warning("‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∞–Ω–∫–∏–Ω–≥—É
                    if 'chunking_recommendations' in analysis and analysis['chunking_recommendations']:
                        st.write("**üìè –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–±–∏–µ–Ω–∏—é –Ω–∞ —á–∞–Ω–∫–∏:**")
                        st.text_area("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", value=analysis['chunking_recommendations'], height=100, disabled=True, key=f"chunking_{i}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    if 'recommendations' in analysis and analysis['recommendations']:
                        st.write("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ:**")
                        for rec in analysis['recommendations']:
                            st.write(f"‚Ä¢ {rec}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ KB –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    strategy = st.session_state.analysis_results.get('strategy', {})
                    if strategy and strategy.get('type') != 'no_documents':
                        st.write("**üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é KB:**")
                        st.write(f"‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {strategy.get('kb_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        st.write(f"‚Ä¢ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {strategy.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                        st.write(f"‚Ä¢ **–û–ø–∏—Å–∞–Ω–∏–µ:** {strategy.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        st.write(f"‚Ä¢ **–¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:** {strategy.get('type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                        st.write(f"‚Ä¢ **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {strategy.get('reasoning', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    elif 'suggested_kb' in analysis and analysis['suggested_kb']:
                        st.write("**üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é KB (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞):**")
                        kb_suggestion = analysis['suggested_kb']
                        st.write(f"‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {kb_suggestion.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        st.write(f"‚Ä¢ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {kb_suggestion.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                        st.write(f"‚Ä¢ **–û–ø–∏—Å–∞–Ω–∏–µ:** {kb_suggestion.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
                if not st.session_state.get('generated_test_questions'):
                    st.write("**üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...**")
                    with st.spinner("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏..."):
                        try:
                            st.write(f"üîç DEBUG: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            st.write(f"üîç DEBUG: –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', '')))} —Å–∏–º–≤–æ–ª–æ–≤")
                            
                            test_questions = self.smart_librarian.generate_relevance_test_questions(analysis)
                            
                            st.write(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions) if test_questions else 0}")
                            if test_questions:
                                st.write(f"üîç DEBUG: –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {test_questions[0].get('question', '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞')}")
                                st.write(f"üîç DEBUG: –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç: {test_questions[0].get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
                            
                            if test_questions:
                                st.session_state.generated_test_questions = test_questions
                                st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_questions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏")
                                st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
                            else:
                                st.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
                                st.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢ —à–∞–±–ª–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞!")
                                st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
                            import traceback
                            st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                else:
                    st.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó")
                    if st.button("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", key="regenerate_test_questions"):
                        st.session_state.generated_test_questions = None
                        st.rerun()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                    if 'images' in analysis and analysis['images']:
                        st.write("**üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:**")
                        
                        for img_idx, image_info in enumerate(analysis['images']):
                            if not isinstance(image_info, dict):
                                st.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º {img_idx}")
                                continue
                            # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            image_name = image_info.get('image_name', f'image_{img_idx}')
                            img_selected = st.checkbox(
                                f"‚úÖ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_name}", 
                                key=f"select_img_{i}_{img_idx}"
                            )
                            
                            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º expander, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                            expander_title = f"üì∑ {image_name} - {'–í–´–ë–†–ê–ù–û' if img_selected else '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}"
                            
                            with st.expander(expander_title, expanded=img_selected):
                                if img_selected:
                                    col1, col2 = st.columns([1, 2])
                                    
                                    with col1:
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                        try:
                                            from PIL import Image
                                            image_path = Path(image_info.get('image_path', ''))
                                            if image_path.exists():
                                                image = Image.open(image_path)
                                                st.image(image, caption=image_name, width='stretch')
                                            else:
                                                st.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                                        except Exception as e:
                                            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                                    
                                    with col2:
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                        if image_info.get('error'):
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {image_info.get('error')}")
                                        else:
                                            if image_info.get('description'):
                                                st.write("**üìù –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç Google Gemini:**")
                                                st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ Gemini", value=image_info.get('description', ''), height=150, disabled=True, key=f"gemini_desc_{i}_{img_idx}")
                                            
                                            if image_info.get('text_content'):
                                                st.write("**üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**")
                                                st.text_area("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", value=image_info.get('text_content', ''), height=150, disabled=True, key=f"extracted_text_{i}_{img_idx}")
                                else:
                                    st.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ë–ó
        strategy = results.get('strategy', {}) if isinstance(results, dict) else {}
        if strategy:
            st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ë–ó")
            
            if 'strategy_type' in strategy:
                st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy['strategy_type']}")
            
            if 'recommended_kbs' in strategy:
                for kb_rec in strategy['recommended_kbs']:
                    with st.expander(f"üìö {kb_rec.get('name', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π')}"):
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {kb_rec.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                        st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {kb_rec.get('document_count', 0)}")
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {kb_rec.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó
                        if st.button(f"‚úÖ –°–æ–∑–¥–∞—Ç—å –ë–ó: {kb_rec.get('name', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π')}", 
                                   key=f"create_kb_recommended_{kb_rec.get('name', 'unknown')}"):
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                            strategy = {
                                'type': 'single_kb',
                                'kb_name': kb_rec.get('name', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'),
                                'description': kb_rec.get('description', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
                                'category': kb_rec.get('category', '–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã')
                            }
                            self._create_kb_from_strategy(strategy)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        analyses = results.get('analyses', []) if isinstance(results, dict) else []
        for i, analysis in enumerate(analyses):
            dialog_key = f"show_save_dialog_{analysis['file_name']}"
            if st.session_state.get(dialog_key, False):
                st.subheader(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {analysis['file_name']}")
                
                # –í—ã–±–æ—Ä KB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                from modules.core.knowledge_manager import KnowledgeBaseManager
                from datetime import datetime
                kb_manager = KnowledgeBaseManager()
                existing_kbs = kb_manager.get_knowledge_bases(active_only=True)
                
                if existing_kbs:
                    kb_options = ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é KB"] + [f"ID {kb['id']}: {kb['name']}" for kb in existing_kbs]
                    selected_kb = st.selectbox("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", kb_options, key=f"kb_selection_{i}")
                    
                    if selected_kb == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é KB":
                        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π KB
                        kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ KB:", value=analysis.get('suggested_kb', {}).get('suggested_name', '–ù–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'), key=f"new_kb_name_{i}")
                        kb_category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", value=analysis.get('suggested_kb', {}).get('suggested_category', '–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'), key=f"new_kb_category_{i}")
                        kb_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:", value=analysis.get('suggested_kb', {}).get('description', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'), key=f"new_kb_description_{i}")
                        
                        if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å KB –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", key=f"create_and_save_{i}"):
                            try:
                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é KB
                                kb_id = kb_manager.create_knowledge_base(
                                    name=kb_name,
                                    description=kb_description,
                                    category=kb_category,
                                    created_by="KB Admin"
                                )
                                
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                                if not full_text or (full_text.strip() == analysis.get('smart_summary', '').strip()):
                                    full_text = analysis.get('raw_ocr_text', '')
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                                doc_id = kb_manager.add_document(
                                    kb_id=kb_id,
                                    title=analysis.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç'),
                                    file_path=str(analysis.get('file_path', '')),
                                    content_type=analysis.get('content_type', 'text/plain'),
                                    file_size=analysis.get('file_size', 0),
                                    metadata={
                                        'ocr_cleaned': True,
                                        'gemini_analyzed': bool(analysis.get('images')),
                                        'text_length': len(full_text),
                                        'summary_length': len(analysis.get('smart_summary', '')),
                                        'content': full_text,
                                        'summary': analysis.get('smart_summary', ''),
                                        'processed': True,
                                        'status': "processed"
                                    }
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ Gemini
                                if analysis.get('images'):
                                    for image_info in analysis['images']:
                                        kb_manager.add_image(
                                            kb_id=kb_id,
                                            image_path=image_info.get('image_path', ''),
                                            image_name=image_info.get('image_name', ''),
                                            image_description=image_info.get('description', ''),
                                            llava_analysis=image_info.get('description', ''),
                                        )
                                
                                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º KB –≤ JSON
                                try:
                                    json_file_path = kb_manager.export_kb_to_json(kb_id, "docs/kb")
                                    st.info(f"üìÑ KB —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ JSON: {json_file_path}")
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å KB –≤ JSON: {e}")
                                
                                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ KB '{kb_name}' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç!")
                                st.session_state[dialog_key] = False
                                st.session_state["last_saved_selection"] = f"{[i]}_{[]}"
                                st.rerun()
                                
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ KB: {e}")
                    else:
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é KB
                        kb_id = int(selected_kb.split(':')[0].split()[1])
                        kb_name = selected_kb.split(':')[1].strip()
                        
                        st.write(f"**–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ KB:** {kb_name}")
                        
                        if st.button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é KB", key=f"save_to_existing_{i}"):
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                                if not full_text or (full_text.strip() == analysis.get('smart_summary', '').strip()):
                                    full_text = analysis.get('raw_ocr_text', '')
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                                doc_id = kb_manager.add_document(
                                    kb_id=kb_id,
                                    title=analysis.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç'),
                                    file_path=str(analysis.get('file_path', '')),
                                    content_type=analysis.get('content_type', 'text/plain'),
                                    file_size=analysis.get('file_size', 0),
                                    metadata={
                                        'ocr_cleaned': True,
                                        'gemini_analyzed': bool(analysis.get('images')),
                                        'text_length': len(full_text),
                                        'summary_length': len(analysis.get('smart_summary', '')),
                                        'content': full_text,
                                        'summary': analysis.get('smart_summary', ''),
                                        'processed': True,
                                        'status': "processed"
                                    }
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ Gemini
                                if analysis.get('images'):
                                    for image_info in analysis['images']:
                                        kb_manager.add_image(
                                            kb_id=kb_id,
                                            image_path=image_info.get('image_path', ''),
                                            image_name=image_info.get('image_name', ''),
                                            image_description=image_info.get('description', ''),
                                            llava_analysis=image_info.get('description', ''),
                                        )
                                
                                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ KB '{kb_name}'!")
                                st.session_state[dialog_key] = False
                                st.session_state["last_saved_selection"] = f"{[i]}_{[]}"
                                st.rerun()
                                
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ KB: {e}")
                else:
                    st.write("**–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:**")
                    kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ KB:", value=analysis.get('suggested_kb', {}).get('suggested_name', '–ù–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'), key=f"new_kb_name_no_existing_{i}")
                    kb_category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", value=analysis.get('suggested_kb', {}).get('suggested_category', '–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'), key=f"new_kb_category_no_existing_{i}")
                    kb_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:", value=analysis.get('suggested_kb', {}).get('description', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'), key=f"new_kb_description_no_existing_{i}")
                    
                    if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å KB –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", key=f"create_and_save_no_existing_{i}"):
                        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KB
                        pass
                
                if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key=f"cancel_save_{i}"):
                    st.session_state[dialog_key] = False
                    st.rerun()
                break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥ –∑–∞ —Ä–∞–∑


        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB
        if st.session_state.get("show_save_dialog", False):
            st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB")
            
            analyses = results.get('analyses', [])
            selected_analyses = [analyses[i] for i in range(len(analyses)) if st.session_state.get(f"selected_doc_{i}", False)]
            
            st.write(f"**–í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(selected_analyses)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for i, analysis in enumerate(selected_analyses):
                st.write(f"‚Ä¢ {analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')} ({analysis.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')})")
            
            # –í—ã–±–æ—Ä KB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from modules.core.knowledge_manager import KnowledgeBaseManager
            from datetime import datetime
            kb_manager = KnowledgeBaseManager()
            existing_kbs = kb_manager.get_knowledge_bases(active_only=True)
            
            if existing_kbs:
                st.write("**–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é KB –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:**")
                
                kb_options = ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é KB"] + [f"ID {kb['id']}: {kb['name']}" for kb in existing_kbs]
                selected_kb = st.selectbox("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", kb_options, key="kb_selection")
                
                if selected_kb == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é KB":
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π KB
                    st.write("**–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:**")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç AI –µ—Å–ª–∏ –µ—Å—Ç—å
                    if selected_analyses and 'suggested_kb' in selected_analyses[0]:
                        suggestion = selected_analyses[0]['suggested_kb']
                        default_name = suggestion.get('suggested_name', '–ù–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π')
                        default_category = suggestion.get('suggested_category', '–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã')
                        default_description = suggestion.get('description', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
                    else:
                        default_name = "–ù–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
                        default_category = "–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
                        default_description = "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                    
                    kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ KB:", value=default_name, key="new_kb_name")
                    kb_category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", value=default_category, key="new_kb_category")
                    kb_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:", value=default_description, key="new_kb_description")
                    
                    # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if kb_name and kb_category:
                        kb_check = self._smart_kb_check(kb_name, kb_category, selected_analyses)
                        
                        if kb_check['has_conflicts']:
                            st.warning("‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã!**")
                            
                            if kb_check['exact_matches']:
                                st.error(f"‚ùå **–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:** KB —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{kb_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                                for match in kb_check['exact_matches']:
                                    st.write(f"‚Ä¢ **{match['name']}** (ID: {match['id']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {match['category']})")
                                
                                col1, col2 = st.columns(2)
                                with col1:
                                    if st.button("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é KB", key="use_existing_exact"):
                                        st.session_state["pending_kb_params"] = {
                                            "action": "use_existing",
                                            "kb_id": kb_check['exact_matches'][0]['id'],
                                            "name": kb_check['exact_matches'][0]['name']
                                        }
                                        st.rerun()
                                
                                with col2:
                                    if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º", key="create_different_name"):
                                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∏–º—è
                                        st.session_state["show_rename_dialog"] = True
                                        st.session_state["original_kb_name"] = kb_name
                                        st.session_state["original_kb_category"] = kb_category
                                        st.session_state["original_kb_description"] = kb_description
                                        st.rerun()
                            
                            elif kb_check['similar_matches']:
                                st.warning(f"‚ö†Ô∏è **–ü–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:**")
                                for match in kb_check['similar_matches']:
                                    st.write(f"‚Ä¢ **{match['name']}** (ID: {match['id']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {match['category']})")
                                
                                col1, col2 = st.columns(2)
                                with col1:
                                    if st.button("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂—É—é KB", key="use_similar"):
                                        st.session_state["pending_kb_params"] = {
                                            "action": "use_existing",
                                            "kb_id": kb_check['similar_matches'][0]['id'],
                                            "name": kb_check['similar_matches'][0]['name']
                                        }
                                        st.rerun()
                                
                                with col2:
                                    if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", key="create_new_anyway"):
                                        st.session_state["pending_kb_params"] = {
                                            "action": "create_new",
                                            "name": kb_name,
                                            "category": kb_category,
                                            "description": kb_description
                                        }
                                        st.rerun()
                            
                            if kb_check['category_matches']:
                                st.info(f"üí° **KB –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {len(kb_check['category_matches'])} –Ω–∞–π–¥–µ–Ω–æ")
                                for match in kb_check['category_matches'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                                    st.write(f"‚Ä¢ **{match['name']}** (ID: {match['id']})")
                                
                                if st.button("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ KB –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", key="show_category_kbs"):
                                    st.session_state["show_category_kbs"] = True
                                    st.rerun()
                        else:
                            st.success("‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ!** –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é KB.")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ KB –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
                    if st.session_state.get("show_category_kbs", False):
                        st.subheader(f"üìö –í—Å–µ KB –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{kb_category}':")
                        for match in kb_check['category_matches']:
                            col1, col2, col3 = st.columns([3, 1, 1])
                            with col1:
                                st.write(f"**{match['name']}** (ID: {match['id']})")
                                st.caption(match.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'))
                            with col2:
                                docs = kb_manager.get_documents(match['id'])
                                st.write(f"üìÑ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                            with col3:
                                if st.button("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", key=f"use_category_kb_{match['id']}"):
                                    st.session_state["pending_kb_params"] = {
                                        "action": "use_existing",
                                        "kb_id": match['id'],
                                        "name": match['name']
                                    }
                                    st.session_state["show_category_kbs"] = False
                                    st.rerun()
                        
                        if st.button("‚ùå –°–∫—Ä—ã—Ç—å", key="hide_category_kbs"):
                            st.session_state["show_category_kbs"] = False
                            st.rerun()
                    
                    # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ KB
                    if st.session_state.get("show_rename_dialog", False):
                        st.subheader("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ KB:")
                        new_kb_name = st.text_input(
                            "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ KB:", 
                            value=st.session_state.get("original_kb_name", ""),
                            key="new_kb_name_input"
                        )
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º", key="confirm_new_name"):
                                st.session_state["pending_kb_params"] = {
                                    "action": "create_new",
                                    "name": new_kb_name,
                                    "category": st.session_state.get("original_kb_category", ""),
                                    "description": st.session_state.get("original_kb_description", "")
                                }
                                st.session_state["show_rename_dialog"] = False
                                st.rerun()
                        
                        with col2:
                            if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key="cancel_rename"):
                                st.session_state["show_rename_dialog"] = False
                                st.rerun()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã KB –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É
                    st.session_state["pending_kb_params"] = {
                        "action": "create_new",
                        "name": kb_name,
                        "category": kb_category,
                        "description": kb_description
                    }
                    
                    if st.button("üíæ –°–æ–∑–¥–∞—Ç—å KB –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", key="create_and_save_final", type="primary"):
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        selected_doc_indices = [i for i in range(len(analyses)) if st.session_state.get(f"selected_doc_{i}", False)]
                        selected_image_indices = []
                        for i in range(len(analyses)):
                            if 'images' in analyses[i]:
                                for img_idx in range(len(analyses[i]['images'])):
                                    if st.session_state.get(f"select_img_{i}_{img_idx}", False):
                                        selected_image_indices.append((i, img_idx))
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        self._execute_save_to_kb_transactional(analyses, selected_doc_indices, selected_image_indices)
                    
                    if False:  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –¥–∏–∞–ª–æ–≥–µ
                        try:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é KB
                            kb_id = kb_manager.create_knowledge_base(
                                name=kb_name,
                                description=kb_description,
                                category=kb_category,
                                created_by="KB Admin"
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                            saved_count = 0
                            for analysis in selected_analyses:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                                if not full_text or (full_text.strip() == analysis.get('smart_summary', '').strip()):
                                    full_text = analysis.get('raw_ocr_text', '')
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ KB —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                                doc_id = kb_manager.add_document(
                                    kb_id=kb_id,
                                    title=analysis.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç'),
                                    file_path=str(analysis.get('file_path', '')),
                                    content_type=analysis.get('content_type', 'text/plain'),
                                    file_size=analysis.get('file_size', 0),
                                    upload_date=datetime.now().isoformat(),
                                    processed=True,
                                    status="processed",
                                    content=full_text,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                                    summary=analysis.get('smart_summary', ''),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç
                                    metadata={
                                        'ocr_cleaned': True,
                                        'gemini_analyzed': bool(analysis.get('images')),
                                        'text_length': len(full_text),
                                        'summary_length': len(analysis.get('smart_summary', '')),
                                        'content': full_text,
                                        'summary': analysis.get('smart_summary', ''),
                                        'processed': True,
                                        'status': "processed"
                                    }
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ Gemini
                                if analysis.get('images'):
                                    for image_info in analysis['images']:
                                        kb_manager.add_image(
                                            kb_id=kb_id,
                                            image_path=image_info.get('image_path', ''),
                                            image_name=image_info.get('image_name', ''),
                                            image_description=image_info.get('description', ''),
                                            llava_analysis=image_info.get('description', ''),
                                        )
                                
                                saved_count += 1
                            
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º KB –≤ JSON
                            try:
                                json_file_path = kb_manager.export_kb_to_json(kb_id, "docs/kb")
                                st.info(f"üìÑ KB —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ JSON: {json_file_path}")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å KB –≤ JSON: {e}")
                            
                            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ KB '{kb_name}' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
                            
                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                            st.info("üí° –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ KB. –•–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?")
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", key="archive_saved_docs_new_kb", type="primary"):
                                    archived_count = 0
                                    for doc_idx in selected_docs:
                                        analysis = analyses[doc_idx]
                                        file_path = Path(analysis.get('file_path', ''))
                                        if file_path.exists():
                                            success, result = self.smart_librarian.document_manager.archive_document(file_path, "saved_to_kb")
                                            if success:
                                                archived_count += 1
                                            else:
                                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è {file_path.name}: {result}")
                                    
                                    if archived_count > 0:
                                        st.success(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, —É–±–∏—Ä–∞—è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                                        new_analyses = [analyses[i] for i in range(len(analyses)) if i not in selected_docs]
                                        st.session_state.analysis_results['analyses'] = new_analyses
                            
                            with col2:
                                if st.button("‚ùå –ù–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key="dont_archive_new_kb"):
                                    pass
                            
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            st.session_state["show_save_dialog"] = False
                            st.session_state["last_saved_selection"] = f"{selected_docs}_{selected_images}"
                            for i in range(len(analyses)):
                                st.session_state[f"selected_doc_{i}"] = False
                            st.rerun()
                            
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ KB: {e}")
                else:
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é KB
                    kb_id = int(selected_kb.split(':')[0].split()[1])
                    kb_name = selected_kb.split(':')[1].strip()
                    
                    st.write(f"**–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ KB:** {kb_name}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã KB –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É
                    st.session_state["pending_kb_params"] = {
                        "action": "use_existing",
                        "kb_id": kb_id,
                        "name": kb_name
                    }
                    
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é KB", key="save_to_existing_final", type="primary"):
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        selected_doc_indices = [i for i in range(len(analyses)) if st.session_state.get(f"selected_doc_{i}", False)]
                        selected_image_indices = []
                        for i in range(len(analyses)):
                            if 'images' in analyses[i]:
                                for img_idx in range(len(analyses[i]['images'])):
                                    if st.session_state.get(f"select_img_{i}_{img_idx}", False):
                                        selected_image_indices.append((i, img_idx))
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        self._execute_save_to_kb_transactional(analyses, selected_doc_indices, selected_image_indices)
                    
                    if False:  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –¥–∏–∞–ª–æ–≥–µ
                        try:
                            saved_count = 0
                            for analysis in selected_analyses:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                                if not full_text or (full_text.strip() == analysis.get('smart_summary', '').strip()):
                                    full_text = analysis.get('raw_ocr_text', '')
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é KB —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                                doc_id = kb_manager.add_document(
                                    kb_id=kb_id,
                                    title=analysis.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç'),
                                    file_path=str(analysis.get('file_path', '')),
                                    content_type=analysis.get('content_type', 'text/plain'),
                                    file_size=analysis.get('file_size', 0),
                                    upload_date=datetime.now().isoformat(),
                                    processed=True,
                                    status="processed",
                                    content=full_text,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                                    summary=analysis.get('smart_summary', ''),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç
                                    metadata={
                                        'ocr_cleaned': True,
                                        'gemini_analyzed': bool(analysis.get('images')),
                                        'text_length': len(full_text),
                                        'summary_length': len(analysis.get('smart_summary', '')),
                                        'content': full_text,
                                        'summary': analysis.get('smart_summary', ''),
                                        'processed': True,
                                        'status': "processed"
                                    }
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ Gemini
                                if analysis.get('images'):
                                    for image_info in analysis['images']:
                                        kb_manager.add_image(
                                            kb_id=kb_id,
                                            image_path=image_info.get('image_path', ''),
                                            image_name=image_info.get('image_name', ''),
                                            image_description=image_info.get('description', ''),
                                            llava_analysis=image_info.get('description', ''),
                                        )
                                
                                saved_count += 1
                            
                            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB '{kb_name}'!")
                            
                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                            st.info("üí° –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ KB. –•–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?")
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", key="archive_saved_docs_existing_kb", type="primary"):
                                    archived_count = 0
                                    for doc_idx in selected_docs:
                                        analysis = analyses[doc_idx]
                                        file_path = Path(analysis.get('file_path', ''))
                                        if file_path.exists():
                                            success, result = self.smart_librarian.document_manager.archive_document(file_path, "saved_to_kb")
                                            if success:
                                                archived_count += 1
                                            else:
                                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è {file_path.name}: {result}")
                                    
                                    if archived_count > 0:
                                        st.success(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, —É–±–∏—Ä–∞—è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                                        new_analyses = [analyses[i] for i in range(len(analyses)) if i not in selected_docs]
                                        st.session_state.analysis_results['analyses'] = new_analyses
                            
                            with col2:
                                if st.button("‚ùå –ù–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key="dont_archive_existing_kb"):
                                    pass
                            
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            st.session_state["show_save_dialog"] = False
                            st.session_state["last_saved_selection"] = f"{selected_docs}_{selected_images}"
                            for i in range(len(analyses)):
                                st.session_state[f"selected_doc_{i}"] = False
                            st.rerun()
                            
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ KB: {e}")
            else:
                st.write("**–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:**")
                kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ KB:", key="new_kb_name_no_existing")
                kb_category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", key="new_kb_category_no_existing")
                kb_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:", key="new_kb_description_no_existing")
                
                if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å KB –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", key="create_and_save_no_existing"):
                    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KB
                    pass
            
            if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key="cancel_save"):
                st.session_state["show_save_dialog"] = False
                st.rerun()
        
        # –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB (—Å–∫—Ä—ã—Ç–∞ –∫–æ–≥–¥–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç)
        if not st.session_state.get("show_save_dialog", False):
            st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
        if results and 'analyses' in results and not st.session_state.get("show_save_dialog", False):
            analyses = results.get('analyses', [])
            selected_docs = [i for i in range(len(analyses)) if st.session_state.get(f"selected_doc_{i}", False)]
            selected_images = []
            for i in range(len(analyses)):
                if 'images' in analyses[i]:
                    for img_idx in range(len(analyses[i]['images'])):
                        if st.session_state.get(f"select_img_{i}_{img_idx}", False):
                            selected_images.append((i, img_idx))
            
            total_selected = len(selected_docs) + len(selected_images)
            
            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìÑ –í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", len(selected_docs))
            with col2:
                st.metric("üñºÔ∏è –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", len(selected_images))
            with col3:
                st.metric("üì¶ –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ", total_selected)
            
            # –£–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if total_selected > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤—ã–±–æ—Ä–µ
                current_selection = f"{selected_docs}_{selected_images}"
                last_saved_selection = st.session_state.get("last_saved_selection", "")
                
                if current_selection != last_saved_selection:
                    # –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ KB", key="save_selected_to_kb_main", type="primary"):
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                        st.session_state["show_save_dialog"] = True
                        st.rerun()
                    st.info("‚ÑπÔ∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤—ã–±–æ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                else:
                    # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                    st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ KB", key="save_selected_to_kb_main", disabled=True)
                    st.success("‚úÖ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ KB", key="save_selected_to_kb_main", disabled=True)
                st.info("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìÑ –í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 0)
            with col2:
                st.metric("üñºÔ∏è –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 0)
            with col3:
                st.metric("üì¶ –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ", 0)
            
            st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ KB", key="save_selected_to_kb_empty", disabled=True)
            st.info("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–ó –µ—Å–ª–∏ –µ—Å—Ç—å
        if st.session_state.get('kb_created_successfully', False):
            st.success(f"üéâ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{st.session_state.get('created_kb_name', '')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            st.session_state['kb_created_successfully'] = False
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", key="reset_analysis_btn"):
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
            st.session_state.analysis_in_progress = False
            st.session_state.analysis_results = None
            st.session_state.selected_files = []
            st.session_state.doc_status = None
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            keys_to_clear = [key for key in st.session_state.keys() if key.startswith(('show_full_text_', 'saved_text_', 'edit_text_', 'analyze_new_'))]
            for key in keys_to_clear:
                del st.session_state[key]
            st.rerun()
    
    def _render_smart_kb_creation(self):
        """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ó"""
        st.subheader("üìö –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ PDFUploadInterface
        self.pdf_upload_interface.render_simple_kb_creation()
    
    def _render_smart_kb_expansion(self):
        """–£–º–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ë–ó"""
        st.subheader("üìà –£–º–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–ó
        kbs = self.kb_manager.get_knowledge_bases()
        
        if not kbs:
            st.warning("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ë–ó")
            return
        
        # –í—ã–±–æ—Ä –ë–ó –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        kb_options = {f"{kb['name']} ({kb['category']})": kb['id'] for kb in kbs}
        selected_kb_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:", list(kb_options.keys()))
        selected_kb_id = kb_options[selected_kb_name]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–ó
        selected_kb = next(kb for kb in kbs if kb['id'] == selected_kb_id)
        st.info(f"**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:** {selected_kb['name']} | **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {selected_kb['category']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        upload_dir = self.smart_librarian.document_manager.upload_dir
        pdf_files = list(upload_dir.glob("*.pdf"))
        
        if not pdf_files:
            st.warning("–ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
        st.write("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–ó:**")
        selected_files = []
        already_processed_files = []
        
        for pdf_file in pdf_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
            docs = self.kb_manager.get_documents(selected_kb_id)
            already_processed = any(doc['title'] == pdf_file.name for doc in docs)
            
            if already_processed:
                st.write(f"‚úÖ {pdf_file.name} (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)")
                already_processed_files.append(pdf_file)
            else:
                if st.checkbox(f"üìÑ {pdf_file.name}", key=f"expand_{pdf_file.name}"):
                    selected_files.append(pdf_file)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            if selected_files:
                if st.button("üöÄ –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ë–ó", type="primary"):
                    self._process_uploaded_files(selected_files, selected_kb_id)
            else:
                st.button("üöÄ –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ë–ó", disabled=True)
        
        with col2:
            if already_processed_files:
                if st.button("üîÑ –î–æ–±–∞–≤–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", type="secondary"):
                    self._add_processed_files_to_kb(already_processed_files, selected_kb_id)
            else:
                st.button("üîÑ –î–æ–±–∞–≤–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", disabled=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if selected_files:
            st.info(f"üìÑ –í—ã–±—Ä–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(selected_files)}")
        if already_processed_files:
            st.info(f"‚úÖ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(already_processed_files)}")
    
    def _add_processed_files_to_kb(self, processed_files, kb_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ KB"""
        try:
            added_count = 0
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, pdf_file in enumerate(processed_files):
                status_text.text(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {pdf_file.name}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ KB
                    docs = self.kb_manager.get_documents(kb_id)
                    already_exists = any(doc['title'] == pdf_file.name for doc in docs)
                    
                    if already_exists:
                        st.warning(f"‚ö†Ô∏è {pdf_file.name} —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–π KB")
                        continue
                    
                    # –ò—â–µ–º –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ session_state
                    analysis_data = None
                    if 'analysis_results' in st.session_state and st.session_state.analysis_results:
                        analyses = st.session_state.analysis_results.get('analyses', [])
                        for analysis in analyses:
                            if analysis.get('file_name') == pdf_file.name:
                                analysis_data = analysis
                                break
                    
                    if analysis_data:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                        full_text = analysis_data.get('original_cleaned_text', analysis_data.get('full_cleaned_text', ''))
                        if not full_text or (full_text.strip() == analysis_data.get('smart_summary', '').strip()):
                            full_text = analysis_data.get('raw_ocr_text', '')
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ KB
                        doc_id = self.kb_manager.add_document(
                            kb_id=kb_id,
                            title=analysis_data.get('file_name', pdf_file.name),
                            file_path=str(pdf_file),
                            content_type='application/pdf',
                            file_size=pdf_file.stat().st_size,
                            metadata={
                                'ocr_cleaned': True,
                                'gemini_analyzed': bool(analysis_data.get('images')),
                                'text_length': len(full_text),
                                'summary_length': len(analysis_data.get('smart_summary', '')),
                                'content': full_text,
                                'summary': analysis_data.get('smart_summary', ''),
                                'processed': True,
                                'status': "processed"
                            }
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                        if analysis_data.get('images'):
                            for image_info in analysis_data['images']:
                                self.kb_manager.add_image(
                                    kb_id=kb_id,
                                    image_path=image_info.get('image_path', ''),
                                    image_name=image_info.get('image_name', ''),
                                    image_description=image_info.get('description', ''),
                                    llava_analysis=image_info.get('description', ''),
                                )
                        
                        added_count += 1
                        st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {pdf_file.name}")
                        
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
                        doc_id = self.kb_manager.add_document(
                            kb_id=kb_id,
                            title=pdf_file.name,
                            file_path=str(pdf_file),
                            content_type='application/pdf',
                            file_size=pdf_file.stat().st_size,
                            metadata={
                                'processed': False,
                                'status': "pending"
                            }
                        )
                        added_count += 1
                        st.info(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç: {pdf_file.name}")
                
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {pdf_file.name}: {e}")
                
                progress_bar.progress((i + 1) / len(processed_files))
            
            status_text.text("")
            
            if added_count > 0:
                st.success(f"üéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∏–∑ {len(processed_files)} —Ñ–∞–π–ª–æ–≤ –≤ KB!")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def _render_archive_management(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        st.subheader("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏–≤–µ
        archive_info = self.smart_librarian.document_manager.get_archive_info()
        
        if archive_info['total_files'] == 0:
            st.info("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üì¶ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ", archive_info['total_files'])
        with col2:
            st.metric("üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞", f"{archive_info['total_size']/1024/1024:.1f} MB")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤—ã –ø–æ –¥–∞—Ç–∞–º
        st.subheader("üìÖ –ê—Ä—Ö–∏–≤—ã –ø–æ –¥–∞—Ç–∞–º")
        
        for date_info in archive_info['dates']:
            with st.expander(f"üìÖ {date_info['date']} ({date_info['files_count']} —Ñ–∞–π–ª–æ–≤, {date_info['size']/1024:.1f} KB)"):
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —ç—Ç–æ–π –¥–∞—Ç–µ
                date_dir = self.smart_librarian.document_manager.archive_dir / date_info['date']
                if date_dir.exists():
                    files = list(date_dir.glob("*"))
                    
                    for file_path in files:
                        if file_path.is_file():
                            col1, col2, col3 = st.columns([3, 1, 1])
                            
                            with col1:
                                st.write(f"üìÑ {file_path.name}")
                            
                            with col2:
                                st.write(f"{file_path.stat().st_size/1024:.1f} KB")
                            
                            with col3:
                                if st.button("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", key=f"restore_{file_path.name}"):
                                    success = self.smart_librarian.document_manager.restore_from_archive(str(file_path))
                                    if success:
                                        st.success(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {file_path.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                                        st.rerun()
                                    else:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        st.subheader("‚öôÔ∏è –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∞—Ä—Ö–∏–≤", type="secondary"):
                if st.session_state.get('confirm_clear_archive', False):
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞
                    archive_dir = self.smart_librarian.document_manager.archive_dir
                    if archive_dir.exists():
                        import shutil
                        shutil.rmtree(archive_dir)
                        archive_dir.mkdir(parents=True, exist_ok=True)
                    st.success("‚úÖ –ê—Ä—Ö–∏–≤ –æ—á–∏—â–µ–Ω")
                    st.rerun()
                else:
                    st.session_state['confirm_clear_archive'] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞")
        
        with col2:
            if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
                st.rerun()
    
    def _render_admin_panel(self):
        """–†–µ–Ω–¥–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ AI Billing"""
        st.header("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å AI Billing")
        st.info("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–∑ AI Billing —Å–∏—Å—Ç–µ–º—ã")
        
        # –†–µ–Ω–¥–µ—Ä–∏–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        self.admin_panel.render_main_panel()
    
    def _render_create_new_kb(self):
        """–†–µ–Ω–¥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ë–ó"""
        st.header("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        st.info("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SimpleKBAssistant –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if hasattr(self.admin_panel, 'kb_assistant') and self.admin_panel.kb_assistant:
            self.admin_panel.kb_assistant.render_assistant()
        else:
            st.error("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def _render_expand_existing_kb(self):
        """–†–µ–Ω–¥–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–ó"""
        st.header("üìà –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        st.info("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–ó
        kbs = self.kb_manager.get_knowledge_bases()
        
        if not kbs:
            st.warning("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ë–ó –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ë–ó'")
            return
        
        # –í—ã–±–æ—Ä –ë–ó –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        kb_options = {f"{kb['name']} ({kb['category']})": kb['id'] for kb in kbs}
        selected_kb_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:", list(kb_options.keys()))
        selected_kb_id = kb_options[selected_kb_name]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ë–ó
        selected_kb = next(kb for kb in kbs if kb['id'] == selected_kb_id)
        st.subheader(f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {selected_kb['name']}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {selected_kb['category']}")
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_kb['description']}")
        with col2:
            st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {selected_kb['created_at']}")
            st.write(f"**–ê–≤—Ç–æ—Ä:** {selected_kb['created_by']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        docs = self.kb_manager.get_documents(selected_kb_id)
        st.subheader(f"üìÑ –¢–µ–∫—É—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({len(docs)})")
        
        if docs:
            for doc in docs:
                status_icon = "‚úÖ" if doc['processed'] else "‚è≥"
                st.write(f"{status_icon} **{doc['title']}** - {doc['processing_status']}")
        else:
            st.info("–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        st.subheader("üì§ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–ó",
            type=['pdf'],
            accept_multiple_files=True,
            help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        )
        
        if uploaded_files:
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with st.expander("üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
                for file in uploaded_files:
                    file_size = len(file.getvalue()) / 1024
                    st.write(f"‚Ä¢ **{file.name}** ({file_size:.1f} KB)")
            
            if st.button("üöÄ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ë–ó", type="primary"):
                self._process_uploaded_files(uploaded_files, selected_kb_id)
    
    def _process_uploaded_files(self, uploaded_files, kb_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        processed_count = 0
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, uploaded_file in enumerate(uploaded_files):
            try:
                status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {uploaded_file.name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                result = self.admin_panel.pdf_processor.process_pdf(
                    uploaded_file, 
                    kb_id, 
                    uploaded_file.name
                )
                
                if result['success']:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–ó
                    doc_id = self.kb_manager.add_document(
                        kb_id,
                        result['title'],
                        result['file_path'],
                        result['content_type'],
                        result['file_size'],
                        result['metadata']
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    self.kb_manager.update_document_status(doc_id, True, 'completed')
                    processed_count += 1
                    
                    st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {uploaded_file.name}")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {uploaded_file.name} - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {uploaded_file.name} - {e}")
            
            progress_bar.progress((i + 1) / len(uploaded_files))
        
        status_text.text("")
        st.success(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        st.rerun()
    
    def _render_settings(self):
        """–†–µ–Ω–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        render_settings_page()
    
    def _render_model_management(self):
        """–†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏"""
        st.header("ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ –∞–≥–µ–Ω—Ç–æ–≤")
        st.markdown("---")
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.model_manager.render_global_model_settings()
        
        st.markdown("---")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        st.subheader("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents = {
            "Smart Librarian": self.smart_librarian,
            "RAG System": self.rag,
            "Text Analyzer": self.text_analyzer,
            "Chunk Optimizer": self.chunk_optimizer,
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        agent_tabs = st.tabs([f"ü§ñ {name}" for name in agents.keys()])
        
        for i, (agent_name, agent_instance) in enumerate(agents.items()):
            with agent_tabs[i]:
                try:
                    self.model_manager.render_agent_model_config(
                        agent_name, 
                        agent_instance, 
                        key_prefix=f"agent_{i}"
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {agent_name}: {e}")
    
    def _create_kb_from_strategy(self, strategy: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ë–ó –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            st.write(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –ë–ó —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            st.write(f"üîç DEBUG: - –ù–∞–∑–≤–∞–Ω–∏–µ: {strategy.get('kb_name', '–ù–ï –£–ö–ê–ó–ê–ù–û')}")
            st.write(f"üîç DEBUG: - –û–ø–∏—Å–∞–Ω–∏–µ: {strategy.get('description', '–ù–ï –£–ö–ê–ó–ê–ù–û')}")
            st.write(f"üîç DEBUG: - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {strategy.get('category', '–ù–ï –£–ö–ê–ó–ê–ù–û')}")
            
            # –°–æ–∑–¥–∞–µ–º –ë–ó
            kb_id = self.kb_manager.create_knowledge_base(
                name=strategy.get('kb_name', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'),
                description=strategy.get('description', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
                category=strategy.get('category', '–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'),
                created_by='admin'
            )
            
            st.success(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{strategy['kb_name']}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
            analyses = st.session_state.analysis_results.get('analyses', [])
            added_count = 0
            
            for analysis in analyses:
                if isinstance(analysis, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–ó
                    full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                    st.write(f"üîç DEBUG: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è RAG: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    st.write(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {full_text[:100]}...")
                    st.write(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π")
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    clean_metadata = {
                        'file_name': analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                        'file_path': analysis.get('file_path', ''),
                        'content_type': analysis.get('content_type', 'application/octet-stream'),
                        'file_size': analysis.get('file_size', 0),
                        'category': analysis.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'format_description': analysis.get('format_description', ''),
                        'content_type_detected': analysis.get('content_type_detected', ''),
                        'confidence': analysis.get('confidence', 0),
                        'recommendations': analysis.get('recommendations', []),
                        'chunking_recommendations': analysis.get('chunking_recommendations', []),
                        'suggested_kb': analysis.get('suggested_kb', {}),
                        'images_count': len(analysis.get('images', [])),
                        'processing_timestamp': analysis.get('processing_timestamp', ''),
                        # –ò—Å–∫–ª—é—á–∞–µ–º: original_cleaned_text, full_cleaned_text, smart_summary, raw_ocr_text
                        # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ RAG —Å–∏—Å—Ç–µ–º–µ
                    }
                    
                    doc_id = self.kb_manager.add_document(
                        kb_id=kb_id,
                        title=analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                        file_path=analysis.get('file_path', ''),
                        content_type=analysis.get('content_type', 'application/octet-stream'),
                        file_size=analysis.get('file_size', 0),
                        metadata=clean_metadata
                    )
                    if doc_id:
                        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ RAG —Å–∏—Å—Ç–µ–º–µ
                        try:
                            full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                            if full_text:
                                st.write(f"üîç DEBUG: –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ RAG —Å–∏—Å—Ç–µ–º–µ...")
                                self.rag.add_document_to_kb(
                                    kb_id=kb_id,
                                    content=full_text,
                                    metadata={
                                        'title': analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                                        'file_path': analysis.get('file_path', ''),
                                        'content_type': analysis.get('content_type', 'application/octet-stream'),
                                        'file_size': analysis.get('file_size', 0),
                                        'category': analysis.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                                        'doc_id': doc_id
                                    }
                                )
                                st.write(f"üîç DEBUG: –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ RAG —Å–∏—Å—Ç–µ–º–µ")
                            else:
                                st.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ RAG")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ RAG: {e}")
                            import traceback
                            st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                        
                        added_count += 1
            
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–ó")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–ó –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            test_questions = st.session_state.get('generated_test_questions')
            st.write(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions) if test_questions else 0}")
            
            if test_questions:
                st.write(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–ó {kb_id}")
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–ó
                    self.smart_librarian._save_test_questions_to_kb(kb_id, test_questions)
                    st.success(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–ó {kb_id}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    st.write(f"üîç DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ë–ó {kb_id}")
                    self._show_relevance_testing_after_creation(kb_id, test_questions)
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
                    import traceback
                    st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            else:
                st.info("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ 'üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã' –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è.")
            
            st.rerun()
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
    
    def _process_documents_to_kb(self, documents: List[Dict], kb_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–ó"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∏–∑ session_state, –∞ –Ω–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ documents
            analyses = st.session_state.analysis_results.get('analyses', [])
            st.write(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(analyses)}")
            added_count = 0
            
            for i, analysis in enumerate(analyses):
                if isinstance(analysis, dict):
                    st.write(f"üîç DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç {i+1}: {analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–ó
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–ó
                        full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                        st.write(f"üîç DEBUG: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è RAG: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        st.write(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {full_text[:100]}...")
                        st.write(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π")
                        
                        # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
                        clean_metadata = {
                            'file_name': analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                            'file_path': analysis.get('file_path', ''),
                            'content_type': analysis.get('content_type', 'application/octet-stream'),
                            'file_size': analysis.get('file_size', 0),
                            'category': analysis.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'format_description': analysis.get('format_description', ''),
                            'content_type_detected': analysis.get('content_type_detected', ''),
                            'confidence': analysis.get('confidence', 0),
                            'recommendations': analysis.get('recommendations', []),
                            'chunking_recommendations': analysis.get('chunking_recommendations', []),
                            'suggested_kb': analysis.get('suggested_kb', {}),
                            'images_count': len(analysis.get('images', [])),
                            'processing_timestamp': analysis.get('processing_timestamp', ''),
                            # –ò—Å–∫–ª—é—á–∞–µ–º: original_cleaned_text, full_cleaned_text, smart_summary, raw_ocr_text
                            # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ RAG —Å–∏—Å—Ç–µ–º–µ
                        }
                        
                        doc_id = self.kb_manager.add_document(
                            kb_id=kb_id,
                            title=analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                            file_path=analysis.get('file_path', ''),
                            content_type=analysis.get('content_type', 'application/octet-stream'),
                            file_size=analysis.get('file_size', 0),
                            metadata=clean_metadata
                        )
                        st.write(f"üîç DEBUG: –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {doc_id}")
                        if doc_id:
                            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ RAG —Å–∏—Å—Ç–µ–º–µ
                            try:
                                full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                                if full_text:
                                    st.write(f"üîç DEBUG: –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ RAG —Å–∏—Å—Ç–µ–º–µ...")
                                    self.rag.add_document_to_kb(
                                        kb_id=kb_id,
                                        content=full_text,
                                        metadata={
                                            'title': analysis.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                                            'file_path': analysis.get('file_path', ''),
                                            'content_type': analysis.get('content_type', 'application/octet-stream'),
                                            'file_size': analysis.get('file_size', 0),
                                            'category': analysis.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                                            'doc_id': doc_id
                                        }
                                    )
                                    st.write(f"üîç DEBUG: –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ RAG —Å–∏—Å—Ç–µ–º–µ")
                                else:
                                    st.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ RAG")
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ RAG: {e}")
                                import traceback
                                st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                            
                            added_count += 1
                    except Exception as e:
                        st.write(f"üîç DEBUG: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                        import traceback
                        st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–ó")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–ó –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            test_questions = st.session_state.get('generated_test_questions')
            st.write(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions) if test_questions else 0}")
            
            if test_questions:
                st.write(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–ó {kb_id}")
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–ó
                    self.smart_librarian._save_test_questions_to_kb(kb_id, test_questions)
                    st.success(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–ó {kb_id}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    st.write(f"üîç DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ë–ó {kb_id}")
                    self._show_relevance_testing_after_creation(kb_id, test_questions)
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
                    import traceback
                    st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            else:
                st.info("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ 'üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã' –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è.")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            import traceback
            st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    def _show_relevance_testing_after_creation(self, kb_id: int, test_questions: List[Dict]):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó"""
        st.markdown("---")
        st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ë–ó")
        
        st.write(f"üîç DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º {len(test_questions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ë–ó {kb_id}")
        st.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–ó ID: {kb_id}")
        st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–ó –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API")
        st.info(f"üåê API endpoint: `/kb-test-questions/{kb_id}` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–ó", key=f"load_test_questions_from_kb_{kb_id}"):
                try:
                    saved_questions = self.smart_librarian.get_test_questions_from_kb(kb_id)
                    if saved_questions:
                        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_questions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–ó")
                        st.write("**–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**")
                        for i, q in enumerate(saved_questions, 1):
                            st.write(f"{i}. {q.get('question', '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    else:
                        st.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–ó")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        
        with col2:
            if st.button("üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ë–ó", key=f"check_saved_metadata_{kb_id}"):
                try:
                    documents = self.kb_manager.get_documents(kb_id)
                    if documents:
                        doc = documents[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                        metadata = json.loads(doc.get('metadata', '{}')) if doc.get('metadata') else {}
                        
                        st.success(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–ó")
                        st.write("**–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π):**")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                        metadata_keys = list(metadata.keys())
                        st.write(f"**–ö–ª—é—á–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:** {', '.join(metadata_keys)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:** {metadata.get('file_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {metadata.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                        st.write(f"**–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {metadata.get('file_size', 0)} –±–∞–π—Ç")
                        st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {metadata.get('images_count', 0)}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {metadata.get('confidence', 0)}")
                        
                        st.info("‚ÑπÔ∏è –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ RAG —Å–∏—Å—Ç–µ–º–µ, –∞ –Ω–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö SQLite")
                    else:
                        st.warning("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–ó")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –ø–æ–∏—Å–∫–∞
        st.markdown("---")
        st.subheader("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–æ–∏—Å–∫–∞")
        
        test_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ RAG:", key=f"test_rag_query_{kb_id}")
        if st.button("üîç –ü–æ–∏—Å–∫ –≤ RAG", key=f"test_rag_search_{kb_id}"):
            if test_query:
                try:
                    with st.spinner("–ò—â–µ–º –≤ RAG —Å–∏—Å—Ç–µ–º–µ..."):
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ RAG
                        results = self.rag.get_response_with_context(
                            test_query, 
                            kb_ids=[kb_id], 
                            context_limit=3
                        )
                        
                        st.success("‚úÖ –ü–æ–∏—Å–∫ –≤ RAG –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:**")
                        st.write(results)
                        
                        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                        try:
                            docs = self.rag.search_documents(test_query, kb_ids=[kb_id], limit=3)
                            if docs:
                                st.write("**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**")
                                for i, doc in enumerate(docs, 1):
                                    st.write(f"{i}. {doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                                    st.write(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc.get('score', 'N/A')}")
                                    st.write(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {doc.get('content', '')[:200]}...")
                            else:
                                st.warning("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ RAG")
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                            
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ RAG: {e}")
                    import traceback
                    st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        
        for i, question in enumerate(test_questions, 1):
            with st.expander(f"‚ùì –í–æ–ø—Ä–æ—Å {i}: {question['question']}"):
                st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {question.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                st.write(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {question.get('difficulty', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                st.write(f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(question.get('expected_keywords', []))}")
                
                if st.button(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ë–ó {kb_id}", key=f"test_question_kb_{kb_id}_{i}"):
                    try:
                        with st.spinner("–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º—É..."):
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG
                            answer = self.rag.get_response_with_context(
                                question['question'], 
                                kb_ids=[kb_id], 
                                context_limit=3
                            )
                        
                        st.success("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
                        st.write(answer)
                        
                        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                        relevance_score = self._calculate_relevance_score(question, answer)
                        st.metric("–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏", f"{relevance_score:.1f}/10")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                        try:
                            sources = self.rag.search_documents(question['question'], kb_ids=[kb_id], limit=3)
                            if sources:
                                st.write("**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**")
                                for j, source in enumerate(sources, 1):
                                    st.write(f"{j}. {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source.get('score', 0):.3f})")
                            else:
                                st.warning("‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–ó")
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                        import traceback
                        st.write(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    def _calculate_relevance_score(self, question: Dict, answer: str) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not answer or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in answer.lower() or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" in answer.lower():
            return 2.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        expected_keywords = question.get('expected_keywords', [])
        found_keywords = sum(1 for keyword in expected_keywords if keyword.lower() in answer.lower())
        
        if expected_keywords:
            keyword_score = (found_keywords / len(expected_keywords)) * 5.0
        else:
            keyword_score = 3.0
        
        # –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        length_score = min(5.0, max(1.0, len(answer) / 100))
        
        return min(10.0, keyword_score + length_score)
        
        st.markdown("---")
        
        # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.model_manager.render_agent_status(agents)
    
    def _smart_kb_check(self, suggested_name, suggested_category, analyses):
        """–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ KB –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        from modules.core.knowledge_manager import KnowledgeBaseManager
        
        kb_manager = KnowledgeBaseManager()
        existing_kbs = kb_manager.get_knowledge_bases(active_only=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        exact_matches = [kb for kb in existing_kbs if kb['name'].lower() == suggested_name.lower()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        similar_matches = []
        for kb in existing_kbs:
            if (suggested_name.lower() in kb['name'].lower() or 
                kb['name'].lower() in suggested_name.lower()):
                similar_matches.append(kb)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_matches = [kb for kb in existing_kbs if kb['category'] == suggested_category]
        
        return {
            'exact_matches': exact_matches,
            'similar_matches': similar_matches,
            'category_matches': category_matches,
            'has_conflicts': len(exact_matches) > 0 or len(similar_matches) > 0
        }
    
    def _execute_save_to_kb_transactional(self, analyses, selected_docs, selected_images):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        from modules.core.knowledge_manager import KnowledgeBaseManager
        from datetime import datetime
        
        kb_manager = KnowledgeBaseManager()
        pending_params = st.session_state.get("pending_kb_params", {})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            status_text.text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
            progress_bar.progress(10)
            
            transaction_id = self.smart_librarian.transaction_manager.begin_transaction(
                operation_type="kb_save_operation",
                metadata={
                    'documents_count': len(selected_docs),
                    'images_count': len(selected_images),
                    'action': pending_params.get("action", "unknown"),
                    'kb_name': pending_params.get("name", "unknown")
                }
            )
            
            progress_bar.progress(20)
            status_text.text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞")
            if pending_params["action"] == "create_new":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                kb_name = pending_params["name"]
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é KB
                status_text.text("üìö –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
                progress_bar.progress(30)
                
                kb_id = kb_manager.create_knowledge_base(
                    name=kb_name,
                    description=pending_params["description"],
                    category=pending_params["category"],
                    created_by="KB Admin"
                )
                
                progress_bar.progress(40)
                status_text.text("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é KB
                kb_id = pending_params["kb_id"]
                kb_name = pending_params["name"]
                progress_bar.progress(40)
                status_text.text("üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            status_text.text("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            progress_bar.progress(50)
            
            saved_count = 0
            total_docs = len(selected_docs)
            
            for i, doc_idx in enumerate(selected_docs):
                analysis = analyses[doc_idx]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_progress = 50 + (i / total_docs) * 30  # 50-80% –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                progress_bar.progress(int(doc_progress))
                status_text.text(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç {i+1}/{total_docs}: {analysis.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç')}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                full_text = analysis.get('original_cleaned_text', analysis.get('full_cleaned_text', ''))
                if not full_text or (full_text.strip() == analysis.get('smart_summary', '').strip()):
                    full_text = analysis.get('raw_ocr_text', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc_id = kb_manager.add_document(
                    kb_id=kb_id,
                    title=analysis.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç'),
                    file_path=str(analysis.get('file_path', '')),
                    content_type=analysis.get('content_type', 'text/plain'),
                    file_size=analysis.get('file_size', 0),
                    metadata={
                        'ocr_cleaned': True,
                        'gemini_analyzed': bool(analysis.get('images')),
                        'text_length': len(full_text),
                        'summary_length': len(analysis.get('smart_summary', '')),
                        'content': full_text,
                        'summary': analysis.get('smart_summary', ''),
                        'processed': True,
                        'status': "processed"
                    }
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ Gemini
                if analysis.get('images'):
                    for image_info in analysis['images']:
                        kb_manager.add_image(
                            kb_id=kb_id,
                            image_path=image_info.get('image_path', ''),
                            image_name=image_info.get('image_name', ''),
                            image_description=image_info.get('description', ''),
                            llava_analysis=image_info.get('description', ''),
                        )
                
                saved_count += 1
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º KB –≤ JSON
            status_text.text("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º KB –≤ JSON...")
            progress_bar.progress(85)
            
            try:
                json_file_path = kb_manager.export_kb_to_json(kb_id, "docs/kb")
                st.info(f"üìÑ KB —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ JSON: {json_file_path}")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å KB –≤ JSON: {e}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            status_text.text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
            progress_bar.progress(90)
            
            commit_success = self.smart_librarian.transaction_manager.commit_transaction(transaction_id)
            if not commit_success:
                raise Exception("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            
            progress_bar.progress(100)
            status_text.text("üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if pending_params["action"] == "create_new":
                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ KB '{kb_name}' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
            else:
                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB '{kb_name}'!")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            st.info("üí° –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ KB. –•–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", key="archive_saved_docs_final", type="primary"):
                    archived_count = 0
                    for doc_idx in selected_docs:
                        analysis = analyses[doc_idx]
                        file_path = Path(analysis.get('file_path', ''))
                        if file_path.exists():
                            success, result = self.smart_librarian.document_manager.archive_document(file_path, "saved_to_kb")
                            if success:
                                archived_count += 1
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è {file_path.name}: {result}")
                    
                    if archived_count > 0:
                        st.success(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, —É–±–∏—Ä–∞—è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                        new_analyses = [analyses[i] for i in range(len(analyses)) if i not in selected_docs]
                        st.session_state.analysis_results['analyses'] = new_analyses
            
            with col2:
                if st.button("‚ùå –ù–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key="dont_archive_final"):
                    pass
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            archived_count = 0
            for doc_idx in selected_docs:
                analysis = analyses[doc_idx]
                file_path = Path(analysis.get('file_path', ''))
                if file_path.exists():
                    try:
                        success, result = self.smart_librarian.document_manager.archive_document(file_path, "saved_to_kb")
                        if success:
                            archived_count += 1
                        else:
                            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å {file_path.name}: {result}")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è {file_path.name}: {e}")
            
            if archived_count > 0:
                st.info(f"üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, —É–±–∏—Ä–∞—è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                new_analyses = [analyses[i] for i in range(len(analyses)) if i not in selected_docs]
                st.session_state.analysis_results['analyses'] = new_analyses
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.session_state["show_save_dialog"] = False
            st.session_state["pending_kb_params"] = None
            st.session_state["last_saved_selection"] = f"{selected_docs}_{selected_images}"
            for i in range(len(analyses)):
                st.session_state[f"selected_doc_{i}"] = False
            st.rerun()
            
        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                status_text.text("üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
                progress_bar.progress(0)
                
                rollback_success = self.smart_librarian.transaction_manager.rollback_transaction(transaction_id)
                if rollback_success:
                    status_text.text("‚ùå –û—à–∏–±–∫–∞ - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ KB: {e}")
                    st.warning("üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                else:
                    status_text.text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
                    st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ KB: {e}")
                    st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.")
            except Exception as rollback_error:
                status_text.text("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ KB: {e}")
                st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
                st.error("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã!")
