"""
Knowledge Base Workflow Guide
–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
"""

import streamlit as st
from typing import List, Dict

class KBWorkflow:
    def __init__(self):
        self.workflow_steps = {
            "create": {
                "title": "üìö –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                "steps": [
                    "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª 'ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó'",
                    "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads/",
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:",
                    "   ‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–≤—Å–µ —Ñ–∞–π–ª—ã)",
                    "   ‚Ä¢ –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤)",
                    "4. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ë–ó",
                    "5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è",
                    "6. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
                ],
                "result": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã"
            },
            "load": {
                "title": "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ RAG",
                "steps": [
                    "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'",
                    "2. –ù–∞–∂–º–∏—Ç–µ 'üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'",
                    "3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ",
                    "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ë–ó"
                ],
                "result": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            },
            "test": {
                "title": "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞",
                "steps": [
                    "1. –í —Ä–∞–∑–¥–µ–ª–µ 'üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'",
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞",
                    "3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                    "4. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏'",
                    "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    "6. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –ò–ò"
                ],
                "result": "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            },
            "stop": {
                "title": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã",
                "steps": [
                    "1. –í —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'",
                    "2. –ù–∞–∂–º–∏—Ç–µ 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å RAG —Å–∏—Å—Ç–µ–º—É'",
                    "3. –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit"
                ],
                "result": "RAG —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏"
            },
            "recreate": {
                "title": "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                "steps": [
                    "1. –í —Ä–∞–∑–¥–µ–ª–µ 'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ó'",
                    "2. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
                    "3. –ù–∞–∂–º–∏—Ç–µ 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å' (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)",
                    "4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ë–ó —á–µ—Ä–µ–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                    "5. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤ RAG —Å–∏—Å—Ç–µ–º—É",
                    "6. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É"
                ],
                "result": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞"
            },
            "troubleshoot": {
                "title": "üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
                "steps": [
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ 'üìä –û–±–∑–æ—Ä'",
                    "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (processed = 1)",
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ data/uploads/",
                    "4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ RAG —Å–∏—Å—Ç–µ–º—É",
                    "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Ollama –º–æ–¥–µ–ª–µ–π",
                    "6. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –ë–ó"
                ],
                "result": "–ü—Ä–æ–±–ª–µ–º—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã"
            }
        }
    
    def render_workflow_guide(self):
        """Render complete workflow guide"""
        st.header("üìã –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
        
        # Workflow selection
        workflow_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
            [
                "üìö –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ RAG", 
                "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞",
                "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã",
                "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                "üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"
            ]
        )
        
        # Get workflow key
        workflow_key = None
        for key, value in self.workflow_steps.items():
            if value["title"] == workflow_type:
                workflow_key = key
                break
        
        if workflow_key:
            self._render_workflow_steps(workflow_key)
        
        # Quick actions
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üöÄ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó", type="primary"):
                self._render_full_cycle()
        
        with col2:
            if st.button("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"):
                self._render_diagnostics()
        
        with col3:
            if st.button("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ë–ó"):
                self._render_status_check()
    
    def _render_workflow_steps(self, workflow_key: str):
        """Render specific workflow steps"""
        workflow = self.workflow_steps[workflow_key]
        
        st.subheader(workflow["title"])
        
        # Steps
        st.markdown("**–ü–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:**")
        for step in workflow["steps"]:
            st.markdown(f"‚Ä¢ {step}")
        
        # Result
        st.success(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {workflow['result']}")
        
        # Additional tips
        if workflow_key == "create":
            st.info("""
            **üí° –°–æ–≤–µ—Ç—ã:**
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ë–ó
            - –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 50MB)
            - –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            """)
        
        elif workflow_key == "load":
            st.info("""
            **üí° –°–æ–≤–µ—Ç—ã:**
            - –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã
            - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ RAG —Å–∏—Å—Ç–µ–º—É
            """)
        
        elif workflow_key == "test":
            st.info("""
            **üí° –°–æ–≤–µ—Ç—ã:**
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            """)
    
    def _render_full_cycle(self):
        """Render full KB creation cycle"""
        st.subheader("üöÄ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ó")
        
        st.markdown("""
        **1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤**
        - –ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é `data/uploads/`
        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
        
        **2. –°–æ–∑–¥–∞–Ω–∏–µ –ë–ó**
        - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó"
        - –í—ã–±–µ—Ä–∏—Ç–µ "üöÄ –°–æ–∑–¥–∞—Ç—å –ë–ó '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã'"
        - –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        
        **3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ RAG**
        - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        - –ù–∞–∂–º–∏—Ç–µ "üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        
        **4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**
        - –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –ò–ò
        
        **5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã**
        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        """)
    
    def _render_diagnostics(self):
        """Render system diagnostics"""
        st.subheader("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        # Check database
        try:
            import sqlite3
            conn = sqlite3.connect('kbs.db')
            c = conn.cursor()
            
            # KB count
            c.execute("SELECT COUNT(*) FROM knowledge_bases WHERE is_active = 1")
            kb_count = c.fetchone()[0]
            
            # Document count
            c.execute("SELECT COUNT(*) FROM knowledge_documents WHERE processed = 1")
            doc_count = c.fetchone()[0]
            
            # File count
            import os
            upload_dir = "data/uploads"
            file_count = len([f for f in os.listdir(upload_dir) if f.endswith('.pdf')]) if os.path.exists(upload_dir) else 0
            
            conn.close()
            
            st.markdown("**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**")
            st.write(f"‚Ä¢ –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ –ë–î: {kb_count}")
            st.write(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
            st.write(f"‚Ä¢ PDF —Ñ–∞–π–ª–æ–≤ –≤ uploads/: {file_count}")
            
            if kb_count > 0 and doc_count > 0:
                st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ó")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    def _render_status_check(self):
        """Render status of all KBs"""
        st.subheader("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
        
        try:
            import sqlite3
            conn = sqlite3.connect('kbs.db')
            c = conn.cursor()
            
            c.execute("""
                SELECT kb.id, kb.name, kb.category, kb.created_at,
                       COUNT(kd.id) as doc_count,
                       SUM(CASE WHEN kd.processed = 1 THEN 1 ELSE 0 END) as processed_count
                FROM knowledge_bases kb
                LEFT JOIN knowledge_documents kd ON kb.id = kd.kb_id
                WHERE kb.is_active = 1
                GROUP BY kb.id
                ORDER BY kb.created_at DESC
            """)
            
            results = c.fetchall()
            conn.close()
            
            if results:
                for row in results:
                    kb_id, name, category, created_at, doc_count, processed_count = row
                    
                    with st.expander(f"üìö {name} (ID: {kb_id})"):
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}")
                        st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {created_at}")
                        st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {doc_count}")
                        st.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {processed_count}")
                        
                        if processed_count == doc_count and doc_count > 0:
                            st.success("‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                        elif processed_count > 0:
                            st.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                        else:
                            st.error("‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            else:
                st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
