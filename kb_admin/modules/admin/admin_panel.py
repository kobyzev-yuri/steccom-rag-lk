"""
Admin Panel for Knowledge Base Management
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
"""

import streamlit as st
import os
import sqlite3
from datetime import datetime
from typing import List, Dict
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KB Admin
sys.path.append(str(Path(__file__).parent.parent))

from modules.core.knowledge_manager import KnowledgeBaseManager
from modules.core.pdf_processor import PDFProcessor
from modules.rag.multi_kb_rag import MultiKBRAG
from modules.admin.simple_kb_assistant import SimpleKBAssistant
from modules.admin.kb_workflow import KBWorkflow

class AdminPanel:
    def __init__(self):
        self.kb_manager = KnowledgeBaseManager()
        self.pdf_processor = PDFProcessor()
        # Persist RAG system across reruns using session_state
        if 'admin_rag_system' not in st.session_state:
            st.session_state.admin_rag_system = MultiKBRAG()
        self.rag_system = st.session_state.admin_rag_system
        try:
            self.kb_assistant = SimpleKBAssistant(self.kb_manager, self.pdf_processor)
            self.kb_workflow = KBWorkflow()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            self.kb_assistant = None
            self.kb_workflow = None
    
    def render_main_panel(self):
        """Render main admin panel"""
        st.title("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
        
        # Sidebar navigation
        st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            [
                "üìä –û–±–∑–æ—Ä",
                "üìã –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å –ë–ó",
                "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó",
                "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ó",
                "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            ]
        )
        
        if page == "üìä –û–±–∑–æ—Ä":
            self.render_overview()
        elif page == "üìã –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å –ë–ó":
            if self.kb_workflow:
                self.kb_workflow.render_workflow_guide()
            else:
                st.error("–ê–ª–≥–æ—Ä–∏—Ç–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫.")
        elif page == "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó":
            if self.kb_assistant:
                self.kb_assistant.render_assistant()
            else:
                st.error("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫.")
        elif page == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ó":
            self.render_kb_management()
        elif page == "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
            self.render_document_upload()
        elif page == "üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            self.render_search_testing()
        elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self.render_settings()
    
    def render_overview(self):
        """Render overview dashboard"""
        st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
        
        # Load statistics
        stats = self.kb_manager.get_statistics()
        
        # Display key metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                value=stats['total_knowledge_bases'],
                delta=None
            )
        
        with col2:
            st.metric(
                label="–î–æ–∫—É–º–µ–Ω—Ç—ã",
                value=stats['total_documents'],
                delta=None
            )
        
        with col3:
            st.metric(
                label="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                value=stats['processed_documents'],
                delta=None
            )
        
        with col4:
            st.metric(
                label="–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                value=f"{stats['processing_rate']:.1f}%",
                delta=None
            )
        
        # Documents by category
        st.subheader("üìà –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        if stats['documents_by_category']:
            import pandas as pd
            df = pd.DataFrame(
                list(stats['documents_by_category'].items()),
                columns=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤']
            )
            st.bar_chart(df.set_index('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'))
        else:
            st.info("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # Recent knowledge bases
        st.subheader("üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        kbs = self.kb_manager.get_knowledge_bases()
        
        if kbs:
            for kb in kbs[:5]:  # Show last 5
                with st.expander(f"{kb['name']} ({kb['category']})"):
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {kb['description']}")
                    st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {kb['created_at']}")
                    st.write(f"**–ê–≤—Ç–æ—Ä:** {kb['created_by']}")
                    
                    # Show document count
                    docs = self.kb_manager.get_documents(kb['id'])
                    st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(docs)}")
        else:
            st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
    
    def render_kb_management(self):
        """Render knowledge base management"""
        st.header("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
        
        # Create new KB
        st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
        with st.form("create_kb_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ë–ó*", placeholder="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã")
                kb_category = st.selectbox(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è*",
                    ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
                     "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∏–ª–ª–∏–Ω–≥–∞", "–î—Ä—É–≥–æ–µ"]
                )
            
            with col2:
                kb_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                created_by = st.text_input("–ê–≤—Ç–æ—Ä*", value=st.session_state.get('username', 'admin'))
            
            submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            
            if submitted:
                if kb_name and kb_category and created_by:
                    try:
                        kb_id = self.kb_manager.create_knowledge_base(
                            kb_name, kb_description, kb_category, created_by
                        )
                        st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{kb_name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
                else:
                    st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # Manage existing KBs
        st.subheader("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        kbs = self.kb_manager.get_knowledge_bases()
        
        if kbs:
            for kb in kbs:
                with st.expander(f"üóÇÔ∏è {kb['name']} (ID: {kb['id']})"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {kb['category']}")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {kb['description']}")
                        st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {kb['created_at']}")
                        st.write(f"**–ê–≤—Ç–æ—Ä:** {kb['created_by']}")
                        
                        # Show documents
                        docs = self.kb_manager.get_documents(kb['id'])
                        st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(docs)}")
                        
                        if docs:
                            st.write("**–î–æ–∫—É–º–µ–Ω—Ç—ã:**")
                            for doc in docs:
                                status_icon = "‚úÖ" if doc['processed'] else "‚è≥"
                                st.write(f"{status_icon} {doc['title']} ({doc['processing_status']})")
                    
                    with col2:
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{kb['id']}"):
                            if self.kb_manager.delete_knowledge_base(kb['id']):
                                st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É–¥–∞–ª–µ–Ω–∞")
                                st.rerun()
                            else:
                                st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                        
                        if st.button(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", key=f"reload_{kb['id']}"):
                            if self.rag_system.reload_kb(kb['id']):
                                st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
    
    def render_document_upload(self):
        """Render document upload interface"""
        st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # Select knowledge base
        kbs = self.kb_manager.get_knowledge_bases()
        
        if not kbs:
            st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ó'")
            return
        
        kb_options = {f"{kb['name']} ({kb['category']})": kb['id'] for kb in kbs}
        selected_kb_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:", list(kb_options.keys()))
        selected_kb_id = kb_options[selected_kb_name]
        
        # Upload form
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª",
            type=['pdf'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã"
        )
        
        if uploaded_file:
            # Show file info
            st.write(f"**–§–∞–π–ª:** {uploaded_file.name}")
            st.write(f"**–†–∞–∑–º–µ—Ä:** {uploaded_file.size / 1024:.1f} KB")
            
            # Process file
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
                    result = self.pdf_processor.process_pdf(
                        uploaded_file, 
                        selected_kb_id, 
                        uploaded_file.name
                    )
                    
                    if result['success']:
                        # Add to database
                        doc_id = self.kb_manager.add_document(
                            selected_kb_id,
                            result['title'],
                            result['file_path'],
                            result['content_type'],
                            result['file_size'],
                            result['metadata']
                        )
                        
                        # Mark as processed
                        self.kb_manager.update_document_status(doc_id, True, 'completed')
                        
                        st.success(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! ID: {doc_id}")
                        
                        # Show extracted text preview
                        with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞"):
                            text_preview = result['text_content'][:1000]
                            st.text(text_preview)
                            if len(result['text_content']) > 1000:
                                st.write("... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)")
                        
                        # Show metadata
                        with st.expander("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"):
                            st.json(result['metadata'])
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
    
    def render_search_testing(self):
        """Render search and testing interface"""
        st.header("üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # Auto-load active KBs on first visit (persist across reruns)
        if 'admin_kbs_loaded' not in st.session_state:
            with st.spinner("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π..."):
                loaded_count = self.rag_system.load_all_active_kbs()
                st.session_state.admin_kbs_loaded = True
                st.session_state.admin_loaded_kb_count = loaded_count
                if loaded_count > 0:
                    st.success(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
                else:
                    st.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # Show loaded KBs
        loaded_kbs = self.rag_system.get_available_kbs()
        
        # Debug info
        st.sidebar.markdown("---")
        st.sidebar.markdown("**üîç –û—Ç–ª–∞–¥–∫–∞:**")
        st.sidebar.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ó (session): {st.session_state.get('admin_loaded_kb_count', 0)} | (live): {len(loaded_kbs)}")
        if loaded_kbs:
            for kb in loaded_kbs:
                st.sidebar.write(f"‚Ä¢ {kb['name']}")
        
        if loaded_kbs:
            st.subheader("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            
            for kb in loaded_kbs:
                st.write(f"‚Ä¢ **{kb['name']}** ({kb['category']}) - {kb['doc_count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {kb['chunk_count']} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
            
            st.markdown("---")
            
            # Search interface with clear instructions
            st.subheader("üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫")
            
            # AI Assistant for generating test questions
            st.markdown("**ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ó**")
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                test_category = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    [
                        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                        "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                        "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                        "–°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
                    ]
                )
            
            with col2:
                if st.button("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", type="secondary"):
                    # Ensure KBs are loaded before generating question
                    if not loaded_kbs:
                        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π..."):
                            loaded_count = self.rag_system.load_all_active_kbs()
                            if loaded_count > 0:
                                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
                                loaded_kbs = self.rag_system.get_available_kbs()
                                st.rerun()
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                                return
                    
                    # Generate test question based on category and KB content
                    test_question = self._generate_test_question(test_category, loaded_kbs)
                    st.session_state.generated_question = test_question
            
            # Show generated question
            if st.session_state.get('generated_question'):
                st.info(f"**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:** {st.session_state.generated_question}")
                if st.button("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"):
                    st.session_state.current_test_query = st.session_state.generated_question
            
            st.markdown("---")
            
            st.markdown("""
            **üí° –ß—Ç–æ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å:**
            - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
            - –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏
            - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            - –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
            """)
            
            query = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
                value=st.session_state.get('current_test_query', ''),
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω—Ç–µ–Ω–Ω–µ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?"
            )
            
            if query:
                if st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary"):
                    # Ensure KBs are loaded before searching
                    if not loaded_kbs:
                        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π..."):
                            loaded_count = self.rag_system.load_all_active_kbs()
                            if loaded_count > 0:
                                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
                                loaded_kbs = self.rag_system.get_available_kbs()
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                                return
                    
                    with st.spinner("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."):
                        # Search across all loaded KBs
                        results = self.rag_system.search_across_kbs(query, k=5)
                        
                        if results:
                            st.subheader("üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
                            
                            for i, doc in enumerate(results, 1):
                                with st.expander(f"üìÑ {doc.metadata.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {i})"):
                                    st.write("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**")
                                    st.write(doc.page_content[:500] + "..." if len(doc.page_content) > 500 else doc.page_content)
                                    
                                    st.write("**–ò—Å—Ç–æ—á–Ω–∏–∫:**", doc.metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                                    st.write("**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**", doc.metadata.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                            
                            # Generate AI response
                            st.subheader("ü§ñ –û—Ç–≤–µ—Ç –ò–ò:")
                            ai_response = self.rag_system.get_response_with_context(query)
                            st.write(ai_response)
                        else:
                            st.warning("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        else:
            st.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            
            if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"):
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑ –∑–Ω–∞–Ω–∏–π..."):
                    loaded_count = self.rag_system.load_all_active_kbs()
                    if loaded_count > 0:
                        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
                        st.rerun()
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    
    def _generate_test_question(self, category: str, loaded_kbs: list) -> str:
        """Generate test question based on category and KB content"""
        
        # Base questions for each category
        question_templates = {
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è": [
                "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω—Ç–µ–Ω–Ω–µ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è?",
                "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —á–∞—Å—Ç–æ—Ç–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É?",
                "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –Ω—É–∂–Ω—ã?",
                "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è?"
            ],
            "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": [
                "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GPS —Ç—Ä–µ–∫–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?",
                "–ö–∞–∫–∏–µ —à–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∞–Ω—Ç–µ–Ω–Ω—ã?",
                "–ö–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞?",
                "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?"
            ],
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏": [
                "–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
                "–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞?",
                "–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–≤—è–∑–∏?",
                "–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö?"
            ],
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏": [
                "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö?",
                "–ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏?",
                "–ö–∞–∫–∏–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞?",
                "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏–π?"
            ],
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã": [
                "–ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç?",
                "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?",
                "–ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏?",
                "–ö–∞–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?"
            ],
            "–°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã": [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å?",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç GPS –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?",
                "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –∞–Ω—Ç–µ–Ω–Ω –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ SBD –ø—Ä–æ—Ç–æ–∫–æ–ª?",
                "–ö–∞–∫ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏?"
            ]
        }
        
        # Get questions for the selected category
        questions = question_templates.get(category, question_templates["–°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"])
        
        # If we have KB content, try to make questions more specific
        if loaded_kbs:
            kb_names = [kb['name'] for kb in loaded_kbs]
            kb_categories = [kb['category'] for kb in loaded_kbs]
            
            # Add KB-specific context to questions
            if "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã" in kb_categories:
                questions.extend([
                    "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –∫ –∞–Ω—Ç–µ–Ω–Ω–µ?",
                    "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –æ –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞?",
                    "–ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö?"
                ])
            
            if "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú" in kb_names:
                questions.extend([
                    "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –°–¢–≠–ö–ö–û–ú –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é?",
                    "–ß—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –°–¢–≠–ö–ö–û–ú –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ?",
                    "–ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –°–¢–≠–ö–ö–û–ú –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è?"
                ])
        
        # Return a random question from the list
        import random
        return random.choice(questions)
    
    def render_settings(self):
        """Render settings panel"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        st.subheader("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RAG")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ú–æ–¥–µ–ª–∏ Ollama:**")
            st.write("‚Ä¢ all-minilm (embeddings)")
            st.write("‚Ä¢ qwen3:8b (chat)")
            
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å RAG —Å–∏—Å—Ç–µ–º—É"):
                self.rag_system.clear_all()
                st.success("RAG —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞")
        
        with col2:
            st.write("**–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –º–æ–¥–µ–ª—å —á–∞—Ç–∞:**")
            provider = st.selectbox(
                "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM",
                options=["ollama", "proxyapi", "openai"],
                index=0
            )
            if provider == "ollama":
                model = st.text_input("–ú–æ–¥–µ–ª—å Ollama", value=os.getenv("OLLAMA_CHAT_MODEL", "qwen3:8b"))
                if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", key="apply_ollama_model"):
                    self.rag_system.set_chat_backend(provider="ollama", model=model)
                    st.success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å Ollama: {model}")
            elif provider == "proxyapi":
                proxy_model = st.text_input("–ú–æ–¥–µ–ª—å proxyapi", value=os.getenv("PROXYAPI_CHAT_MODEL", "gpt-4o"))
                proxy_base = st.text_input("–ë–∞–∑–æ–≤—ã–π URL", value=os.getenv("PROXYAPI_BASE_URL", "https://api.proxyapi.ru/openai/v1"))
                proxy_key = st.text_input("API –∫–ª—é—á", type="password", value=os.getenv("PROXYAPI_API_KEY", os.getenv("OPEN_AI_API_KEY", "")))
                temp = st.slider("Temperature", 0.0, 1.0, float(os.getenv("PROXYAPI_TEMPERATURE", "0.2")), 0.05)
                if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", key="apply_proxy_model"):
                    self.rag_system.set_chat_backend(
                        provider="proxyapi", model=proxy_model,
                        base_url=proxy_base, api_key=proxy_key, temperature=temp
                    )
                    st.success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å proxyapi: {proxy_model}")
            else:
                openai_model = st.text_input("–ú–æ–¥–µ–ª—å OpenAI", value=os.getenv("OPENAI_CHAT_MODEL", "gpt-4o-mini"))
                openai_key = st.text_input("OPENAI_API_KEY", type="password", value=os.getenv("OPENAI_API_KEY", ""))
                temp = st.slider("Temperature", 0.0, 1.0, float(os.getenv("OPENAI_TEMPERATURE", "0.2")), 0.05, key="openai_temp")
                if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", key="apply_openai_model"):
                    self.rag_system.set_chat_backend(
                        provider="openai", model=openai_model,
                        api_key=openai_key, temperature=temp
                    )
                    st.success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å OpenAI: {openai_model}")

            st.markdown("---")
            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ë–ó:**")
            stats = self.rag_system.get_kb_statistics()
            st.write(f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ó: {stats['loaded_kbs']}")
            st.write(f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['total_documents']}")
            st.write(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {stats['total_chunks']}")
        
        # Token usage dashboard
        st.subheader("üìä –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
        try:
            conn = sqlite3.connect("satellite_billing.db")
            c = conn.cursor()
            # Ensure table exists (in case first run without RAG calls)
            c.execute("""
                CREATE TABLE IF NOT EXISTS llm_usage (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    provider TEXT,
                    model TEXT,
                    prompt_tokens INTEGER,
                    completion_tokens INTEGER,
                    total_tokens INTEGER,
                    question TEXT,
                    response_length INTEGER
                )
            """)
            # Totals by provider/model
            c.execute(
                """
                SELECT COALESCE(provider, 'unknown') AS prov,
                       COALESCE(model, 'unknown') AS mdl,
                       COALESCE(SUM(prompt_tokens),0),
                       COALESCE(SUM(completion_tokens),0),
                       COALESCE(SUM(total_tokens),0),
                       COUNT(*)
                FROM llm_usage
                GROUP BY prov, mdl
                ORDER BY SUM(total_tokens) DESC
                """
            )
            rows = c.fetchall()
            if rows:
                import pandas as pd
                df = pd.DataFrame(rows, columns=[
                    '–ü—Ä–æ–≤–∞–π–¥–µ—Ä','–ú–æ–¥–µ–ª—å','–ü—Ä–æ–º–ø—Ç —Ç–æ–∫–µ–Ω—ã','–û—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω—ã','–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤','–ó–∞–ø—Ä–æ—Å–æ–≤'
                ])
                st.dataframe(df, use_container_width=True)
            else:
                st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤")

            # Recent usage
            st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (20):**")
            c.execute(
                """
                SELECT timestamp, provider, model,
                       COALESCE(prompt_tokens,0), COALESCE(completion_tokens,0), COALESCE(total_tokens,0)
                FROM llm_usage
                ORDER BY id DESC LIMIT 20
                """
            )
            recent = c.fetchall()
            if recent:
                import pandas as pd
                df2 = pd.DataFrame(recent, columns=[
                    '–í—Ä–µ–º—è','–ü—Ä–æ–≤–∞–π–¥–µ—Ä','–ú–æ–¥–µ–ª—å','–ü—Ä–æ–º–ø—Ç','–û—Ç–≤–µ—Ç','–í—Å–µ–≥–æ'
                ])
                st.table(df2)
            conn.close()
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤: {e}")

        st.subheader("üìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
        
        # Show upload directory
        upload_dir = self.pdf_processor.upload_dir
        if upload_dir.exists():
            files = list(upload_dir.glob("*.pdf"))
            st.write(f"**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:** {len(files)}")
            
            if files:
                with st.expander("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"):
                    for file in files[:10]:  # Show first 10
                        st.write(f"‚Ä¢ {file.name} ({file.stat().st_size / 1024:.1f} KB)")
                    if len(files) > 10:
                        st.write(f"... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤")
        else:
            st.write("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
