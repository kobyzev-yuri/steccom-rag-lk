#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
"""

import sys
import os
from pathlib import Path
from PIL import Image
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def optimize_image(image_path: Path, max_size: int = 1024) -> Path:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        with Image.open(image_path) as img:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if max(img.size) > max_size:
                img.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            optimized_path = image_path.parent / f"optimized_{image_path.name}"
            img.save(optimized_path, "PNG", optimize=True)
            return optimized_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return image_path

def test_llava_analysis(image_path: Path):
    """–¢–µ—Å—Ç LLaVA –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"ü¶ô –¢–µ—Å—Ç–∏—Ä—É–µ–º LLaVA –Ω–∞ {image_path.name}")
    
    try:
        from modules.core.llava_analyzer import LLaVAAnalyzer
        analyzer = LLaVAAnalyzer()
        analyzer.set_model("llava-phi3:latest")
        
        if not analyzer.is_available():
            print("‚ùå LLaVA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        start_time = time.time()
        result = analyzer.analyze_image(image_path, "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
        analysis_time = time.time() - start_time
        
        if result.get('success'):
            print(f"‚úÖ LLaVA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞ {analysis_time:.2f}—Å")
            print(f"üìù –ê–Ω–∞–ª–∏–∑: {result.get('analysis', '')[:200]}...")
            return {
                'success': True,
                'time': analysis_time,
                'analysis': result.get('analysis', ''),
                'model': result.get('model_used', '')
            }
        else:
            print(f"‚ùå LLaVA –æ—à–∏–±–∫–∞: {result.get('error', '')}")
            return {'success': False, 'error': result.get('error', '')}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LLaVA: {e}")
        return {'success': False, 'error': str(e)}

def test_gemini_analysis(image_path: Path):
    """–¢–µ—Å—Ç Gemini –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini –Ω–∞ {image_path.name}")
    
    try:
        from modules.documents.vision_processor import VisionProcessor
        processor = VisionProcessor()
        
        start_time = time.time()
        result = processor.analyze_image_with_gemini(image_path)
        analysis_time = time.time() - start_time
        
        if result.get('success'):
            print(f"‚úÖ Gemini —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞ {analysis_time:.2f}—Å")
            print(f"üìù –ê–Ω–∞–ª–∏–∑: {result.get('analysis', '')[:200]}...")
            return {
                'success': True,
                'time': analysis_time,
                'analysis': result.get('analysis', ''),
                'model': result.get('model', '')
            }
        else:
            print(f"‚ùå Gemini –æ—à–∏–±–∫–∞: {result.get('error', '')}")
            return {'success': False, 'error': result.get('error', '')}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        return {'success': False, 'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 50)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = Path("extracted_images/Access-SkyEdge-II--170414-FINAL/page_1_img_2.png")
    
    if not image_path.exists():
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        return
    
    print(f"üì∑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {image_path.name} ({image_path.stat().st_size / 1024 / 1024:.1f} MB)")
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    optimized_path = optimize_image(image_path, max_size=1024)
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {optimized_path.name} ({optimized_path.stat().st_size / 1024:.1f} KB)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLaVA
    print("\n" + "="*30)
    llava_result = test_llava_analysis(optimized_path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini
    print("\n" + "="*30)
    gemini_result = test_gemini_analysis(optimized_path)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*50)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*50)
    
    if llava_result and gemini_result:
        if llava_result.get('success') and gemini_result.get('success'):
            print("‚úÖ –û–±–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
            print(f"ü¶ô LLaVA: {llava_result['time']:.2f}—Å")
            print(f"ü§ñ Gemini: {gemini_result['time']:.2f}—Å")
            
            if llava_result['time'] < gemini_result['time']:
                print("üèÜ LLaVA –±—ã—Å—Ç—Ä–µ–µ")
            else:
                print("üèÜ Gemini –±—ã—Å—Ç—Ä–µ–µ")
                
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
            llava_len = len(llava_result.get('analysis', ''))
            gemini_len = len(gemini_result.get('analysis', ''))
            print(f"üìù LLaVA –∞–Ω–∞–ª–∏–∑: {llava_len} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìù Gemini –∞–Ω–∞–ª–∏–∑: {gemini_len} —Å–∏–º–≤–æ–ª–æ–≤")
            
        elif llava_result.get('success'):
            print("‚úÖ –¢–æ–ª—å–∫–æ LLaVA —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif gemini_result.get('success'):
            print("‚úÖ –¢–æ–ª—å–∫–æ Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ù–∏ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main()







