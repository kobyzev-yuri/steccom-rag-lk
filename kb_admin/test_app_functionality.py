#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ KB Admin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import requests
import time
import json
from pathlib import Path

def test_streamlit_app():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        response = requests.get("http://localhost:8501", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            print(f"‚ùå Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Streamlit: {e}")
        return False

def test_mediawiki_api():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MediaWiki API"""
    try:
        response = requests.get("http://localhost:8080/api.php?action=query&meta=tokens&type=login&format=json", timeout=10)
        if response.status_code == 200:
            print("‚úÖ MediaWiki API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå MediaWiki API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MediaWiki: {e}")
        return False

def test_ollama_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
    try:
        import subprocess
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
            lines = result.stdout.strip().split('\n')
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {len(lines) - 1}")
            return True
        else:
            print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import sqlite3
        db_path = Path(__file__).parent / "kbs.db"
        if db_path.exists():
            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM knowledge_bases")
            count = cursor.fetchone()[0]
            conn.close()
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {count} –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
            return True
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_kb_admin_modules():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π KB Admin"""
    try:
        import sys
        sys.path.append(str(Path(__file__).parent))
        
        from modules.core.knowledge_manager import KnowledgeBaseManager
        from modules.core.text_analyzer import TextAnalyzer
        from modules.rag.multi_kb_rag import MultiKBRAG
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ KB Admin –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KB Admin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 50)
    
    tests = [
        ("Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_streamlit_app),
        ("MediaWiki API", test_mediawiki_api),
        ("Ollama", test_ollama_connection),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_connection),
        ("–ú–æ–¥—É–ª–∏ KB Admin", test_kb_admin_modules),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
