#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ KB Admin:
1. RAG Admin - MultiKBRAG –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
2. SQL Assistant - –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
3. Smart Librarian - —É–º–Ω—ã–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –¥–ª—è RAG –æ—Ç–≤–µ—Ç–æ–≤
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "modules"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class KeyAgentsTester:
    """–¢–µ—Å—Ç–µ—Ä –∫–ª—é—á–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ KB Admin"""
    
    def __init__(self):
        self.results = {}
        self.models_to_test = [
            "qwen2.5-coder:7b",
            "qwen3:8b", 
            "llama3:8b",
            "llama3.1:8b"
        ]
        
    def test_rag_admin(self, model_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç RAG Admin –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG Admin —Å –º–æ–¥–µ–ª—å—é {model_name}")
        
        try:
            from modules.rag.multi_kb_rag import MultiKBRAG
            
            # –°–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É
            rag = MultiKBRAG()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è RAG
            test_questions = [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ SBD –ø–∞–∫–µ—Ç –≤ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç VSAT —Å–∏—Å—Ç–µ–º–∞?",
                "–ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
                "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–ø—É—Ç–Ω–∏–∫"
            ]
            
            results = []
            total_time = 0
            successful_answers = 0
            
            for i, question in enumerate(test_questions):
                logger.info(f"  ‚ùì –í–æ–ø—Ä–æ—Å {i+1}: {question}")
                
                start_time = time.time()
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                    rag.load_all_active_kbs()
                    
                    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                    response = rag.ask_question(question)
                    response_time = time.time() - start_time
                    total_time += response_time
                    
                    answer = response.get("answer", "")
                    sources = response.get("sources", [])
                    
                    if answer and len(answer.strip()) > 20:
                        successful_answers += 1
                        logger.info(f"    ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {response_time:.2f}—Å")
                        logger.info(f"    üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
                    else:
                        logger.warning(f"    ‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
                    results.append({
                        'question': question,
                        'answer': answer,
                        'sources_count': len(sources),
                        'time': response_time,
                        'success': bool(answer and len(answer.strip()) > 20)
                    })
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ RAG: {e}")
                    results.append({
                        'question': question,
                        'answer': '',
                        'sources_count': 0,
                        'time': 0,
                        'success': False,
                        'error': str(e)
                    })
            
            success_rate = successful_answers / len(test_questions)
            avg_time = total_time / len(test_questions)
            
            return {
                'model': model_name,
                'success_rate': success_rate,
                'avg_time': avg_time,
                'total_time': total_time,
                'successful_answers': successful_answers,
                'total_questions': len(test_questions),
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ RAG Admin: {e}")
            return {
                'model': model_name,
                'success_rate': 0,
                'avg_time': 0,
                'error': str(e)
            }
    
    def test_sql_assistant(self, model_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç SQL Assistant –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL Assistant —Å –º–æ–¥–µ–ª—å—é {model_name}")
        
        try:
            from modules.core.rag import generate_sql
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è SQL
            test_questions = [
                "–ü–æ–∫–∞–∂–∏ SBD —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –º–∞–π –º–µ—Å—è—Ü –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É",
                "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ VSAT_DATA –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ?",
                "–ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?",
                "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"
            ]
            
            results = []
            total_time = 0
            successful_queries = 0
            
            for i, question in enumerate(test_questions):
                logger.info(f"  üìù –í–æ–ø—Ä–æ—Å {i+1}: {question}")
                
                start_time = time.time()
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
                    sql_query = generate_sql(question, "test_company")
                    query_time = time.time() - start_time
                    total_time += query_time
                    
                    if sql_query and len(sql_query.strip()) > 10:
                        successful_queries += 1
                        logger.info(f"    ‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {query_time:.2f}—Å")
                        logger.info(f"    üìÑ –î–ª–∏–Ω–∞ SQL: {len(sql_query)} —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        logger.warning(f"    ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π SQL")
                    
                    results.append({
                        'question': question,
                        'sql_query': sql_query,
                        'sql_length': len(sql_query),
                        'time': query_time,
                        'success': bool(sql_query and len(sql_query.strip()) > 10)
                    })
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ SQL: {e}")
                    results.append({
                        'question': question,
                        'sql_query': '',
                        'sql_length': 0,
                        'time': 0,
                        'success': False,
                        'error': str(e)
                    })
            
            success_rate = successful_queries / len(test_questions)
            avg_time = total_time / len(test_questions)
            
            return {
                'model': model_name,
                'success_rate': success_rate,
                'avg_time': avg_time,
                'total_time': total_time,
                'successful_queries': successful_queries,
                'total_questions': len(test_questions),
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQL Assistant: {e}")
            return {
                'model': model_name,
                'success_rate': 0,
                'avg_time': 0,
                'error': str(e)
            }
    
    def test_smart_librarian(self, model_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç Smart Librarian –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üìö –¢–µ—Å—Ç–∏—Ä—É–µ–º Smart Librarian —Å –º–æ–¥–µ–ª—å—é {model_name}")
        
        try:
            from modules.core.smart_document_agent import SmartLibrarian
            from modules.core.knowledge_manager import KnowledgeBaseManager
            from modules.documents.pdf_processor import PDFProcessor
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Smart Librarian
            kb_manager = KnowledgeBaseManager()
            pdf_processor = PDFProcessor()
            
            # –°–æ–∑–¥–∞–µ–º Smart Librarian
            librarian = SmartLibrarian(kb_manager, pdf_processor)
            librarian.model_name = model_name
            librarian._init_chat_model()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è Smart Librarian
            test_tasks = [
                {
                    'type': 'document_analysis',
                    'content': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.',
                    'question': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø –∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã'
                },
                {
                    'type': 'content_categorization', 
                    'content': 'SBD (Short Burst Data) - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—É—é —Å–µ—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º —ç–Ω–µ—Ä–≥–∏–∏.',
                    'question': '–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç?'
                },
                {
                    'type': 'knowledge_extraction',
                    'content': 'VSAT —Å–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ –≥–µ–æ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–æ 100 –ú–±–∏—Ç/—Å.',
                    'question': '–ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
                }
            ]
            
            results = []
            total_time = 0
            successful_tasks = 0
            
            for i, task in enumerate(test_tasks):
                logger.info(f"  üìã –ó–∞–¥–∞—á–∞ {i+1}: {task['type']}")
                
                start_time = time.time()
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Smart Librarian
                    prompt = f"""–¢–∏–ø –∑–∞–¥–∞—á–∏: {task['type']}
–ö–æ–Ω—Ç–µ–Ω—Ç: {task['content']}
–í–æ–ø—Ä–æ—Å: {task['question']}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                    
                    response = librarian.chat_model.invoke(prompt)
                    task_time = time.time() - start_time
                    total_time += task_time
                    
                    answer = str(response.content) if hasattr(response, 'content') else str(response)
                    
                    if answer and len(answer.strip()) > 20:
                        successful_tasks += 1
                        logger.info(f"    ‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {task_time:.2f}—Å")
                    else:
                        logger.warning(f"    ‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
                    results.append({
                        'task_type': task['type'],
                        'content': task['content'],
                        'question': task['question'],
                        'answer': answer,
                        'time': task_time,
                        'success': bool(answer and len(answer.strip()) > 20)
                    })
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏: {e}")
                    results.append({
                        'task_type': task['type'],
                        'content': task['content'],
                        'question': task['question'],
                        'answer': '',
                        'time': 0,
                        'success': False,
                        'error': str(e)
                    })
            
            success_rate = successful_tasks / len(test_tasks)
            avg_time = total_time / len(test_tasks)
            
            return {
                'model': model_name,
                'success_rate': success_rate,
                'avg_time': avg_time,
                'total_time': total_time,
                'successful_tasks': successful_tasks,
                'total_tasks': len(test_tasks),
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Smart Librarian: {e}")
            return {
                'model': model_name,
                'success_rate': 0,
                'avg_time': 0,
                'error': str(e)
            }
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ KB Admin")
        
        all_results = {
            'test_date': datetime.now().isoformat(),
            'models_tested': self.models_to_test,
            'rag_admin_results': {},
            'sql_assistant_results': {},
            'smart_librarian_results': {},
            'summary': {}
        }
        
        for model in self.models_to_test:
            logger.info(f"\n{'='*60}")
            logger.info(f"üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ú–û–î–ï–õ–¨: {model}")
            logger.info(f"{'='*60}")
            
            # –¢–µ—Å—Ç RAG Admin
            logger.info(f"\nüß† RAG ADMIN - {model}")
            rag_result = self.test_rag_admin(model)
            all_results['rag_admin_results'][model] = rag_result
            
            # –¢–µ—Å—Ç SQL Assistant
            logger.info(f"\nüìä SQL ASSISTANT - {model}")
            sql_result = self.test_sql_assistant(model)
            all_results['sql_assistant_results'][model] = sql_result
            
            # –¢–µ—Å—Ç Smart Librarian
            logger.info(f"\nüìö SMART LIBRARIAN - {model}")
            librarian_result = self.test_smart_librarian(model)
            all_results['smart_librarian_results'][model] = librarian_result
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_results['summary'] = self._analyze_results(all_results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._save_results(all_results)
        
        return all_results
    
    def _analyze_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        summary = {
            'best_rag_model': None,
            'best_sql_model': None,
            'best_librarian_model': None,
            'overall_best_model': None,
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ RAG —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        rag_scores = {}
        for model, result in results['rag_admin_results'].items():
            if result.get('success_rate', 0) > 0:
                rag_scores[model] = result['success_rate'] / (result.get('avg_time', 1) + 1)
        
        if rag_scores:
            summary['best_rag_model'] = max(rag_scores, key=rag_scores.get)
        
        # –ê–Ω–∞–ª–∏–∑ SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sql_scores = {}
        for model, result in results['sql_assistant_results'].items():
            if result.get('success_rate', 0) > 0:
                sql_scores[model] = result['success_rate'] / (result.get('avg_time', 1) + 1)
        
        if sql_scores:
            summary['best_sql_model'] = max(sql_scores, key=sql_scores.get)
        
        # –ê–Ω–∞–ª–∏–∑ Smart Librarian —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        librarian_scores = {}
        for model, result in results['smart_librarian_results'].items():
            if result.get('success_rate', 0) > 0:
                librarian_scores[model] = result['success_rate'] / (result.get('avg_time', 1) + 1)
        
        if librarian_scores:
            summary['best_librarian_model'] = max(librarian_scores, key=librarian_scores.get)
        
        # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
        overall_scores = {}
        for model in results['models_tested']:
            rag_score = results['rag_admin_results'].get(model, {}).get('success_rate', 0)
            sql_score = results['sql_assistant_results'].get(model, {}).get('success_rate', 0)
            librarian_score = results['smart_librarian_results'].get(model, {}).get('success_rate', 0)
            
            overall_scores[model] = (rag_score + sql_score + librarian_score) / 3
        
        if overall_scores:
            summary['overall_best_model'] = max(overall_scores, key=overall_scores.get)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if summary['overall_best_model']:
            summary['recommendations'].append(f"üèÜ –õ—É—á—à–∞—è –æ–±—â–∞—è –º–æ–¥–µ–ª—å: {summary['overall_best_model']}")
        
        if summary['best_rag_model']:
            summary['recommendations'].append(f"üß† –õ—É—á—à–∞—è –¥–ª—è RAG: {summary['best_rag_model']}")
        
        if summary['best_sql_model']:
            summary['recommendations'].append(f"üìä –õ—É—á—à–∞—è –¥–ª—è SQL: {summary['best_sql_model']}")
        
        if summary['best_librarian_model']:
            summary['recommendations'].append(f"üìö –õ—É—á—à–∞—è –¥–ª—è Smart Librarian: {summary['best_librarian_model']}")
        
        return summary
    
    def _save_results(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"key_agents_test_results_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def print_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*70)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ö–õ–Æ–ß–ï–í–´–• –ê–ì–ï–ù–¢–û–í KB ADMIN")
        print("="*70)
        
        summary = results['summary']
        
        print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['test_date']}")
        print(f"ü§ñ –ú–æ–¥–µ–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results['models_tested'])}")
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò –ü–û –ê–ì–ï–ù–¢–ê–ú:")
        if summary.get('best_rag_model'):
            print(f"  üß† RAG Admin: {summary['best_rag_model']}")
        if summary.get('best_sql_model'):
            print(f"  üìä SQL Assistant: {summary['best_sql_model']}")
        if summary.get('best_librarian_model'):
            print(f"  üìö Smart Librarian: {summary['best_librarian_model']}")
        
        if summary.get('overall_best_model'):
            print(f"\nü•á –û–ë–©–ò–ô –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {summary['overall_best_model']}")
        
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in summary.get('recommendations', []):
            print(f"  ‚Ä¢ {rec}")
        
        print("="*70)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –ê–ì–ï–ù–¢–û–í KB ADMIN")
    print("=" * 50)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º:")
    print("  üß† RAG Admin - —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
    print("  üìä SQL Assistant - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("  üìö Smart Librarian - –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ RAG –æ—Ç–≤–µ—Ç—ã")
    print("=" * 50)
    
    try:
        tester = KeyAgentsTester()
        results = tester.run_comprehensive_test()
        tester.print_summary(results)
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)







