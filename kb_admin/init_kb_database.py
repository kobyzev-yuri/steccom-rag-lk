#!/usr/bin/env python3
"""
Initialize KB Database for KB Admin
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö KB –¥–ª—è KB Admin
"""

import sqlite3
import json
from pathlib import Path
from datetime import datetime

def init_kb_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö KB"""
    
    # –ü—É—Ç—å –∫ –æ–±—â–µ–π –ë–î
    db_path = Path(__file__).parent / "kbs.db"
    
    if not db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ KB
        c.execute("SELECT COUNT(*) FROM knowledge_bases")
        kb_count = c.fetchone()[0]
        
        if kb_count > 0:
            print(f"‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {kb_count} –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
            return True
        
        # –°–æ–∑–¥–∞–µ–º KB –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        kb_files = [
            {
                "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã SBD",
                "description": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¥–ª—è —É—Å–ª—É–≥ SBD (Short Burst Data)",
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                "file": "legacy_reglament_sbd.json"
            },
            {
                "name": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞",
                "description": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¥–ª—è —É—Å–ª—É–≥ GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞",
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", 
                "file": "legacy_reglament_gpstrack.json"
            },
            {
                "name": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                "description": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¥–ª—è —É—Å–ª—É–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                "file": "legacy_reglament_monitoring.json"
            },
            {
                "name": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "description": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
                "category": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                "file": "ui_guide.json"
            },
            {
                "name": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
                "category": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                "file": "ui_capabilities.json"
            },
            {
                "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                "description": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                "file": "ui_technical.json"
            },
            {
                "name": "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫",
                "description": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫",
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                "file": "ui_troubleshooting.json"
            },
            {
                "name": "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "description": "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "category": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                "file": "ui_examples.json"
            },
            {
                "name": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã SBD (EN)",
                "description": "SBD regulations in English",
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                "file": "legacy_reglament_sbd_en.json"
            }
        ]
        
        now = datetime.now().isoformat()
        
        for kb_info in kb_files:
            # –°–æ–∑–¥–∞–µ–º KB
            c.execute('''
                INSERT INTO knowledge_bases (name, description, category, created_at, updated_at, created_by, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                kb_info["name"],
                kb_info["description"], 
                kb_info["category"],
                now,
                now,
                "admin",
                1
            ))
            
            kb_id = c.lastrowid
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            file_path = Path(__file__).parent.parent / "docs" / "kb" / kb_info["file"]
            
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    "source": "kb_file",
                    "file": kb_info["file"],
                    "content": content[:1000] + "..." if len(content) > 1000 else content
                }
                
                c.execute('''
                    INSERT INTO knowledge_documents (kb_id, title, file_path, content_type, file_size, upload_date, processed, processing_status, metadata)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    kb_id,
                    kb_info["name"],
                    str(file_path),
                    "application/json",
                    file_path.stat().st_size,
                    now,
                    1,
                    "completed",
                    json.dumps(metadata, ensure_ascii=False)
                ))
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ KB: {kb_info['name']} (ID: {kb_id})")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        conn.commit()
        print(f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(kb_files)} –±–∞–∑ –∑–Ω–∞–Ω–∏–π!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ KB: {e}")
        conn.rollback()
        return False
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö KB –¥–ª—è KB Admin...")
    success = init_kb_database()
    if success:
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!")
