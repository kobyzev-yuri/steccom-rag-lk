#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF —Ñ–∞–π–ª–µ
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLaVA –∏ Gemini –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "modules"))
sys.path.insert(0, str(current_dir.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('pdf_images_analysis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PDFImagesAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLaVA –∏ Gemini"""
    
    def __init__(self):
        self.vision_processor = None
        self.llava_analyzer = None
        self.image_extractor = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º VisionProcessor (Gemini)
            from modules.documents.vision_processor import VisionProcessor
            self.vision_processor = VisionProcessor()
            logger.info("‚úÖ VisionProcessor (Gemini) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LLaVAAnalyzer (Ollama)
            import sys
            sys.path.append(str(current_dir / "modules" / "core"))
            from llava_analyzer import LLaVAAnalyzer
            self.llava_analyzer = LLaVAAnalyzer()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            self.llava_analyzer.set_model("llava-phi3:latest")
            logger.info("‚úÖ LLaVAAnalyzer (Ollama) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ImageExtractor
            from llava_analyzer import ImageExtractor
            self.image_extractor = ImageExtractor()
            logger.info("‚úÖ ImageExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def extract_images_from_pdf(self, pdf_path: Path) -> List[Path]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF"""
        logger.info(f"üìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF: {pdf_path.name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            output_dir = current_dir / "extracted_images" / pdf_path.stem
            output_dir.mkdir(parents=True, exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ PyMuPDF
            import fitz
            doc = fitz.open(pdf_path)
            extracted_images = []
            
            for page_num in range(len(doc)):
                page = doc.load_page(page_num)
                image_list = page.get_images()
                
                for img_index, img in enumerate(image_list):
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    xref = img[0]
                    pix = fitz.Pixmap(doc, xref)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CMYK –≤ RGB –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
                    if pix.colorspace and pix.colorspace.name == 'DeviceCMYK':
                        pix = fitz.Pixmap(fitz.csRGB, pix)
                    elif pix.alpha:
                        pix = fitz.Pixmap(fitz.csRGB, pix)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_name = f"page_{page_num + 1}_img_{img_index + 1}.png"
                    image_path = output_dir / image_name
                    
                    pix.save(str(image_path))
                    extracted_images.append(image_path)
                    pix = None
            
            doc.close()
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            for img_path in extracted_images:
                logger.info(f"  üì∑ {img_path.name}")
            
            return extracted_images
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    def analyze_image_with_both(self, image_path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLaVA –∏ Gemini"""
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path.name}")
        
        results = {
            'image_path': str(image_path),
            'image_name': image_path.name,
            'image_size': image_path.stat().st_size,
            'llava_result': None,
            'gemini_result': None,
            'comparison': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é LLaVA
        if self.llava_analyzer and self.llava_analyzer.is_available():
            try:
                logger.info("  ü¶ô –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é LLaVA...")
                start_time = time.time()
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏. 

–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ:
1. –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Å—Ö–µ–º–µ/–¥–∏–∞–≥—Ä–∞–º–º–µ
2. –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–Ω—ã
3. –ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã
4. –°—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
5. –õ—é–±—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º."""
                
                llava_result = self.llava_analyzer.analyze_image(image_path, prompt)
                llava_time = time.time() - start_time
                
                results['llava_result'] = {
                    'success': llava_result.get('success', False),
                    'analysis': llava_result.get('analysis', ''),
                    'description': llava_result.get('description', ''),
                    'full_response': llava_result.get('full_response', ''),
                    'error': llava_result.get('error', ''),
                    'response_time': llava_time,
                    'model': llava_result.get('model_used', ''),
                    'provider': llava_result.get('provider', '')
                }
                
                logger.info(f"    LLaVA: {'‚úÖ' if results['llava_result']['success'] else '‚ùå'} ({llava_time:.2f}—Å)")
                
            except Exception as e:
                results['llava_result'] = {
                    'success': False,
                    'error': str(e),
                    'response_time': 0
                }
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ LLaVA: {e}")
        else:
            logger.warning("  ‚ö†Ô∏è LLaVA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Gemini
        if self.vision_processor:
            try:
                logger.info("  ü§ñ –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Gemini...")
                start_time = time.time()
                
                gemini_result = self.vision_processor.analyze_image_with_gemini(image_path)
                gemini_time = time.time() - start_time
                
                results['gemini_result'] = {
                    'success': gemini_result.get('success', False),
                    'analysis': gemini_result.get('analysis', ''),
                    'error': gemini_result.get('error', ''),
                    'response_time': gemini_time,
                    'model': gemini_result.get('model', ''),
                    'provider': gemini_result.get('provider', '')
                }
                
                logger.info(f"    Gemini: {'‚úÖ' if results['gemini_result']['success'] else '‚ùå'} ({gemini_time:.2f}—Å)")
                
            except Exception as e:
                results['gemini_result'] = {
                    'success': False,
                    'error': str(e),
                    'response_time': 0
                }
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        else:
            logger.warning("  ‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results['llava_result'] and results['gemini_result']:
            results['comparison'] = self._compare_analysis_results(
                results['llava_result'], 
                results['gemini_result']
            )
        
        return results
    
    def _compare_analysis_results(self, llava_result: Dict, gemini_result: Dict) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ LLaVA –∏ Gemini"""
        comparison = {
            'both_successful': llava_result['success'] and gemini_result['success'],
            'llava_faster': llava_result['response_time'] < gemini_result['response_time'],
            'speed_difference': abs(llava_result['response_time'] - gemini_result['response_time']),
            'quality_metrics': {}
        }
        
        if comparison['both_successful']:
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
            llava_text = llava_result['analysis']
            gemini_text = gemini_result['analysis']
            
            comparison['quality_metrics'] = {
                'llava_length': len(llava_text),
                'gemini_length': len(gemini_text),
                'length_ratio': len(llava_text) / len(gemini_text) if len(gemini_text) > 0 else 0,
                'llava_has_technical_terms': any(term in llava_text.lower() for term in 
                    ['—Å—Ö–µ–º–∞', '–¥–∏–∞–≥—Ä–∞–º–º–∞', '–ø–∞—Ä–∞–º–µ—Ç—Ä', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '—Å–∏—Å—Ç–µ–º–∞']),
                'gemini_has_technical_terms': any(term in gemini_text.lower() for term in 
                    ['—Å—Ö–µ–º–∞', '–¥–∏–∞–≥—Ä–∞–º–º–∞', '–ø–∞—Ä–∞–º–µ—Ç—Ä', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '—Å–∏—Å—Ç–µ–º–∞'])
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if comparison['quality_metrics']['llava_length'] > comparison['quality_metrics']['gemini_length'] * 1.2:
                comparison['better_analysis'] = 'llava'
            elif comparison['quality_metrics']['gemini_length'] > comparison['quality_metrics']['llava_length'] * 1.2:
                comparison['better_analysis'] = 'gemini'
            else:
                comparison['better_analysis'] = 'similar'
        
        return comparison
    
    def analyze_pdf_images(self, pdf_path: Path) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ PDF: {pdf_path.name}")
        
        if not pdf_path.exists():
            return {
                'success': False,
                'error': f'PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}',
                'results': []
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        extracted_images = self.extract_images_from_pdf(pdf_path)
        
        if not extracted_images:
            return {
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF',
                'results': []
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        analysis_results = []
        total_llava_time = 0
        total_gemini_time = 0
        successful_llava = 0
        successful_gemini = 0
        
        for i, image_path in enumerate(extracted_images):
            logger.info(f"\nüì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{len(extracted_images)}: {image_path.name}")
            
            result = self.analyze_image_with_both(image_path)
            analysis_results.append(result)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result['llava_result'] and result['llava_result']['success']:
                total_llava_time += result['llava_result']['response_time']
                successful_llava += 1
            
            if result['gemini_result'] and result['gemini_result']['success']:
                total_gemini_time += result['gemini_result']['response_time']
                successful_gemini += 1
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        summary = self._analyze_results(analysis_results, successful_llava, successful_gemini, 
                                      total_llava_time, total_gemini_time)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_results(summary, analysis_results, pdf_path)
        
        return {
            'success': True,
            'pdf_path': str(pdf_path),
            'total_images': len(extracted_images),
            'summary': summary,
            'detailed_results': analysis_results
        }
    
    def _analyze_results(self, results: List[Dict], successful_llava: int, successful_gemini: int,
                        total_llava_time: float, total_gemini_time: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_images = len(results)
        
        summary = {
            'test_date': datetime.now().isoformat(),
            'total_images': total_images,
            'llava_metrics': {
                'successful_analyses': successful_llava,
                'success_rate': successful_llava / total_images if total_images > 0 else 0,
                'avg_response_time': total_llava_time / successful_llava if successful_llava > 0 else 0,
                'total_time': total_llava_time
            },
            'gemini_metrics': {
                'successful_analyses': successful_gemini,
                'success_rate': successful_gemini / total_images if total_images > 0 else 0,
                'avg_response_time': total_gemini_time / successful_gemini if successful_gemini > 0 else 0,
                'total_time': total_gemini_time
            },
            'comparison': {
                'llava_better_success': successful_llava > successful_gemini,
                'gemini_better_success': successful_gemini > successful_llava,
                'llava_faster': total_llava_time < total_gemini_time,
                'gemini_faster': total_gemini_time < total_llava_time
            },
            'recommendations': []
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if successful_llava > successful_gemini:
            summary['recommendations'].append("LLaVA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
        elif successful_gemini > successful_llava:
            summary['recommendations'].append("Gemini –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
        
        if total_llava_time < total_gemini_time * 0.8:
            summary['recommendations'].append("LLaVA –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ")
        elif total_gemini_time < total_llava_time * 0.8:
            summary['recommendations'].append("Gemini –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ")
        
        if successful_llava > 0 and successful_gemini > 0:
            summary['recommendations'].append("–û–±–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é")
        elif successful_llava > 0:
            summary['recommendations'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLaVA")
        elif successful_gemini > 0:
            summary['recommendations'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini")
        else:
            summary['recommendations'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º")
        
        return summary
    
    def _save_results(self, summary: Dict, results: List[Dict], pdf_path: Path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"pdf_images_analysis_{pdf_path.stem}_{timestamp}.json"
        
        full_results = {
            'summary': summary,
            'detailed_results': results,
            'pdf_info': {
                'name': pdf_path.name,
                'size': pdf_path.stat().st_size,
                'path': str(pdf_path)
            }
        }
        
        try:
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(full_results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def print_summary(self, analysis: Dict):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û–ë –ê–ù–ê–õ–ò–ó–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í PDF")
        print("="*60)
        
        print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['summary']['test_date']}")
        print(f"üìÑ PDF —Ñ–∞–π–ª: {analysis['pdf_path']}")
        print(f"üñºÔ∏è –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {analysis['total_images']}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ LLaVA
        llava_metrics = analysis['summary']['llava_metrics']
        print(f"\nü¶ô LLAVA –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {llava_metrics['successful_analyses']}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {llava_metrics['success_rate']:.1%}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {llava_metrics['avg_response_time']:.2f}—Å")
        print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {llava_metrics['total_time']:.2f}—Å")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ Gemini
        gemini_metrics = analysis['summary']['gemini_metrics']
        print(f"\nü§ñ GEMINI –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {gemini_metrics['successful_analyses']}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {gemini_metrics['success_rate']:.1%}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {gemini_metrics['avg_response_time']:.2f}—Å")
        print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {gemini_metrics['total_time']:.2f}—Å")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison = analysis['summary']['comparison']
        print(f"\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï:")
        if comparison['llava_better_success']:
            print("  ü•á LLaVA –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω")
        elif comparison['gemini_better_success']:
            print("  ü•á Gemini –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω")
        else:
            print("  ü§ù –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–∞")
        
        if comparison['llava_faster']:
            print("  ‚ö° LLaVA –±—ã—Å—Ç—Ä–µ–µ")
        elif comparison['gemini_faster']:
            print("  ‚ö° Gemini –±—ã—Å—Ç—Ä–µ–µ")
        else:
            print("  ‚öñÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = analysis['summary']['recommendations']
        if recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                print(f"  ‚Ä¢ {rec}")
        
        print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF —Å –ø–æ–º–æ—â—å—é LLaVA –∏ Gemini")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
    pdf_path = Path("/mnt/ai/cnn/steccom-rag-lk/data/uploads/Access-SkyEdge-II--170414-FINAL.pdf")
    
    if not pdf_path.exists():
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏")
        return 1
    
    try:
        analyzer = PDFImagesAnalyzer()
        analysis = analyzer.analyze_pdf_images(pdf_path)
        
        if analysis['success']:
            analyzer.print_summary(analysis)
            print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {analysis['total_images']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}")
            return 1
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
