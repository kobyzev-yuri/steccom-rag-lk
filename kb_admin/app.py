#!/usr/bin/env python3
"""
KB Admin - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
Knowledge Base Administration System

–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
"""

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ config.env –ü–ï–†–ï–î –í–°–ï–ú–ò –∏–º–ø–æ—Ä—Ç–∞–º–∏
import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ config.env
# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ KB Admin
config_file = Path(__file__).parent / "config.env"
print(f"üîç –ò—â–µ–º config.env –ø–æ –ø—É—Ç–∏: {config_file}")

if config_file.exists():
    print("‚úÖ –ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π config.env –¥–ª—è KB Admin, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
    with open(config_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key.strip()}")
else:
    print("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π config.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ñ–∏–≥
    alt_config = Path(__file__).parent.parent / "config.env"
    print(f"üîç –ü—Ä–æ–±—É–µ–º –æ–±—â–∏–π config.env: {alt_config}")
    if alt_config.exists():
        print("‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—â–∏–π config.env, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
        with open(alt_config, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key.strip()}")
    else:
        print("‚ùå config.env –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –≤ –æ–±—â–µ–º!")

# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
print(f"üîß USE_PROXYAPI: {os.getenv('USE_PROXYAPI')}")
print(f"üîß PROXYAPI_API_KEY: {os.getenv('PROXYAPI_API_KEY', '–ù–ï –ù–ê–ô–î–ï–ù')[:10]}...")
print(f"üîß PROXYAPI_CHAT_MODEL: {os.getenv('PROXYAPI_CHAT_MODEL')}")
print(f"üîß PROXYAPI_BASE_URL: {os.getenv('PROXYAPI_BASE_URL')}")

import streamlit as st
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('kb_admin.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KB Admin
sys.path.insert(0, str(current_dir / "modules"))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤—ã–º –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
sys.path.insert(0, str(current_dir.parent.parent))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤—ã–º –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(current_dir.parent))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ KB Admin...")
        
        # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        from modules.ui.main_interface import KBAdminInterface
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        interface = KBAdminInterface()
        interface.render_main_page()
        
        logger.info("KB Admin —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Critical error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()