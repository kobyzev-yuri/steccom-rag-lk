#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –Ω–∞ –º–æ–¥–µ–ª—å
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "modules"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class QuickAgentsTester:
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.models_to_test = ["qwen3:8b", "llama3:8b"]  # –¢–æ–ª—å–∫–æ 2 –º–æ–¥–µ–ª–∏
        
    def test_sql_assistant_quick(self, model_name: str) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç SQL Assistant"""
        logger.info(f"üìä –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç SQL Assistant: {model_name}")
        
        try:
            from modules.core.rag import generate_sql
            
            # –¢–æ–ª—å–∫–æ 1 –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
            question = "–ü–æ–∫–∞–∂–∏ SBD —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –º–∞–π –º–µ—Å—è—Ü"
            
            start_time = time.time()
            try:
                sql_query = generate_sql(question, "test_company")
                query_time = time.time() - start_time
                
                success = bool(sql_query and len(sql_query.strip()) > 10)
                
                return {
                    'model': model_name,
                    'success': success,
                    'time': query_time,
                    'sql_length': len(sql_query) if sql_query else 0,
                    'sql_preview': sql_query[:100] + "..." if sql_query and len(sql_query) > 100 else sql_query
                }
                
            except Exception as e:
                return {
                    'model': model_name,
                    'success': False,
                    'time': time.time() - start_time,
                    'error': str(e)
                }
                
        except Exception as e:
            return {
                'model': model_name,
                'success': False,
                'time': 0,
                'error': str(e)
            }
    
    def test_chat_agent_quick(self, model_name: str) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á–∞—Ç –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üí¨ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á–∞—Ç –∞–≥–µ–Ω—Ç–∞: {model_name}")
        
        try:
            from modules.core.base_agent import BaseAgent
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –∞–≥–µ–Ω—Ç–∞
            agent = BaseAgent(
                agent_name=f"quick_chat_{model_name.replace(':', '_')}",
                model_type="chat"
            )
            agent.model_name = model_name
            agent._init_chat_model()
            
            # –¢–æ–ª—å–∫–æ 1 –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
            question = "–ß—Ç–æ —Ç–∞–∫–æ–µ SBD –≤ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?"
            
            start_time = time.time()
            try:
                response = agent.chat_model.invoke(question)
                response_time = time.time() - start_time
                
                answer = str(response.content) if hasattr(response, 'content') else str(response)
                success = bool(answer and len(answer.strip()) > 20)
                
                return {
                    'model': model_name,
                    'success': success,
                    'time': response_time,
                    'answer_length': len(answer) if answer else 0,
                    'answer_preview': answer[:100] + "..." if answer and len(answer) > 100 else answer
                }
                
            except Exception as e:
                return {
                    'model': model_name,
                    'success': False,
                    'time': time.time() - start_time,
                    'error': str(e)
                }
                
        except Exception as e:
            return {
                'model': model_name,
                'success': False,
                'time': 0,
                'error': str(e)
            }
    
    def run_quick_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ê–ì–ï–ù–¢–û–í")
        
        results = {
            'test_date': datetime.now().isoformat(),
            'models_tested': self.models_to_test,
            'sql_results': {},
            'chat_results': {},
            'summary': {}
        }
        
        for model in self.models_to_test:
            logger.info(f"\n{'='*40}")
            logger.info(f"üß™ –ú–û–î–ï–õ–¨: {model}")
            logger.info(f"{'='*40}")
            
            # –¢–µ—Å—Ç SQL
            logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL...")
            sql_result = self.test_sql_assistant_quick(model)
            results['sql_results'][model] = sql_result
            
            if sql_result['success']:
                logger.info(f"  ‚úÖ SQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ {sql_result['time']:.2f}—Å")
            else:
                logger.info(f"  ‚ùå SQL –æ—à–∏–±–∫–∞: {sql_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –¢–µ—Å—Ç —á–∞—Ç
            logger.info(f"üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç...")
            chat_result = self.test_chat_agent_quick(model)
            results['chat_results'][model] = chat_result
            
            if chat_result['success']:
                logger.info(f"  ‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ {chat_result['time']:.2f}—Å")
            else:
                logger.info(f"  ‚ùå –ß–∞—Ç –æ—à–∏–±–∫–∞: {chat_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results['summary'] = self._analyze_quick_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self._save_quick_results(results)
        
        return results
    
    def _analyze_quick_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        summary = {
            'working_models': [],
            'best_sql_model': None,
            'best_chat_model': None,
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ SQL
        sql_models = []
        for model, result in results['sql_results'].items():
            if result['success']:
                sql_models.append((model, result['time']))
        
        if sql_models:
            summary['best_sql_model'] = min(sql_models, key=lambda x: x[1])[0]
            summary['working_models'].extend([m[0] for m in sql_models])
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Ç
        chat_models = []
        for model, result in results['chat_results'].items():
            if result['success']:
                chat_models.append((model, result['time']))
        
        if chat_models:
            summary['best_chat_model'] = min(chat_models, key=lambda x: x[1])[0]
            summary['working_models'].extend([m[0] for m in chat_models])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if summary['best_sql_model']:
            summary['recommendations'].append(f"–õ—É—á—à–∞—è –¥–ª—è SQL: {summary['best_sql_model']}")
        
        if summary['best_chat_model']:
            summary['recommendations'].append(f"–õ—É—á—à–∞—è –¥–ª—è —á–∞—Ç–∞: {summary['best_chat_model']}")
        
        if not summary['working_models']:
            summary['recommendations'].append("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            summary['recommendations'].append(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π: {len(set(summary['working_models']))}")
        
        return summary
    
    def _save_quick_results(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"quick_agents_test_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def print_quick_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*50)
        print("üìä –ë–´–°–¢–†–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*50)
        
        summary = results['summary']
        
        print(f"üìÖ –î–∞—Ç–∞: {results['test_date']}")
        print(f"ü§ñ –ú–æ–¥–µ–ª–µ–π: {len(results['models_tested'])}")
        
        print(f"\nüìä SQL –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for model, result in results['sql_results'].items():
            status = "‚úÖ" if result['success'] else "‚ùå"
            time_str = f"{result['time']:.2f}—Å" if result['success'] else "–û—à–∏–±–∫–∞"
            print(f"  {status} {model}: {time_str}")
        
        print(f"\nüí¨ –ß–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for model, result in results['chat_results'].items():
            status = "‚úÖ" if result['success'] else "‚ùå"
            time_str = f"{result['time']:.2f}—Å" if result['success'] else "–û—à–∏–±–∫–∞"
            print(f"  {status} {model}: {time_str}")
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò:")
        if summary.get('best_sql_model'):
            print(f"  üìä SQL: {summary['best_sql_model']}")
        if summary.get('best_chat_model'):
            print(f"  üí¨ –ß–∞—Ç: {summary['best_chat_model']}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in summary.get('recommendations', []):
            print(f"  ‚Ä¢ {rec}")
        
        print("="*50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ê–ì–ï–ù–¢–û–í KB ADMIN")
    print("=" * 40)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 2 –º–æ–¥–µ–ª–∏ –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∫–∞–∂–¥–∞—è")
    print("=" * 40)
    
    try:
        tester = QuickAgentsTester()
        results = tester.run_quick_test()
        tester.print_quick_summary(results)
        
        print(f"\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)







