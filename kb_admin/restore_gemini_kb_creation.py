#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è KB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini
–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–º–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è —Å Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "modules"))
sys.path.insert(0, str(current_dir.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('gemini_kb_restoration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GeminiKBManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è KB —Å Gemini"""
    
    def __init__(self):
        self.vision_processor = None
        self.smart_librarian = None
        self.kb_manager = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            from modules.documents.vision_processor import VisionProcessor
            from modules.core.smart_document_agent import SmartLibrarian
            from modules.core.knowledge_manager import KnowledgeBaseManager
            from modules.documents.pdf_processor import PDFProcessor
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.vision_processor = VisionProcessor()
            self.kb_manager = KnowledgeBaseManager()
            pdf_processor = PDFProcessor()
            self.smart_librarian = SmartLibrarian(self.kb_manager, pdf_processor)
            
            logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def check_gemini_availability(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini...")
        
        try:
            if not self.vision_processor:
                return {
                    'available': False,
                    'error': 'VisionProcessor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini
            gemini_status = self.vision_processor.check_model_availability()
            
            if gemini_status.get('available'):
                logger.info(f"‚úÖ {gemini_status.get('message', 'Gemini –¥–æ—Å—Ç—É–ø–µ–Ω')}")
                return gemini_status
            else:
                logger.warning(f"‚ö†Ô∏è {gemini_status.get('message', 'Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
                return gemini_status
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Gemini: {e}")
            return {
                'available': False,
                'error': str(e)
            }
    
    def test_gemini_analysis(self, test_image_path: Optional[Path] = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini...")
        
        try:
            if not test_image_path:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                test_image_path = self._create_test_image()
            
            if not test_image_path.exists():
                return {
                    'success': False,
                    'error': f'–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image_path}'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis_result = self.vision_processor.analyze_image_with_gemini(test_image_path)
            
            if analysis_result.get('success'):
                logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini —É—Å–ø–µ—à–µ–Ω")
                return {
                    'success': True,
                    'analysis': analysis_result.get('analysis', ''),
                    'model': analysis_result.get('model', ''),
                    'provider': analysis_result.get('provider', '')
                }
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return analysis_result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _create_test_image(self) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            from PIL import Image, ImageDraw, ImageFont
            import io
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (800, 600), color='white')
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
            except:
                font = ImageFont.load_default()
            
            text = "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n–°–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å VSAT\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n–î–∞—Ç–∞: 2025"
            draw.text((50, 50), text, font=font, fill='black')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            test_image_path = current_dir / "test_document.png"
            img.save(test_image_path)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
            return test_image_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
    
    def restore_smart_librarian_functionality(self) -> Dict[str, Any]:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–º–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è"""
        logger.info("üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–º–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if not self.smart_librarian:
                return {
                    'success': False,
                    'error': 'SmartLibrarian –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            test_results = {
                'document_analysis': False,
                'image_processing': False,
                'kb_creation': False,
                'gemini_integration': False
            }
            
            # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                test_doc_path = self._create_test_document()
                analysis = self.smart_librarian.analyze_document(test_doc_path)
                
                if analysis and 'file_name' in analysis:
                    test_results['document_analysis'] = True
                    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    logger.warning("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            
            # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try:
                test_image_path = self._create_test_image()
                image_analysis = self.vision_processor.analyze_image_with_gemini(test_image_path)
                
                if image_analysis.get('success'):
                    test_results['image_processing'] = True
                    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ KB
            try:
                test_kb_id = self.kb_manager.create_knowledge_base(
                    name="–¢–µ—Å—Ç–æ–≤–∞—è KB –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    description="–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                    category="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    created_by="gemini_restoration"
                )
                
                if test_kb_id:
                    test_results['kb_creation'] = True
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ KB —Ä–∞–±–æ—Ç–∞–µ—Ç (ID: {test_kb_id})")
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é KB
                    self.kb_manager.delete_knowledge_base(test_kb_id)
                else:
                    logger.warning("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ KB –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è KB: {e}")
            
            # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini
            gemini_status = self.check_gemini_availability()
            if gemini_status.get('available'):
                test_results['gemini_integration'] = True
                logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            working_components = sum(test_results.values())
            total_components = len(test_results)
            success_rate = working_components / total_components
            
            return {
                'success': success_rate > 0.5,
                'success_rate': success_rate,
                'working_components': working_components,
                'total_components': total_components,
                'test_results': test_results,
                'recommendations': self._generate_recommendations(test_results)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _create_test_document(self) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            test_doc_path = current_dir / "test_document.txt"
            
            test_content = """
–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –†–ï–ì–õ–ê–ú–ï–ù–¢
–°–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å VSAT

1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
1.1. –ù–∞—Å—Ç–æ—è—â–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏ VSAT.
1.2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–≤—è–∑–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö.

2. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
2.1. –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞–±–æ—Ç—ã: 14/12 –ì–ì—Ü
2.2. –ú–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞: –¥–æ 2 –í—Ç
2.3. –î–∏–∞–º–µ—Ç—Ä –∞–Ω—Ç–µ–Ω–Ω—ã: 1.2-2.4 –º

3. –ü–†–û–¶–ï–î–£–†–´ –£–°–¢–ê–ù–û–í–ö–ò
3.1. –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω—Ç–µ–Ω–Ω—ã
3.2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
3.3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏

–î–∞—Ç–∞: 2025-01-08
–í–µ—Ä—Å–∏—è: 1.0
            """
            
            with open(test_doc_path, 'w', encoding='utf-8') as f:
                f.write(test_content.strip())
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {test_doc_path}")
            return test_doc_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            raise
    
    def _generate_recommendations(self, test_results: Dict[str, bool]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        recommendations = []
        
        if not test_results.get('gemini_integration'):
            recommendations.append("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PROXYAPI_KEY –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini")
        
        if not test_results.get('document_analysis'):
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SmartLibrarian")
        
        if not test_results.get('image_processing'):
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VisionProcessor")
        
        if not test_results.get('kb_creation'):
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        if not recommendations:
            recommendations.append("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return recommendations
    
    def create_demo_kb_with_gemini(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π KB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini"""
        logger.info("üéØ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é KB —Å Gemini...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º KB
            kb_id = self.kb_manager.create_knowledge_base(
                name="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è KB —Å Gemini",
                description="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞ Gemini",
                category="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è",
                created_by="gemini_demo"
            )
            
            if not kb_id:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å KB'
                }
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            test_doc_path = self._create_test_document()
            test_image_path = self._create_test_image()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            analysis = self.smart_librarian.analyze_document(test_doc_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ KB
            doc_id = self.kb_manager.add_document_to_kb(
                kb_id=kb_id,
                title="–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º Gemini",
                file_path=str(test_doc_path),
                content_type="text/plain",
                file_size=test_doc_path.stat().st_size,
                created_by="gemini_demo",
                metadata=json.dumps(analysis, ensure_ascii=False) if analysis else None
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini
            if test_image_path.exists():
                image_analysis = self.vision_processor.analyze_image_with_gemini(test_image_path)
                
                if image_analysis.get('success'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ KB
                    self.kb_manager.add_image(
                        kb_id=kb_id,
                        image_path=str(test_image_path),
                        image_name=test_image_path.name,
                        image_description=image_analysis.get('analysis', ''),
                        llava_analysis=image_analysis.get('analysis', '')
                    )
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            try:
                test_doc_path.unlink()
                test_image_path.unlink()
            except:
                pass
            
            return {
                'success': True,
                'kb_id': kb_id,
                'doc_id': doc_id,
                'message': f'–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è KB —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π KB: {e}")
            return {
                'success': False,
                'error': str(e)
            }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("ü§ñ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è KB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = GeminiKBManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini...")
        gemini_status = manager.check_gemini_availability()
        print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if gemini_status.get('available') else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        if gemini_status.get('message'):
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {gemini_status['message']}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        print("\nüîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        restoration_result = manager.restore_smart_librarian_functionality()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {restoration_result.get('success_rate', 0):.1%}")
        print(f"  –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {restoration_result.get('working_components', 0)}/{restoration_result.get('total_components', 0)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        test_results = restoration_result.get('test_results', {})
        print(f"\nüß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for component, status in test_results.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {component.replace('_', ' ').title()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = restoration_result.get('recommendations', [])
        if recommendations:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations:
                print(f"  ‚Ä¢ {rec}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é KB –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if restoration_result.get('success'):
            print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π KB...")
            demo_result = manager.create_demo_kb_with_gemini()
            
            if demo_result.get('success'):
                print(f"‚úÖ {demo_result.get('message', 'KB —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ KB: {demo_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print("\n" + "=" * 60)
        print("üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()







