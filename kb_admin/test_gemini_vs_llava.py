#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã Gemini –Ω–∞ Ollama LLaVA
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "modules"))
sys.path.insert(0, str(current_dir.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('gemini_vs_llava_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GeminiVsLLaVATester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Gemini –∏ LLaVA"""
    
    def __init__(self):
        self.test_results = []
        self.vision_processor = None
        self.llava_analyzer = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º VisionProcessor (Gemini)
            from modules.documents.vision_processor import VisionProcessor
            self.vision_processor = VisionProcessor()
            logger.info("‚úÖ VisionProcessor (Gemini) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LLaVAAnalyzer (Ollama)
            from modules.core.llava_analyzer import LLaVAAnalyzer
            self.llava_analyzer = LLaVAAnalyzer()
            logger.info("‚úÖ LLaVAAnalyzer (Ollama) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def check_availability(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º...")
        
        results = {
            'gemini_available': False,
            'llava_available': False,
            'gemini_error': None,
            'llava_error': None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini
        try:
            gemini_status = self.vision_processor.check_model_availability()
            results['gemini_available'] = gemini_status.get('available', False)
            if not results['gemini_available']:
                results['gemini_error'] = gemini_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logger.info(f"Gemini: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if results['gemini_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        except Exception as e:
            results['gemini_error'] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Gemini: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLaVA
        try:
            results['llava_available'] = self.llava_analyzer.is_available()
            if not results['llava_available']:
                results['llava_error'] = "LLaVA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Ollama –∏ –º–æ–¥–µ–ª—å llava"
            logger.info(f"LLaVA: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if results['llava_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        except Exception as e:
            results['llava_error'] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LLaVA: {e}")
        
        return results
    
    def create_test_images(self) -> List[Path]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        logger.info("üñºÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        test_images = []
        
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            test_dir = current_dir / "test_images"
            test_dir.mkdir(exist_ok=True)
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            img1 = Image.new('RGB', (800, 600), color='white')
            draw1 = ImageDraw.Draw(img1)
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
            except:
                font = ImageFont.load_default()
            
            text1 = """–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –†–ï–ì–õ–ê–ú–ï–ù–¢
–°–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å VSAT

1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
1.1. –ù–∞—Å—Ç–æ—è—â–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏ VSAT.
1.2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–≤—è–∑–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö.

2. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
2.1. –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞–±–æ—Ç—ã: 14/12 –ì–ì—Ü
2.2. –ú–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞: –¥–æ 2 –í—Ç
2.3. –î–∏–∞–º–µ—Ç—Ä –∞–Ω—Ç–µ–Ω–Ω—ã: 1.2-2.4 –º

–î–∞—Ç–∞: 2025-01-08
–í–µ—Ä—Å–∏—è: 1.0"""
            
            draw1.text((50, 50), text1, font=font, fill='black')
            img1_path = test_dir / "test_document_1.png"
            img1.save(img1_path)
            test_images.append(img1_path)
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2: –°—Ö–µ–º–∞
            img2 = Image.new('RGB', (800, 600), color='white')
            draw2 = ImageDraw.Draw(img2)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É
            draw2.rectangle([100, 100, 300, 200], outline='black', width=2)
            draw2.text((150, 150), "VSAT Terminal", font=font, fill='black')
            
            draw2.rectangle([500, 100, 700, 200], outline='black', width=2)
            draw2.text((550, 150), "Satellite", font=font, fill='black')
            
            draw2.line([(300, 150), (500, 150)], fill='black', width=2)
            draw2.text((400, 120), "RF Link", font=font, fill='black')
            
            img2_path = test_dir / "test_diagram_1.png"
            img2.save(img2_path)
            test_images.append(img2_path)
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3: –¢–∞–±–ª–∏—Ü–∞
            img3 = Image.new('RGB', (800, 600), color='white')
            draw3 = ImageDraw.Draw(img3)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
            table_data = [
                ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–ï–¥–∏–Ω–∏—Ü–∞"],
                ["–ß–∞—Å—Ç–æ—Ç–∞", "14/12", "–ì–ì—Ü"],
                ["–ú–æ—â–Ω–æ—Å—Ç—å", "2", "–í—Ç"],
                ["–î–∏–∞–º–µ—Ç—Ä", "1.2-2.4", "–º"]
            ]
            
            y_start = 100
            for i, row in enumerate(table_data):
                y = y_start + i * 40
                for j, cell in enumerate(row):
                    x = 100 + j * 200
                    draw3.rectangle([x, y, x+180, y+30], outline='black', width=1)
                    draw3.text((x+10, y+10), cell, font=font, fill='black')
            
            img3_path = test_dir / "test_table_1.png"
            img3.save(img3_path)
            test_images.append(img3_path)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            raise
        
        return test_images
    
    def test_image_analysis(self, image_path: Path) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path.name}")
        
        results = {
            'image_path': str(image_path),
            'image_name': image_path.name,
            'gemini_result': None,
            'llava_result': None,
            'comparison': {}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini
        if self.vision_processor:
            try:
                start_time = time.time()
                gemini_result = self.vision_processor.analyze_image_with_gemini(image_path)
                gemini_time = time.time() - start_time
                
                results['gemini_result'] = {
                    'success': gemini_result.get('success', False),
                    'analysis': gemini_result.get('analysis', ''),
                    'error': gemini_result.get('error', ''),
                    'response_time': gemini_time,
                    'model': gemini_result.get('model', ''),
                    'provider': gemini_result.get('provider', '')
                }
                
                logger.info(f"  Gemini: {'‚úÖ' if results['gemini_result']['success'] else '‚ùå'} ({gemini_time:.2f}—Å)")
                
            except Exception as e:
                results['gemini_result'] = {
                    'success': False,
                    'error': str(e),
                    'response_time': 0
                }
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLaVA
        if self.llava_analyzer:
            try:
                start_time = time.time()
                llava_result = self.llava_analyzer.analyze_image(image_path)
                llava_time = time.time() - start_time
                
                results['llava_result'] = {
                    'success': llava_result.get('success', False),
                    'analysis': llava_result.get('analysis', ''),
                    'description': llava_result.get('description', ''),
                    'error': llava_result.get('error', ''),
                    'response_time': llava_time,
                    'model': llava_result.get('model_used', ''),
                    'provider': llava_result.get('provider', '')
                }
                
                logger.info(f"  LLaVA: {'‚úÖ' if results['llava_result']['success'] else '‚ùå'} ({llava_time:.2f}—Å)")
                
            except Exception as e:
                results['llava_result'] = {
                    'success': False,
                    'error': str(e),
                    'response_time': 0
                }
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ LLaVA: {e}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results['gemini_result'] and results['llava_result']:
            results['comparison'] = self._compare_results(
                results['gemini_result'], 
                results['llava_result']
            )
        
        return results
    
    def _compare_results(self, gemini_result: Dict, llava_result: Dict) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Gemini –∏ LLaVA"""
        comparison = {
            'both_successful': gemini_result['success'] and llava_result['success'],
            'gemini_faster': gemini_result['response_time'] < llava_result['response_time'],
            'speed_difference': abs(gemini_result['response_time'] - llava_result['response_time']),
            'quality_comparison': 'unknown'
        }
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–∞
        if gemini_result['success'] and llava_result['success']:
            gemini_length = len(gemini_result['analysis'])
            llava_length = len(llava_result['analysis'])
            
            if gemini_length > llava_length * 1.2:
                comparison['quality_comparison'] = 'gemini_detailed'
            elif llava_length > gemini_length * 1.2:
                comparison['quality_comparison'] = 'llava_detailed'
            else:
                comparison['quality_comparison'] = 'similar'
        
        return comparison
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini vs LLaVA...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        availability = self.check_availability()
        
        if not availability['gemini_available'] and not availability['llava_available']:
            return {
                'success': False,
                'error': '–ù–∏ –æ–¥–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞',
                'availability': availability
            }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_images = self.create_test_images()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_results = []
        total_gemini_time = 0
        total_llava_time = 0
        successful_gemini = 0
        successful_llava = 0
        
        for image_path in test_images:
            result = self.test_image_analysis(image_path)
            test_results.append(result)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result['gemini_result'] and result['gemini_result']['success']:
                total_gemini_time += result['gemini_result']['response_time']
                successful_gemini += 1
            
            if result['llava_result'] and result['llava_result']['success']:
                total_llava_time += result['llava_result']['response_time']
                successful_llava += 1
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis = self._analyze_test_results(test_results, availability)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_test_results(analysis, test_results)
        
        return analysis
    
    def _analyze_test_results(self, test_results: List[Dict], availability: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        total_tests = len(test_results)
        gemini_success_rate = 0
        llava_success_rate = 0
        avg_gemini_time = 0
        avg_llava_time = 0
        
        gemini_times = []
        llava_times = []
        
        for result in test_results:
            if result['gemini_result']:
                if result['gemini_result']['success']:
                    gemini_times.append(result['gemini_result']['response_time'])
            
            if result['llava_result']:
                if result['llava_result']['success']:
                    llava_times.append(result['llava_result']['response_time'])
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if availability['gemini_available']:
            gemini_success_rate = len(gemini_times) / total_tests
            avg_gemini_time = sum(gemini_times) / len(gemini_times) if gemini_times else 0
        
        if availability['llava_available']:
            llava_success_rate = len(llava_times) / total_tests
            avg_llava_time = sum(llava_times) / len(llava_times) if llava_times else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        if availability['gemini_available'] and availability['llava_available']:
            if gemini_success_rate > llava_success_rate:
                recommendations.append("Gemini –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
            elif llava_success_rate > gemini_success_rate:
                recommendations.append("LLaVA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
            
            if avg_gemini_time < avg_llava_time:
                recommendations.append("Gemini –±—ã—Å—Ç—Ä–µ–µ –≤ —Å—Ä–µ–¥–Ω–µ–º")
            elif avg_llava_time < avg_gemini_time:
                recommendations.append("LLaVA –±—ã—Å—Ç—Ä–µ–µ –≤ —Å—Ä–µ–¥–Ω–µ–º")
            
            if gemini_success_rate > 0.8 and llava_success_rate > 0.8:
                recommendations.append("–û–±–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ö–æ—Ä–æ—à–æ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é")
            elif gemini_success_rate > 0.8:
                recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini")
            elif llava_success_rate > 0.8:
                recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLaVA")
        elif availability['gemini_available']:
            recommendations.append("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ Gemini - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ")
        elif availability['llava_available']:
            recommendations.append("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ LLaVA - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ")
        else:
            recommendations.append("–ù–∏ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        return {
            'test_date': datetime.now().isoformat(),
            'total_tests': total_tests,
            'availability': availability,
            'gemini_metrics': {
                'success_rate': gemini_success_rate,
                'avg_response_time': avg_gemini_time,
                'total_successful': len(gemini_times)
            },
            'llava_metrics': {
                'success_rate': llava_success_rate,
                'avg_response_time': avg_llava_time,
                'total_successful': len(llava_times)
            },
            'recommendations': recommendations,
            'winner': self._determine_winner(gemini_success_rate, llava_success_rate, avg_gemini_time, avg_llava_time)
        }
    
    def _determine_winner(self, gemini_success: float, llava_success: float, 
                         gemini_time: float, llava_time: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        if gemini_success > llava_success + 0.1:
            return "gemini"
        elif llava_success > gemini_success + 0.1:
            return "llava"
        elif gemini_time < llava_time * 0.8:
            return "gemini"
        elif llava_time < gemini_time * 0.8:
            return "llava"
        else:
            return "tie"
    
    def _save_test_results(self, analysis: Dict, test_results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"gemini_vs_llava_results_{timestamp}.json"
        
        full_results = {
            'analysis': analysis,
            'detailed_results': test_results
 }
        
        try:
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(full_results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def print_summary(self, analysis: Dict):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –°–†–ê–í–ù–ï–ù–ò–ò GEMINI VS LLAVA")
        print("="*60)
        
        print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {analysis['test_date']}")
        print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {analysis['total_tests']}")
        
        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        availability = analysis['availability']
        print(f"\nüîç –î–û–°–¢–£–ü–ù–û–°–¢–¨:")
        print(f"  Gemini: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if availability['gemini_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        if availability['gemini_error']:
            print(f"    –û—à–∏–±–∫–∞: {availability['gemini_error']}")
        
        print(f"  LLaVA: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if availability['llava_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        if availability['llava_error']:
            print(f"    –û—à–∏–±–∫–∞: {availability['llava_error']}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ Gemini
        if availability['gemini_available']:
            gemini_metrics = analysis['gemini_metrics']
            print(f"\nü§ñ GEMINI –ú–ï–¢–†–ò–ö–ò:")
            print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {gemini_metrics['success_rate']:.1%}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {gemini_metrics['avg_response_time']:.2f}—Å")
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {gemini_metrics['total_successful']}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ LLaVA
        if availability['llava_available']:
            llava_metrics = analysis['llava_metrics']
            print(f"\nü¶ô LLAVA –ú–ï–¢–†–ò–ö–ò:")
            print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {llava_metrics['success_rate']:.1%}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {llava_metrics['avg_response_time']:.2f}—Å")
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {llava_metrics['total_successful']}")
        
        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
        winner = analysis['winner']
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if winner == "gemini":
            print("  ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: Gemini")
        elif winner == "llava":
            print("  ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: LLaVA")
        else:
            print("  ü§ù –ù–∏—á—å—è - –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = analysis['recommendations']
        if recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                print(f"  ‚Ä¢ {rec}")
        
        print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini vs LLaVA –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    try:
        tester = GeminiVsLLaVATester()
        analysis = tester.run_comprehensive_test()
        tester.print_summary(analysis)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()







