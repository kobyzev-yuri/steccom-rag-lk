#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ OCR
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
"""

import os
import sys
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "kb_admin"))

from kb_admin.modules.core.smart_document_agent import SmartLibrarian
from kb_admin.modules.core.knowledge_manager import KnowledgeBaseManager
from kb_admin.modules.documents.pdf_processor import PDFProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_ocr_cleaning():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ OCR"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ OCR")
    print("=" * 60)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    try:
        kb_manager = KnowledgeBaseManager()
        pdf_processor = PDFProcessor()
        smart_librarian = SmartLibrarian(kb_manager, pdf_processor)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # 2. –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Ñ–∞–π–ª–∞...")
    test_files = [
        "data/uploads/billmaster_7.pdf",
        "data/uploads/reg_07032015.pdf", 
        "data/uploads/reg_sbd.pdf"
    ]
    
    test_file = None
    for file_path in test_files:
        full_path = Path(__file__).parent / file_path
        if full_path.exists():
            test_file = full_path
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
            break
    
    if not test_file:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    print("\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π...")
    try:
        analysis = smart_librarian.analyze_document(test_file)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"üìÑ –§–∞–π–ª: {analysis['file_name']}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {analysis['file_size'] / 1024:.1f} KB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–µ–∫—Å—Ç–∞
        raw_text = analysis.get('raw_ocr_text', '')
        original_cleaned = analysis.get('original_cleaned_text', '')
        smart_summary = analysis.get('smart_summary', '')
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤:")
        print(f"   üî¥ –ò—Å—Ö–æ–¥–Ω—ã–π OCR: {len(raw_text):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   üü¢ –ü–æ–ª–Ω—ã–π –æ—á–∏—â–µ–Ω–Ω—ã–π: {len(original_cleaned):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   üìã –ê–±—Å—Ç—Ä–∞–∫—Ç: {len(smart_summary):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–∏–π
        if raw_text and original_cleaned:
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–∏–π:")
            
            # –ò—â–µ–º –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            import re
            garbage_patterns = [
                r'–í–∞—é–º–µ–Ω–æ–≤—è–Ω–∏–µ',
                r'–∏–æ–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è', 
                r'–µ–µ–µ\s+–°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢',
                r'–∑–∞–≤–æ–ª–∞\]\s*-\s*–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è',
                r'[^\w\s]{3,}'
            ]
            
            found_garbage = []
            for pattern in garbage_patterns:
                matches = re.findall(pattern, raw_text)
                if matches:
                    found_garbage.extend(matches[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
            
            if found_garbage:
                print(f"   üî¥ –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ:")
                for garbage in found_garbage[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"      - '{garbage}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ—á–∏—â–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            if found_garbage:
                print(f"   üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–∏—â–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ...")
                for garbage in found_garbage[:3]:
                    if garbage not in original_cleaned:
                        print(f"      ‚úÖ '{garbage}' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        print(f"      ‚ö†Ô∏è '{garbage}' –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–æ–≤
        print(f"\nüìù –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–æ–≤:")
        print(f"   üî¥ –ò—Å—Ö–æ–¥–Ω—ã–π OCR (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"      {raw_text[:200]}...")
        
        print(f"\n   üü¢ –ü–æ–ª–Ω—ã–π –æ—á–∏—â–µ–Ω–Ω—ã–π (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"      {original_cleaned[:200]}...")
        
        print(f"\n   üìã –ê–±—Å—Ç—Ä–∞–∫—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"      {smart_summary[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—á–∏—Å—Ç–∫–∏
        if len(original_cleaned) > len(raw_text) * 0.8:  # –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 80% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
            print(f"\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—á–∏—Å—Ç–∫–∏: –•–û–†–û–®–ï–ï (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(original_cleaned)/len(raw_text)*100:.1f}% —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)")
        else:
            print(f"\n‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ—á–∏—Å—Ç–∫–∏: –ü–†–û–í–ï–†–ò–¢–¨ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(original_cleaned)/len(raw_text)*100:.1f}% —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ OCR")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('PROXYAPI_KEY')
    if not api_key:
        print("‚ùå PROXYAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export PROXYAPI_KEY=your_key")
        sys.exit(1)
    
    print(f"üîë API –∫–ª—é—á: {api_key[:10]}...{api_key[-4:]}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_ocr_cleaning()
    
    if success:
        print("\nüéØ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –æ—á–∏—Å—Ç–∫–∏ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(0)
    else:
        print("\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
