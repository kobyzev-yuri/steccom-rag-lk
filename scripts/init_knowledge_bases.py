#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –∑–Ω–∞–Ω–∏–π
–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import sqlite3
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from modules.admin.knowledge_manager import KnowledgeBaseManager

def init_knowledge_bases():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –∑–Ω–∞–Ω–∏–π"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –∑–Ω–∞–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("data/knowledge_bases", exist_ok=True)
    os.makedirs("data/uploads", exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑ –∑–Ω–∞–Ω–∏–π
    kb_manager = KnowledgeBaseManager("data/knowledge_bases/kbs.db")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    base_kbs = [
        {
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
            "description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏",
            "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã"
        },
        {
            "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
            "description": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã",
            "category": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        },
        {
            "name": "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "description": "–ü–æ–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "category": "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        }
    ]
    
    for kb_data in base_kbs:
        try:
            kb_id = kb_manager.create_knowledge_base(
                name=kb_data["name"],
                description=kb_data["description"],
                category=kb_data["category"],
                created_by="system"
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ë–ó: {kb_data['name']} (ID: {kb_id})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ë–ó {kb_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Multi-KB RAG
    kb_db_path = "data/knowledge_bases/kbs.db"
    if not os.path.exists(kb_db_path):
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Multi-KB RAG...")
        conn = sqlite3.connect(kb_db_path)
        c = conn.cursor()
        
        c.executescript('''
        CREATE TABLE IF NOT EXISTS knowledge_bases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            description TEXT,
            category TEXT NOT NULL,
            created_at TEXT NOT NULL,
            updated_at TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_by TEXT NOT NULL
        );
        
        CREATE TABLE IF NOT EXISTS knowledge_documents (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            kb_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            file_path TEXT,
            content_type TEXT NOT NULL,
            file_size INTEGER,
            upload_date TEXT NOT NULL,
            processed BOOLEAN DEFAULT 0,
            processing_status TEXT DEFAULT 'pending',
            metadata TEXT,
            FOREIGN KEY (kb_id) REFERENCES knowledge_bases(id)
        );
        
        CREATE TABLE IF NOT EXISTS document_chunks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            doc_id INTEGER NOT NULL,
            chunk_index INTEGER NOT NULL,
            content TEXT NOT NULL,
            metadata TEXT,
            embedding BLOB,
            FOREIGN KEY (doc_id) REFERENCES knowledge_documents(id)
        );
        ''')
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {kb_db_path}")
    else:
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {kb_db_path}")
    
    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    init_knowledge_bases()
