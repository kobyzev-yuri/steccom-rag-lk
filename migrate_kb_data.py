#!/usr/bin/env python3
"""
Migration script to transfer knowledge bases from kbs.db to satellite_billing.db
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –±–∞–∑ –∑–Ω–∞–Ω–∏–π –∏–∑ kbs.db –≤ satellite_billing.db
"""

import sqlite3
import shutil
from pathlib import Path
from datetime import datetime

def migrate_kb_data():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π –∏–∑ kbs.db –≤ satellite_billing.db"""
    
    # –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    source_db = Path("data/knowledge_bases/kbs.db")
    target_db = Path("satellite_billing.db")
    
    if not source_db.exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_db}")
        return False
        
    if not target_db.exists():
        print(f"‚ùå –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_db}")
        return False
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ {source_db} –≤ {target_db}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    source_conn = sqlite3.connect(source_db)
    target_conn = sqlite3.connect(target_db)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        target_cursor = target_conn.cursor()
        target_cursor.executescript('''
        CREATE TABLE IF NOT EXISTS knowledge_bases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            description TEXT,
            category TEXT NOT NULL,
            created_at TEXT NOT NULL,
            updated_at TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_by TEXT NOT NULL
        );
        
        CREATE TABLE IF NOT EXISTS knowledge_documents (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            kb_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            file_path TEXT,
            content_type TEXT NOT NULL,
            file_size INTEGER,
            upload_date TEXT NOT NULL,
            processed BOOLEAN DEFAULT 0,
            processing_status TEXT DEFAULT 'pending',
            metadata TEXT,
            image_path TEXT,
            image_description TEXT,
            image_analysis TEXT,
            FOREIGN KEY (kb_id) REFERENCES knowledge_bases(id)
        );
        
        CREATE TABLE IF NOT EXISTS knowledge_topics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            kb_id INTEGER NOT NULL,
            topic_name TEXT NOT NULL,
            description TEXT,
            created_at TEXT NOT NULL,
            FOREIGN KEY (kb_id) REFERENCES knowledge_bases(id)
        );
        ''')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã
        source_cursor = source_conn.cursor()
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        source_cursor.execute("SELECT * FROM knowledge_bases")
        kb_rows = source_cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(kb_rows)} –±–∞–∑ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        
        now = datetime.now().isoformat()
        
        for kb_row in kb_rows:
            kb_id, name, description, category, created_at, updated_at, is_active, created_by = kb_row
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
            target_cursor.execute("SELECT id FROM knowledge_bases WHERE name = ?", (name,))
            existing_kb = target_cursor.fetchone()
            
            if existing_kb:
                print(f"‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            target_cursor.execute('''
                INSERT INTO knowledge_bases (name, description, category, created_at, updated_at, is_active, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (name, description, category, created_at or now, updated_at or now, is_active, created_by or "admin"))
            
            new_kb_id = target_cursor.lastrowid
            print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {name} (–Ω–æ–≤—ã–π ID: {new_kb_id})")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        source_cursor.execute("SELECT * FROM knowledge_documents")
        doc_rows = source_cursor.fetchall()
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(doc_rows)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        
        for doc_row in doc_rows:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            source_cursor.execute("PRAGMA table_info(knowledge_documents)")
            columns = [col[1] for col in source_cursor.fetchall()]
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
            doc_data = dict(zip(columns, doc_row))
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π ID –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            target_cursor.execute("SELECT id FROM knowledge_bases WHERE name = (SELECT name FROM knowledge_bases WHERE id = ?)", (doc_data['kb_id'],))
            new_kb_id = target_cursor.fetchone()
            
            if new_kb_id:
                new_kb_id = new_kb_id[0]
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                target_cursor.execute('''
                    INSERT INTO knowledge_documents (kb_id, title, file_path, content_type, file_size, upload_date, processed, processing_status, metadata)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    new_kb_id,
                    doc_data.get('title', ''),
                    doc_data.get('file_path', ''),
                    doc_data.get('content_type', 'text/plain'),
                    doc_data.get('file_size', 0),
                    doc_data.get('upload_date', now),
                    doc_data.get('processed', 0),
                    doc_data.get('processing_status', 'pending'),
                    doc_data.get('metadata', '')
                ))
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–º—ã
        source_cursor.execute("SELECT * FROM knowledge_topics")
        topic_rows = source_cursor.fetchall()
        
        print(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(topic_rows)} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        
        for topic_row in topic_rows:
            topic_id, kb_id, topic_name, description, created_at = topic_row
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π ID –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            target_cursor.execute("SELECT id FROM knowledge_bases WHERE name = (SELECT name FROM knowledge_bases WHERE id = ?)", (kb_id,))
            new_kb_id = target_cursor.fetchone()
            
            if new_kb_id:
                new_kb_id = new_kb_id[0]
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–º—É
                target_cursor.execute('''
                    INSERT INTO knowledge_topics (kb_id, topic_name, description, created_at)
                    VALUES (?, ?, ?, ?)
                ''', (new_kb_id, topic_name, description, created_at or now))
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        source_vector_dir = Path("data/knowledge_bases")
        target_vector_dir = Path("kb_admin/data/knowledge_bases")
        
        if source_vector_dir.exists() and target_vector_dir.exists():
            print("üîÑ –ö–æ–ø–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã...")
            
            for vector_dir in source_vector_dir.glob("vectorstore_*"):
                target_vector_path = target_vector_dir / vector_dir.name
                if not target_vector_path.exists():
                    shutil.copytree(vector_dir, target_vector_path)
                    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {vector_dir.name}")
                else:
                    print(f"‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {vector_dir.name}")
        
        target_conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        target_cursor.execute("SELECT COUNT(*) FROM knowledge_bases")
        kb_count = target_cursor.fetchone()[0]
        target_cursor.execute("SELECT COUNT(*) FROM knowledge_documents")
        doc_count = target_cursor.fetchone()[0]
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   - –ë–∞–∑ –∑–Ω–∞–Ω–∏–π: {kb_count}")
        print(f"   - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        target_conn.rollback()
        return False
        
    finally:
        source_conn.close()
        target_conn.close()

if __name__ == "__main__":
    migrate_kb_data()


