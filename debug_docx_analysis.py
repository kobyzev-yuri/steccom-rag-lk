#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOCX —Ñ–∞–π–ª–∞
"""

import sys
import os
sys.path.append('/mnt/ai/cnn/steccom')

from kb_admin.modules.core.smart_document_agent import SmartLibrarian
from kb_admin.modules.core.knowledge_manager import KnowledgeBaseManager
from kb_admin.modules.documents.pdf_processor import PDFProcessor
from pathlib import Path

def debug_docx_analysis():
    """–û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOCX —Ñ–∞–π–ª–∞"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOCX —Ñ–∞–π–ª–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    kb_manager = KnowledgeBaseManager()
    pdf_processor = PDFProcessor()
    smart_librarian = SmartLibrarian(kb_manager, pdf_processor)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = Path("/mnt/ai/cnn/steccom/data/uploads/Iridium Short Burst Data Service Best Practices Guide Draft 091410_1.docx")
    
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {file_path.name}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    try:
        analysis = smart_librarian.analyze_document(file_path)
        
        if analysis is None:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª None")
            return
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–∏–ø: {type(analysis)}")
        print(f"üìä –ö–ª—é—á–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ: {list(analysis.keys()) if isinstance(analysis, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
        
        if isinstance(analysis, dict):
            print(f"   - –§–æ—Ä–º–∞—Ç: {analysis.get('format_description', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {analysis.get('format_supported', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   - –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {analysis.get('text_length', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   - –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analysis.get('content_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   - –ï—Å—Ç—å —É–º–Ω–∞—è –≤—ã–∂–∏–º–∫–∞: {'smart_summary' in analysis}")
            print(f"   - –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ë–ó: {'suggested_kb' in analysis}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó...")
        strategy = smart_librarian.suggest_kb_strategy([analysis])
        
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞, —Ç–∏–ø: {strategy.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"üìã –ö–ª—é—á–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {list(strategy.keys())}")
        
        if strategy.get('type') == 'single_kb':
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ –ë–ó: {strategy.get('kb_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {strategy.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(strategy.get('documents', []))}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_docx_analysis()
