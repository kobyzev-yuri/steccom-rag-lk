#!/usr/bin/env python3
"""
Test RAG Loading Final - Final test of RAG system loading
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "kb_admin"))

def test_rag_loading_final():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã"""
    
    try:
        from modules.rag.multi_kb_rag import MultiKBRAG
        
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        rag = MultiKBRAG()
        
        print(f"üìä –ü—É—Ç—å –∫ –ë–î: {rag.db_path}")
        print(f"üìä –ü—É—Ç—å –∫ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º: {Path('data/knowledge_bases')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        import sqlite3
        conn = sqlite3.connect(rag.db_path)
        c = conn.cursor()
        
        c.execute("SELECT id, name, is_active FROM knowledge_bases WHERE is_active = 1")
        active_kbs = c.fetchall()
        
        print(f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {len(active_kbs)}")
        for kb_id, name, is_active in active_kbs:
            print(f"   - ID {kb_id}: {name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            vectorstore_path = Path(f"data/knowledge_bases/vectorstore_{kb_id}")
            faiss_file = vectorstore_path / "index.faiss"
            pkl_file = vectorstore_path / "index.pkl"
            
            if faiss_file.exists() and pkl_file.exists():
                print(f"     ‚úÖ FAISS —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã: {vectorstore_path}")
            else:
                print(f"     ‚ùå FAISS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {vectorstore_path}")
        
        conn.close()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        print("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π...")
        loaded_count = rag.load_all_active_kbs()
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–∞–∑ –∑–Ω–∞–Ω–∏–π: {loaded_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {len(rag.vectorstores)}")
        for kb_id, vectorstore in rag.vectorstores.items():
            print(f"   - KB {kb_id}: {type(vectorstore)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–∞–∑ –∑–Ω–∞–Ω–∏–π: {len(rag.kb_metadata)}")
        for kb_id, metadata in rag.kb_metadata.items():
            print(f"   - KB {kb_id}: {metadata}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        if rag.vectorstores:
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
            try:
                results = rag.search_across_kbs("—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", k=3)
                print(f"   ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                for i, doc in enumerate(results[:2]):
                    print(f"     {i+1}. {doc.page_content[:100]}...")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        
        return loaded_count > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RAG: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_rag_loading_final()
    if success:
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    else:
        print("‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")












