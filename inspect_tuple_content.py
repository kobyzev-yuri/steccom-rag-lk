#!/usr/bin/env python3
"""
Inspect Tuple Content - Check what's inside the tuple pickle files
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Tuple - –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ tuple pickle —Ñ–∞–π–ª–æ–≤
"""

import pickle
from pathlib import Path

def inspect_tuple_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ tuple –≤ pickle —Ñ–∞–π–ª–∞—Ö"""
    
    vectorstore_paths = [
        "kb_admin/data/knowledge_bases/vectorstore_1",
        "kb_admin/data/knowledge_bases/vectorstore_2", 
        "kb_admin/data/knowledge_bases/vectorstore_3"
    ]
    
    for vectorstore_path in vectorstore_paths:
        pkl_file = Path(vectorstore_path) / "index.pkl"
        
        if pkl_file.exists():
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {pkl_file}")
            
            try:
                with open(pkl_file, 'rb') as f:
                    data = pickle.load(f)
                
                print(f"   –¢–∏–ø: {type(data)}")
                print(f"   –î–ª–∏–Ω–∞ tuple: {len(data)}")
                
                for i, item in enumerate(data):
                    print(f"   –≠–ª–µ–º–µ–Ω—Ç {i}: {type(item)}")
                    if hasattr(item, '__dict__'):
                        print(f"     –ê—Ç—Ä–∏–±—É—Ç—ã: {list(item.__dict__.keys())}")
                    elif hasattr(item, 'shape'):
                        print(f"     –§–æ—Ä–º–∞: {item.shape}")
                    else:
                        print(f"     –ó–Ω–∞—á–µ–Ω–∏–µ: {str(item)[:100]}...")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

if __name__ == "__main__":
    inspect_tuple_content()












