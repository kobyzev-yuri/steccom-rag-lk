#!/usr/bin/env bash
set -euo pipefail

# =============================================================================
# –°–¢–≠–ö–ö–û–ú - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏
# STECCOM - Universal Service Management Script
# =============================================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
declare -A SERVICES=(
    ["api"]="8000:FastAPI Billing API"
    ["wiki"]="8080:MediaWiki"
    ["kb_admin"]="8502:KB Admin (Knowledge Base Builder)"
    ["streamlit"]="8501:Streamlit Main App"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker
DOCKER_CONTAINER="steccom-mediawiki"
DOCKER_IMAGE="mediawiki:1.39"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo -e "${PURPLE}üöÄ $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ ! -d ".venv" ]; then
        log_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ .venv –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        log_info "–°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: python3 -m venv .venv"
        return 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service_name=$2
    
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        log_success "$service_name —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $port"
        return 0
    else
        log_warning "$service_name –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $port"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–∞
check_http_service() {
    local url=$1
    local service_name=$2
    local timeout=${3:-5}
    
    if curl -s --max-time $timeout "$url" >/dev/null 2>&1; then
        log_success "$service_name –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $url"
        return 0
    else
        log_warning "$service_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $url"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_docker_container() {
    local container_name=$1
    
    if docker ps --format "table {{.Names}}" | grep -q "^${container_name}$"; then
        log_success "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –∑–∞–ø—É—â–µ–Ω"
        return 0
    else
        log_warning "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–∏—Å–∞
start_api() {
    log_info "–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–∏—Å–∞..."
    
    if check_port 8000 "FastAPI"; then
        log_info "FastAPI —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    source .venv/bin/activate
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ ! -f ".api_deps_installed" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π API..."
        pip install -r requirements-api.txt
        touch .api_deps_installed
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    nohup python api/run_api.py > logs/api.log 2>&1 &
    local api_pid=$!
    echo $api_pid > .api.pid
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 3
    
    if check_http_service "http://localhost:8000/health" "FastAPI"; then
        log_success "FastAPI –∑–∞–ø—É—â–µ–Ω (PID: $api_pid)"
        return 0
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å FastAPI"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ MediaWiki
start_wiki() {
    log_info "–ó–∞–ø—É—Å–∫ MediaWiki..."
    
    if check_docker_container "$DOCKER_CONTAINER"; then
        log_info "MediaWiki —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ ! -f "mediawiki/LocalSettings.php" ]; then
        log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MediaWiki –Ω–µ –Ω–∞–π–¥–µ–Ω: mediawiki/LocalSettings.php"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p mediawiki_data
    mkdir -p mediawiki_db_persistent
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    docker run -d \
        --name "$DOCKER_CONTAINER" \
        -p 8080:80 \
        -v "$(pwd)/mediawiki_data:/var/www/html/images" \
        -v "$(pwd)/mediawiki_db_persistent:/var/www/html/data" \
        -v "$(pwd)/mediawiki/LocalSettings.php:/var/www/html/LocalSettings.php:ro" \
        --restart unless-stopped \
        "$DOCKER_IMAGE"
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ MediaWiki..."
    sleep 10
    
    if check_http_service "http://localhost:8080" "MediaWiki"; then
        log_success "MediaWiki –∑–∞–ø—É—â–µ–Ω"
        return 0
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MediaWiki"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ KB Admin
start_kb_admin() {
    log_info "–ó–∞–ø—É—Å–∫ KB Admin..."
    
    if check_port 8502 "KB Admin"; then
        log_info "KB Admin —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    source .venv/bin/activate
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é KB Admin
    cd kb_admin
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ ! -f ".kb_deps_installed" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π KB Admin..."
        pip install -r requirements.txt
        touch .kb_deps_installed
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p logs
    mkdir -p temp
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    nohup streamlit run app.py --server.port 8502 --server.address 0.0.0.0 > ../logs/kb_admin.log 2>&1 &
    local kb_pid=$!
    echo $kb_pid > ../.kb_admin.pid
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
    cd ..
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    if check_http_service "http://localhost:8502" "KB Admin"; then
        log_success "KB Admin –∑–∞–ø—É—â–µ–Ω (PID: $kb_pid)"
        return 0
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å KB Admin"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ Streamlit Main App
start_streamlit() {
    log_info "–ó–∞–ø—É—Å–∫ Streamlit Main App..."
    
    if check_port 8501 "Streamlit"; then
        log_info "Streamlit —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    source .venv/bin/activate
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ ! -f ".streamlit_deps_installed" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Streamlit..."
        pip install -r requirements.txt
        touch .streamlit_deps_installed
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p logs
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    nohup streamlit run app.py --server.port 8501 --server.address 0.0.0.0 > logs/streamlit.log 2>&1 &
    local streamlit_pid=$!
    echo $streamlit_pid > .streamlit.pid
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    if check_http_service "http://localhost:8501" "Streamlit"; then
        log_success "Streamlit –∑–∞–ø—É—â–µ–Ω (PID: $streamlit_pid)"
        return 0
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Streamlit"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_all_services() {
    log_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "=================================="
    
    local all_running=true
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if ! check_http_service "http://localhost:8000/health" "FastAPI"; then
        all_running=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MediaWiki
    if ! check_http_service "http://localhost:8080" "MediaWiki"; then
        all_running=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º KB Admin
    if ! check_http_service "http://localhost:8502" "KB Admin"; then
        all_running=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Streamlit
    if ! check_http_service "http://localhost:8501" "Streamlit"; then
        all_running=false
    fi
    
    echo ""
    if [ "$all_running" = true ]; then
        log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç!"
        show_service_urls
    else
        log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
    fi
    
    return $([ "$all_running" = true ] && echo 0 || echo 1)
}

# –ü–æ–∫–∞–∑–∞—Ç—å URL —Å–µ—Ä–≤–∏—Å–æ–≤
show_service_urls() {
    echo ""
    log_header "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "üåê FastAPI Billing API: http://localhost:8000"
    echo "   üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
    echo "   üîß ReDoc: http://localhost:8000/redoc"
    echo "   üíö Health: http://localhost:8000/health"
    echo ""
    echo "üìö MediaWiki: http://localhost:8080"
    echo "   üë§ –õ–æ–≥–∏–Ω: admin / Admin123456789"
    echo ""
    echo "üß† KB Admin (Knowledge Base Builder): http://localhost:8502"
    echo ""
    echo "üéØ Streamlit Main App: http://localhost:8501"
    echo ""
}

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
start_all_services() {
    log_header "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –°–¢–≠–ö–ö–û–ú"
    echo "================================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! check_dependencies; then
        log_error "–ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p logs
    
    local failed_services=()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if ! start_wiki; then
        failed_services+=("MediaWiki")
    fi
    
    if ! start_api; then
        failed_services+=("FastAPI")
    fi
    
    if ! start_kb_admin; then
        failed_services+=("KB Admin")
    fi
    
    if ! start_streamlit; then
        failed_services+=("Streamlit")
    fi
    
    echo ""
    if [ ${#failed_services[@]} -eq 0 ]; then
        log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!"
        show_service_urls
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ${failed_services[*]}"
        return 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_all_services() {
    log_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "========================"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã
    for pid_file in .api.pid .kb_admin.pid .streamlit.pid; do
        if [ -f "$pid_file" ]; then
            local pid=$(cat "$pid_file")
            if kill -0 "$pid" 2>/dev/null; then
                log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid ($pid_file)"
                kill "$pid"
                rm -f "$pid_file"
            fi
        fi
    done
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if docker ps --format "table {{.Names}}" | grep -q "^${DOCKER_CONTAINER}$"; then
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $DOCKER_CONTAINER"
        docker stop "$DOCKER_CONTAINER"
        docker rm "$DOCKER_CONTAINER"
    fi
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
restart_all_services() {
    log_header "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "=========================="
    
    stop_all_services
    sleep 2
    start_all_services
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    local service=${1:-"all"}
    
    case "$service" in
        "api")
            if [ -f "logs/api.log" ]; then
                tail -f logs/api.log
            else
                log_error "–õ–æ–≥ —Ñ–∞–π–ª API –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        "kb_admin")
            if [ -f "logs/kb_admin.log" ]; then
                tail -f logs/kb_admin.log
            else
                log_error "–õ–æ–≥ —Ñ–∞–π–ª KB Admin –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        "streamlit")
            if [ -f "logs/streamlit.log" ]; then
                tail -f logs/streamlit.log
            else
                log_error "–õ–æ–≥ —Ñ–∞–π–ª Streamlit –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        "all")
            log_info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
            if [ -f "logs/api.log" ]; then
                echo "=== API LOGS ==="
                tail -n 10 logs/api.log
            fi
            if [ -f "logs/kb_admin.log" ]; then
                echo "=== KB ADMIN LOGS ==="
                tail -n 10 logs/kb_admin.log
            fi
            if [ -f "logs/streamlit.log" ]; then
                echo "=== STREAMLIT LOGS ==="
                tail -n 10 logs/streamlit.log
            fi
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service"
            log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: api, kb_admin, streamlit, all"
            ;;
    esac
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
–°–¢–≠–ö–ö–û–ú - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–æ–ø—Ü–∏–∏]

–ö–æ–º–∞–Ω–¥—ã:
  start           –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
  stop            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
  restart         –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
  status          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  check           –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ (—Ç–æ –∂–µ —á—Ç–æ status)
  logs [—Å–µ—Ä–≤–∏—Å]   –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ (api, kb_admin, streamlit, all)
  help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–°–µ—Ä–≤–∏—Å—ã:
  üåê FastAPI Billing API (–ø–æ—Ä—Ç 8000)
  üìö MediaWiki (–ø–æ—Ä—Ç 8080)
  üß† KB Admin - Knowledge Base Builder (–ø–æ—Ä—Ç 8502)
  üéØ Streamlit Main App (–ø–æ—Ä—Ç 8501)

–ü—Ä–∏–º–µ—Ä—ã:
  $0 start                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
  $0 status                   # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  $0 logs api                 # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ API
  $0 restart                  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã

EOF
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=${1:-"help"}
    
    case "$command" in
        "start")
            start_all_services
            ;;
        "stop")
            stop_all_services
            ;;
        "restart")
            restart_all_services
            ;;
        "status"|"check")
            check_all_services
            ;;
        "logs")
            show_logs "$2"
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"

