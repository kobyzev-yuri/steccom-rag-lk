#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB Admin
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KB Admin
sys.path.insert(0, str(Path(__file__).parent / "kb_admin"))

from modules.core.smart_document_agent import SmartLibrarian
from modules.core.knowledge_manager import KnowledgeBaseManager
from modules.documents.pdf_processor import PDFProcessor

def test_docx_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX —Ñ–∞–π–ª–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    kb_manager = KnowledgeBaseManager()
    pdf_processor = PDFProcessor()
    smart_librarian = SmartLibrarian(kb_manager, pdf_processor)
    
    # –ü—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É (–±–µ—Ä–µ–º –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤)
    candidates = [
        Path("data/uploads/–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —É—Å–ª—É–≥–∏ –ú2–ú –ò—Ä–∏–¥–∏—É–º (—é—Ä.–ª–∏—Ü–∞)-2020-3.docx"),
        Path("data/uploads/Iridium Short Burst Data Service Best Practices Guide Draft 091410_1.docx"),
        Path("data/uploads/LinuxFAQ.docx"),
    ]
    docx_file = next((p for p in candidates if p.exists()), candidates[0])
    
    if not docx_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {docx_file}")
        return False
    
    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {docx_file.name}")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        analysis = smart_librarian.analyze_document(docx_file)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   - –§–æ—Ä–º–∞—Ç: {analysis.get('format_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {analysis.get('format_supported', False)}")
        print(f"   - –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {analysis.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   - –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analysis.get('content_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.get('suggested_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
        text_preview = analysis.get('text_preview', '')
        if text_preview:
            print(f"üìù –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {text_preview[:200]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–º–Ω—É—é –≤—ã–∂–∏–º–∫—É
        smart_summary = analysis.get('smart_summary', '')
        if smart_summary:
            print(f"üß† –£–º–Ω–∞—è –≤—ã–∂–∏–º–∫–∞:")
            print(f"   {smart_summary[:300]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ KB
        kb_suggestion = analysis.get('suggested_kb', {})
        if kb_suggestion:
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ KB:")
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {kb_suggestion.get('suggested_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {kb_suggestion.get('suggested_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {kb_suggestion.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DOCX: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_docx_processing()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)
