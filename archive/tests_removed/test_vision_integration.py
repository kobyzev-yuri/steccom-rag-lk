#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Vision –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å LLaVA-Phi3
"""

import sys
import os
sys.path.append('/mnt/ai/cnn/steccom')

from modules.documents.vision_processor import VisionProcessor
from modules.documents.ocr_processor import OCRProcessor

def test_vision_processor():
    """–¢–µ—Å—Ç Vision –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vision –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    vision = VisionProcessor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏...")
    model_status = vision.check_model_availability()
    
    if model_status['available']:
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_status['model_name']} –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(model_status['all_models'])}")
    else:
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {model_status.get('message', 'Unknown error')}")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_status.get('all_models', [])}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    print("\nüîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Vision —Å–∏—Å—Ç–µ–º–µ:")
    vision_info = vision.get_vision_info()
    for key, value in vision_info.items():
        print(f"  {key}: {value}")
    
    return True

def test_ocr_processor():
    """–¢–µ—Å—Ç OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    ocr = OCRProcessor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± OCR
    print("\nüîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± OCR —Å–∏—Å—Ç–µ–º–µ:")
    ocr_info = ocr.get_ocr_info()
    for key, value in ocr_info.items():
        print(f"  {key}: {value}")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = ocr.get_supported_formats()
    print(f"\nüìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}")
    
    return 'error' not in ocr_info

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Vision –∏ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç Vision
    vision_ok = test_vision_processor()
    
    # –¢–µ—Å—Ç OCR
    ocr_ok = test_ocr_processor()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"üëÅÔ∏è Vision (LLaVA-Phi3): {'‚úÖ –ì–æ—Ç–æ–≤' if vision_ok else '‚ùå –ù–µ –≥–æ—Ç–æ–≤'}")
    print(f"üîç OCR (Tesseract): {'‚úÖ –ì–æ—Ç–æ–≤' if ocr_ok else '‚ùå –ù–µ –≥–æ—Ç–æ–≤'}")
    
    if vision_ok and ocr_ok:
        print("\nüéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  - Vision –ª—É—á—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("  - OCR –ª—É—á—à–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
        print("  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        if not vision_ok:
            print("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LLaVA-Phi3: ollama pull llava-phi3:latest")
        if not ocr_ok:
            print("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract: sudo apt install tesseract-ocr tesseract-ocr-rus")

if __name__ == "__main__":
    main()


