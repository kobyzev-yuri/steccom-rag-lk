#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
"""

import sys
import os
import time
import requests
import json

def test_simple_prompt():
    """–¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    print("üöÄ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–æ–º–ø—Ç")
    print("-" * 40)
    
    url = "http://localhost:11434/v1/chat/completions"
    
    payload = {
        "model": "qwen2.5:1.5b",
        "messages": [{"role": "user", "content": "–ù–∞–ø–∏—à–∏ SQL –∑–∞–ø—Ä–æ—Å: SELECT * FROM users"}],
        "temperature": 0.1,
        "max_tokens": 100
    }
    
    start_time = time.time()
    try:
        response = requests.post(url, json=payload, timeout=15)
        duration = time.time() - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –û—Ç–≤–µ—Ç: {content[:100]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_medium_prompt():
    """–¢–µ—Å—Ç —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    print("\nüìä –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç")
    print("-" * 40)
    
    url = "http://localhost:11434/v1/chat/completions"
    
    prompt = """–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –∑–∞ 2025 –≥–æ–¥.

–¢–∞–±–ª–∏—Ü—ã:
- billing_records (billing_date, usage_amount, agreement_id)
- agreements (user_id, agreement_id)  
- users (company, user_id)

–ù—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–º–µ—Å—è—á–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –≤ 2025 –≥–æ–¥—É."""

    payload = {
        "model": "qwen2.5:1.5b",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.1,
        "max_tokens": 300
    }
    
    start_time = time.time()
    try:
        response = requests.post(url, json=payload, timeout=30)
        duration = time.time() - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìù SQL: {content[:200]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_complex_prompt():
    """–¢–µ—Å—Ç —Å–æ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)"""
    print("\nüî• –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ)")
    print("-" * 40)
    
    url = "http://localhost:11434/v1/chat/completions"
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    complex_prompt = """You are a SQLite expert for a satellite communications billing system. Generate a query for the following question: "–û—Ç—á–µ—Ç –æ —Ç—Ä–∞—Ñ–∏–∫–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –≤ 2025 –≥–æ–¥—É –ø–æ–º–µ—Å—è—á–Ω–æ".

CRITICAL RULES:
1. NEVER modify the user's question
2. If user mentions specific year/month, filter by that period
3. For traffic totals, include service_types.name and service_types.unit in SELECT
4. Group by service_type to avoid mixing different services
5. Use strftime('%Y-%m', billing_date) for monthly grouping

Database Schema:
- billing_records: billing_date, usage_amount, agreement_id, service_type_id
- agreements: user_id, agreement_id  
- users: company, user_id
- service_types: name, unit, service_type_id

Generate SQL query for monthly traffic by companies in 2025."""

    payload = {
        "model": "qwen2.5:1.5b",
        "messages": [{"role": "user", "content": complex_prompt}],
        "temperature": 0.1,
        "max_tokens": 500
    }
    
    start_time = time.time()
    try:
        response = requests.post(url, json=payload, timeout=60)
        duration = time.time() - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìù SQL: {content[:300]}...")
            
            if duration > 30:
                print(f"‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            elif duration > 10:
                print(f"‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º–æ: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            else:
                print(f"‚úÖ –ë—ã—Å—Ç—Ä–æ: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_ollama_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama")
    print("-" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            models = response.json().get('models', [])
            print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–¥–µ–ª–µ–π: {len(models)}")
            
            # –ò—â–µ–º –Ω–∞—à—É –º–æ–¥–µ–ª—å
            qwen_models = [m for m in models if 'qwen2.5:1.5b' in m.get('name', '')]
            if qwen_models:
                model = qwen_models[0]
                size_gb = model.get('size', 0) / (1024**3)
                print(f"‚úÖ –ú–æ–¥–µ–ª—å qwen2.5:1.5b –Ω–∞–π–¥–µ–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {size_gb:.1f} GB)")
            else:
                print("‚ùå –ú–æ–¥–µ–ª—å qwen2.5:1.5b –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")

if __name__ == "__main__":
    print(f"üßÆ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - {time.strftime('%H:%M:%S')}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    check_ollama_status()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    test_simple_prompt()
    test_medium_prompt()
    test_complex_prompt()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("- –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    print("- –ï—Å–ª–∏ –≤—Å–µ –º–µ–¥–ª–µ–Ω–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–µ")
    print("- –ï—Å–ª–∏ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
