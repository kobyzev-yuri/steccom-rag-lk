#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π -> –∞–Ω–∞–ª–∏–∑ Gemini -> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OCR
"""

import os
import sys
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "kb_admin"))

from kb_admin.modules.documents.vision_processor import VisionProcessor
from kb_admin.modules.core.smart_document_agent import SmartLibrarian
from kb_admin.modules.core.knowledge_manager import KnowledgeBaseManager
from kb_admin.modules.documents.pdf_processor import PDFProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_gemini_vision_chain():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç Gemini")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini...")
    vision_processor = VisionProcessor()
    availability = vision_processor.check_model_availability()
    
    if availability['available']:
        print(f"‚úÖ {availability['message']}")
    else:
        print(f"‚ùå {availability['message']}")
        return False
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\n2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    try:
        kb_manager = KnowledgeBaseManager()
        pdf_processor = PDFProcessor()
        smart_librarian = SmartLibrarian(kb_manager, pdf_processor)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # 3. –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
    print("\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Ñ–∞–π–ª–∞...")
    test_files = [
        "data/uploads/billmaster_7.pdf",
        "data/uploads/reg_07032015.pdf", 
        "data/uploads/reg_sbd.pdf"
    ]
    
    test_file = None
    for file_path in test_files:
        full_path = Path(__file__).parent / file_path
        if full_path.exists():
            test_file = full_path
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
            break
    
    if not test_file:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF
    print("\n4Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF...")
    try:
        extracted_images = smart_librarian._extract_images_from_pdf(test_file)
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        for i, img_path in enumerate(extracted_images):
            print(f"   üì∑ {i+1}. {img_path.name}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return False
    
    if not extracted_images:
        print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ PDF")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini...")
    successful_analyses = 0
    
    for i, image_path in enumerate(extracted_images):
        print(f"\n   üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {image_path.name}")
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            analysis_result = vision_processor.analyze_image_with_gemini(image_path)
            
            if analysis_result['success']:
                print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {analysis_result['analysis'][:100]}...")
                print(f"   ü§ñ –ú–æ–¥–µ–ª—å: {analysis_result['model']}")
                print(f"   üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {analysis_result['provider']}")
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                text_content = vision_processor.extract_text_from_image_gemini(image_path)
                if text_content and len(text_content) > 10:
                    print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_content[:100]}...")
                else:
                    print(f"   üìÑ –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                structure_result = vision_processor.analyze_document_structure(image_path)
                if structure_result['success']:
                    print(f"   üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {structure_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                successful_analyses += 1
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {successful_analyses}/{len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print("\n6Ô∏è‚É£ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    try:
        analysis = smart_librarian.analyze_document(test_file)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"üìÑ –§–∞–π–ª: {analysis['file_name']}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {analysis['file_size'] / 1024:.1f} KB")
        print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['category']}")
        print(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {analysis.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {analysis.get('image_count', 0)}")
        
        if analysis.get('gemini_analysis'):
            print(f"üîó –ê–Ω–∞–ª–∏–∑ –æ—Ç Gemini –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: {len(analysis['gemini_analysis'])} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç Gemini –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            
        if analysis.get('smart_summary'):
            print(f"üìã –ê–±—Å—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {len(analysis['smart_summary'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìã –ü—Ä–µ–≤—å—é –∞–±—Å—Ç—Ä–∞–∫—Ç–∞: {analysis['smart_summary'][:200]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False
    
    # 7. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if successful_analyses > 0:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ Gemini –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print(f"‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

def test_individual_components():
    """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("=" * 40)
    
    # –¢–µ—Å—Ç VisionProcessor
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç VisionProcessor...")
    try:
        vision_processor = VisionProcessor()
        print(f"‚úÖ VisionProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {vision_processor.gemini_model}")
        print(f"üîë API –∫–ª—é—á: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if vision_processor.proxy_api_key else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ VisionProcessor: {e}")
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    try:
        import requests
        headers = {
            "Authorization": f"Bearer {os.getenv('PROXYAPI_KEY')}",
            "Content-Type": "application/json"
        }
        response = requests.get(
            "https://api.proxyapi.ru/google/v1/models",
            headers=headers,
            timeout=10
        )
        if response.status_code == 200:
            print("‚úÖ ProxyAPI –¥–æ—Å—Ç—É–ø–µ–Ω")
            models = response.json()
            gemini_models = [m for m in models['data'] if 'gemini' in m['id'].lower()]
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini: {len(gemini_models)}")
            for model in gemini_models[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {model['id']}")
        else:
            print(f"‚ùå ProxyAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç Gemini")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('PROXYAPI_KEY')
    if not api_key:
        print("‚ùå PROXYAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export PROXYAPI_KEY=your_key")
        sys.exit(1)
    
    print(f"üîë API –∫–ª—é—á: {api_key[:10]}...{api_key[-4:]}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_individual_components()
    success = test_gemini_vision_chain()
    
    if success:
        print("\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
