#!/usr/bin/env python3
"""
Fix KB Documents - Create missing knowledge_documents records
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ KB - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π knowledge_documents
"""

import sqlite3
from pathlib import Path
from datetime import datetime

def fix_kb_documents():
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ knowledge_documents"""
    
    db_path = Path("kb_admin/kbs.db")
    
    if not db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ doc_id –∏–∑ document_chunks
        c.execute("SELECT DISTINCT doc_id FROM document_chunks ORDER BY doc_id")
        doc_ids = [row[0] for row in c.fetchall()]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(doc_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö doc_id –≤ document_chunks")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ doc_id –≤ knowledge_documents
        c.execute("SELECT id FROM knowledge_documents")
        existing_doc_ids = {row[0] for row in c.fetchall()}
        
        print(f"üìÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ knowledge_documents: {len(existing_doc_ids)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        now = datetime.now().isoformat()
        created_count = 0
        
        for doc_id in doc_ids:
            if doc_id not in existing_doc_ids:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                c.execute("""
                    SELECT content, metadata 
                    FROM document_chunks 
                    WHERE doc_id = ? 
                    ORDER BY chunk_index 
                    LIMIT 1
                """, (doc_id,))
                
                chunk_data = c.fetchone()
                if chunk_data:
                    content, metadata = chunk_data
                    
                    # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
                    import json
                    try:
                        meta_dict = json.loads(metadata) if metadata else {}
                        title = meta_dict.get('title', f'–î–æ–∫—É–º–µ–Ω—Ç {doc_id}')
                    except:
                        title = f'–î–æ–∫—É–º–µ–Ω—Ç {doc_id}'
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º kb_id –Ω–∞ –æ—Å–Ω–æ–≤–µ doc_id (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
                    # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if doc_id <= 7:
                        kb_id = 1  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
                    elif doc_id <= 14:
                        kb_id = 2  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    else:
                        kb_id = 3  # –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ knowledge_documents
                    c.execute('''
                        INSERT INTO knowledge_documents 
                        (id, kb_id, title, file_path, content_type, file_size, upload_date, processed, processing_status, metadata)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        doc_id,
                        kb_id,
                        title,
                        f"document_{doc_id}.pdf",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Ç–∏
                        "application/pdf",
                        0,  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
                        now,
                        1,  # –û–±—Ä–∞–±–æ—Ç–∞–Ω
                        "completed",
                        metadata
                    ))
                    
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {title} (KB: {kb_id})")
        
        conn.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ knowledge_documents")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        c.execute("SELECT COUNT(*) FROM knowledge_documents")
        total_docs = c.fetchone()[0]
        
        c.execute("SELECT kb_id, COUNT(*) FROM knowledge_documents GROUP BY kb_id")
        kb_stats = c.fetchall()
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        for kb_id, count in kb_stats:
            c.execute("SELECT name FROM knowledge_bases WHERE id = ?", (kb_id,))
            kb_name = c.fetchone()[0] if c.fetchone() else f"KB {kb_id}"
            print(f"   - {kb_name}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        conn.rollback()
        return False
        
    finally:
        conn.close()

if __name__ == "__main__":
    fix_kb_documents()












