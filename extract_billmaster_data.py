#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ billmaster_7.pdf –∏ —Å–æ–∑–¥–∞–Ω–∏—è JSON
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('kb_admin/modules')

def extract_pdf_text(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF"""
    try:
        import PyPDF2
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            text = ""
            for page in reader.pages:
                text += page.extract_text() + "\n"
            return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return ""

def analyze_with_gemini(image_path):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini"""
    try:
        import requests
        import base64
        
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(image_path, 'rb') as f:
            image_data = base64.b64encode(f.read()).decode()
        
        # API –∑–∞–ø—Ä–æ—Å –∫ ProxyAPI –¥–ª—è Gemini
        url = "https://api.proxyapi.ru/google/v1/models/gemini-2.0-flash:generateContent"
        headers = {
            "Authorization": "Bearer YOUR_API_KEY",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
            "Content-Type": "application/json"
        }
        
        payload = {
            "contents": [{
                "parts": [{
                    "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ–∫–∏ –µ–≥–æ."
                }, {
                    "inline_data": {
                        "mime_type": "image/png",
                        "data": image_data
                    }
                }]
            }],
            "generationConfig": {
                "temperature": 0.1,
                "maxOutputTokens": 1000
            }
        }
        
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code == 200:
            result = response.json()
            return result.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', '')
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ billmaster_7.pdf...")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    pdf_path = Path("data/uploads/billmaster_7.pdf")
    image1_path = Path("data/extracted_images/billmaster_7_page_1_img_1.png")
    image2_path = Path("data/extracted_images/billmaster_7_page_2_img_1.png")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not pdf_path.exists():
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        return
    
    print(f"‚úÖ PDF —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {pdf_path}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
    print("üìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF...")
    pdf_text = extract_pdf_text(pdf_path)
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pdf_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images_data = []
    
    if image1_path.exists():
        print("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1...")
        image1_analysis = analyze_with_gemini(image1_path)
        images_data.append({
            "image_name": "billmaster_7_page_1_img_1.png",
            "image_path": str(image1_path),
            "description": image1_analysis,
            "text_content": image1_analysis  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        })
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1 –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    if image2_path.exists():
        print("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2...")
        image2_analysis = analyze_with_gemini(image2_path)
        images_data.append({
            "image_name": "billmaster_7_page_2_img_1.png", 
            "image_path": str(image2_path),
            "description": image2_analysis,
            "text_content": image2_analysis  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        })
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2 –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    analysis_data = {
        "file_name": "billmaster_7.pdf",
        "file_path": str(pdf_path),
        "content_type": "application/pdf",
        "file_size": pdf_path.stat().st_size,
        "category": "–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
        "raw_ocr_text": pdf_text,
        "smart_summary": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–æ–≤ ¬´–ë–∏–ª–ª-–ú–∞—Å—Ç–µ—Ä¬ª –≤—ã–¥–∞–Ω –æ—Ä–≥–∞–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¢–µ—Å—Ç –ê–•–û ¬´II KC¬ª –≤ –ú–æ—Å–∫–≤–µ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: –û–°-3-–°–¢-0274. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å 27 —è–Ω–≤–∞—Ä—è 2010 –≥–æ–¥–∞ –ø–æ 27 —è–Ω–≤–∞—Ä—è 2011 –≥–æ–¥–∞.",
        "original_cleaned_text": pdf_text,
        "images": images_data,
        "suggested_kb": {
            "suggested_name": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
            "suggested_category": "–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", 
            "description": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
            "can_merge_with": [],
            "merge_reason": "",
            "confidence": 0.9,
            "recommendations": ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"]
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    output_file = "billmaster_7_analysis.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(analysis_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –¢–µ–∫—Å—Ç: {len(pdf_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images_data)}")
    print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {pdf_path.stat().st_size} –±–∞–π—Ç")

if __name__ == "__main__":
    main()
