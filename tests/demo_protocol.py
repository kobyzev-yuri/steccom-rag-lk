#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Knowledge Base
"""

import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from kb_test_protocol import (
    KBTestProtocol, 
    TestQuestion, 
    ModelResponse, 
    RelevanceAssessment,
    LEGACY_SBD_TEST_QUESTIONS
)
from datetime import datetime


def demo_protocol_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Knowledge Base")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    protocol = KBTestProtocol()
    print("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
    
    for i, question in enumerate(LEGACY_SBD_TEST_QUESTIONS, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: {question.question_text[:50]}...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ GPT-4o
        gpt4o_response = ModelResponse(
            model_name="gpt-4o",
            provider="proxyapi",
            response_text=f"–û—Ç–≤–µ—Ç GPT-4o –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ {question.category}",
            response_time=2.5 + i * 0.5,
            sources_found=1,
            sources_details=[{"source": "legacy_reglament_sbd.json", "relevance": 0.9}],
            timestamp=datetime.now().isoformat(),
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            input_tokens=0,
            output_tokens=0,
            total_tokens=0,
            tokens_per_second=0.0,
            cost_per_token=0.0,
            estimated_cost=0.0
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è GPT-4o
        gpt4o_assessment = RelevanceAssessment(
            accuracy_score=0.8 + i * 0.05,
            completeness_score=0.7 + i * 0.05,
            relevance_score=0.9 - i * 0.05,
            keywords_found=question.expected_keywords[:2],  # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keywords_missing=question.expected_keywords[2:],  # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
            overall_quality="good" if i % 2 == 0 else "excellent",
            human_notes=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è GPT-4o, –≤–æ–ø—Ä–æ—Å {i}"
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª
        test_id = protocol.add_test_entry(question, gpt4o_response, gpt4o_assessment)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç: {test_id}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ Qwen
        qwen_response = ModelResponse(
            model_name="qwen2.5:1.5b",
            provider="ollama",
            response_text=f"–û—Ç–≤–µ—Ç Qwen –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ {question.category}",
            response_time=1.2 + i * 0.3,
            sources_found=1,
            sources_details=[{"source": "legacy_reglament_sbd.json", "relevance": 0.7}],
            timestamp=datetime.now().isoformat(),
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            input_tokens=0,
            output_tokens=0,
            total_tokens=0,
            tokens_per_second=0.0,
            cost_per_token=0.0,
            estimated_cost=0.0
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è Qwen
        qwen_assessment = RelevanceAssessment(
            accuracy_score=0.6 + i * 0.05,
            completeness_score=0.5 + i * 0.05,
            relevance_score=0.7 - i * 0.05,
            keywords_found=question.expected_keywords[:1],  # Qwen –Ω–∞—Ö–æ–¥–∏—Ç –º–µ–Ω—å—à–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keywords_missing=question.expected_keywords[1:],
            overall_quality="fair" if i % 2 == 0 else "good",
            human_notes=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è Qwen, –≤–æ–ø—Ä–æ—Å {i}"
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª
        test_id = protocol.add_test_entry(question, qwen_response, qwen_assessment)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç: {test_id}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...")
    protocol_file = protocol.save_protocol()
    print(f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {protocol_file}")
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    print(f"\nüìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(protocol.get_test_summary())
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    report_file = protocol.export_detailed_report()
    print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol_file}")
    print(f"   ‚Ä¢ –û—Ç—á–µ—Ç: {report_file}")


if __name__ == "__main__":
    demo_protocol_usage()
