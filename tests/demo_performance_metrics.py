#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KB
"""

import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from kb_test_protocol import (
    KBTestProtocol, 
    TestQuestion, 
    ModelResponse, 
    RelevanceAssessment,
    LEGACY_SBD_TEST_QUESTIONS
)
from datetime import datetime


def demo_performance_metrics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Knowledge Base")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    protocol = KBTestProtocol()
    print("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_scenarios = [
        {
            "name": "GPT-4o (–±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π)",
            "model": "gpt-4o",
            "provider": "proxyapi",
            "response_time": 2.1,
            "accuracy": 0.9,
            "completeness": 0.85,
            "relevance": 0.9,
            "response_text": "–°–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É SBD, –∏—Å—Ö–æ–¥—è—â–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 340/1960 –±–∞–π—Ç, –∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–µ –±–æ–ª–µ–µ 270/1890 –±–∞–π—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."
        },
        {
            "name": "Qwen (–º–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)",
            "model": "qwen2.5:1.5b",
            "provider": "ollama",
            "response_time": 8.5,
            "accuracy": 0.7,
            "completeness": 0.6,
            "relevance": 0.75,
            "response_text": "–í —É—Å–ª—É–≥–µ SBD –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –∞ –≤—Ö–æ–¥—è—â–∏–µ —Ç–∞–∫–∂–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
        },
        {
            "name": "GPT-3.5 (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å)",
            "model": "gpt-3.5-turbo",
            "provider": "proxyapi",
            "response_time": 1.8,
            "accuracy": 0.75,
            "completeness": 0.7,
            "relevance": 0.8,
            "response_text": "–î–ª—è —É—Å–ª—É–≥–∏ SBD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π: –∏—Å—Ö–æ–¥—è—â–∏–µ –¥–æ 340/1960 –±–∞–π—Ç, –≤—Ö–æ–¥—è—â–∏–µ –¥–æ 270/1890 –±–∞–π—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."
        }
    ]
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    question = LEGACY_SBD_TEST_QUESTIONS[0]
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\n{i}. {scenario['name']}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {scenario['response_time']}—Å")
        print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {scenario['accuracy']:.1%}")
        print(f"   üìù –ü–æ–ª–Ω–æ—Ç–∞: {scenario['completeness']:.1%}")
        print(f"   üîó –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {scenario['relevance']:.1%}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        model_response = ModelResponse(
            model_name=scenario["model"],
            provider=scenario["provider"],
            response_text=scenario["response_text"],
            response_time=scenario["response_time"],
            sources_found=1,
            sources_details=[{"source": "legacy_reglament_sbd.json", "relevance": 0.8}],
            timestamp=datetime.now().isoformat(),
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            input_tokens=0,
            output_tokens=0,
            total_tokens=0,
            tokens_per_second=0.0,
            cost_per_token=0.0,
            estimated_cost=0.0
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        keywords_found = [kw for kw in question.expected_keywords if kw.lower() in scenario["response_text"].lower()]
        keywords_missing = [kw for kw in question.expected_keywords if kw.lower() not in scenario["response_text"].lower()]
        
        avg_score = (scenario["accuracy"] + scenario["completeness"] + scenario["relevance"]) / 3
        if avg_score >= 0.8:
            overall_quality = "excellent"
        elif avg_score >= 0.6:
            overall_quality = "good"
        elif avg_score >= 0.4:
            overall_quality = "fair"
        else:
            overall_quality = "poor"
        
        relevance_assessment = RelevanceAssessment(
            accuracy_score=scenario["accuracy"],
            completeness_score=scenario["completeness"],
            relevance_score=scenario["relevance"],
            keywords_found=keywords_found,
            keywords_missing=keywords_missing,
            overall_quality=overall_quality,
            human_notes=f"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}",
            # –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            efficiency_score=0.0,
            cost_effectiveness=0.0
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª
        test_id = protocol.add_test_entry(question, model_response, relevance_assessment)
        print(f"   ‚úÖ –¢–µ—Å—Ç {test_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"   üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"      ‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {model_response.input_tokens}")
        print(f"      ‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {model_response.output_tokens}")
        print(f"      ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {model_response.total_tokens}")
        print(f"      ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {model_response.tokens_per_second:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å")
        print(f"      ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${model_response.estimated_cost:.6f}")
        print(f"      ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {relevance_assessment.efficiency_score:.4f}")
        print(f"      ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {relevance_assessment.cost_effectiveness:.4f}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...")
    protocol_file = protocol.save_protocol()
    print(f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {protocol_file}")
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    print(f"\nüìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(protocol.get_test_summary())
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    report_file = protocol.export_detailed_report()
    print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol_file}")
    print(f"   ‚Ä¢ –û—Ç—á–µ—Ç: {report_file}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    stats = protocol._calculate_summary_statistics()
    
    print(f"   üèÜ –õ—É—á—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {stats['average_tokens_per_second']:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å")
    print(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${stats['total_estimated_cost']:.6f}")
    print(f"   ‚ö° –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['average_efficiency_score']:.4f}")
    print(f"   üíé –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['average_cost_effectiveness']:.4f}")


if __name__ == "__main__":
    demo_performance_metrics()
