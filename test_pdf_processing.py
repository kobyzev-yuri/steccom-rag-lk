#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –≤ KB Admin
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))
sys.path.append(str(Path(__file__).parent / "kb_admin"))

from kb_admin.modules.documents.pdf_processor import PDFProcessor
from kb_admin.modules.core.knowledge_manager import KnowledgeBaseManager

def test_pdf_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –≤ KB Admin")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    pdf_processor = PDFProcessor("data/uploads")
    kb_manager = KnowledgeBaseManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
    test_pdf = Path("data/uploads/billmaster_7.pdf")
    if not test_pdf.exists():
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π PDF –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_pdf}")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PDF: {test_pdf}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...")
    try:
        text = pdf_processor.extract_text(str(test_pdf))
        if text and len(text.strip()) > 0:
            print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {text[:200]}...")
        else:
            print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    try:
        metadata = pdf_processor.get_pdf_metadata(str(test_pdf))
        if metadata:
            print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
            for key, value in metadata.items():
                print(f"   {key}: {value}")
        else:
            print("‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ó
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    try:
        kb_id = kb_manager.create_knowledge_base(
            name="–¢–µ—Å—Ç–æ–≤–∞—è –ë–ó –¥–ª—è billmaster_7",
            description="–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF",
            category="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            created_by="test_script"
        )
        print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        with open(test_pdf, 'rb') as f:
            file_content = f.read()
        
        class MockUploadedFile:
            def __init__(self, name, content):
                self.name = name
                self._content = content
            
            def getvalue(self):
                return self._content
        
        mock_file = MockUploadedFile(test_pdf.name, file_content)
        
        result = pdf_processor.process_pdf(mock_file, kb_id, "billmaster_7")
        
        if result['success']:
            print("‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–ó
            doc_id = kb_manager.add_document(
                kb_id,
                result['title'],
                result['file_path'],
                result['content_type'],
                result['file_size'],
                result['metadata']
            )
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–ó —Å ID: {doc_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            kb_manager.update_document_status(doc_id, True, 'completed')
            print("‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        docs = kb_manager.get_documents(kb_id)
        print(f"‚úÖ –í –ë–ó —Ç–µ–ø–µ—Ä—å {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
        return False

if __name__ == "__main__":
    success = test_pdf_processing()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ KB Admin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)



