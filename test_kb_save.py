#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É: –∞–Ω–∞–ª–∏–∑ -> –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ KB -> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
"""

import os
import sys
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "kb_admin"))

from kb_admin.modules.core.smart_document_agent import SmartLibrarian
from kb_admin.modules.core.knowledge_manager import KnowledgeBaseManager
from kb_admin.modules.documents.pdf_processor import PDFProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_kb_save_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ KB")
    print("=" * 60)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    try:
        kb_manager = KnowledgeBaseManager()
        pdf_processor = PDFProcessor()
        smart_librarian = SmartLibrarian(kb_manager, pdf_processor)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # 2. –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Ñ–∞–π–ª–∞...")
    test_files = [
        "data/uploads/billmaster_7.pdf",
        "data/uploads/reg_07032015.pdf", 
        "data/uploads/reg_sbd.pdf"
    ]
    
    test_file = None
    for file_path in test_files:
        full_path = Path(__file__).parent / file_path
        if full_path.exists():
            test_file = full_path
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
            break
    
    if not test_file:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    print("\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    try:
        analysis = smart_librarian.analyze_document(test_file)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"üìÑ –§–∞–π–ª: {analysis['file_name']}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {analysis['file_size'] / 1024:.1f} KB")
        print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['category']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è KB
        if 'suggested_kb' in analysis:
            kb_suggestion = analysis['suggested_kb']
            print(f"\nüóÇÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ KB:")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {kb_suggestion.get('suggested_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {kb_suggestion.get('suggested_category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {kb_suggestion.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {kb_suggestion.get('confidence', 0):.1%}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            merge_info = kb_suggestion.get('merge_with_existing', {})
            if merge_info.get('can_merge', False):
                print(f"   üîó –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å KB ID {merge_info.get('existing_kb_id')}")
                print(f"   üí≠ –ü—Ä–∏—á–∏–Ω–∞: {merge_info.get('merge_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            else:
                print(f"   üÜï –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é KB")
        else:
            print("‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ KB –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        required_fields = ['smart_summary', 'original_cleaned_text', 'images']
        missing_fields = []
        
        for field in required_fields:
            if field not in analysis or not analysis[field]:
                missing_fields.append(field)
        
        if missing_fields:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {', '.join(missing_fields)}")
        else:
            print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
            print(f"   üìã –ê–±—Å—Ç—Ä–∞–∫—Ç: {len(analysis.get('smart_summary', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(analysis.get('original_cleaned_text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(analysis.get('images', []))}")
            
            if analysis.get('images'):
                for i, img in enumerate(analysis['images']):
                    print(f"      üì∑ {i+1}. {img.get('image_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    if img.get('description'):
                        print(f"         üìù –û–ø–∏—Å–∞–Ω–∏–µ Gemini: {len(img['description'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def test_kb_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è KB"""
    
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è KB...")
    try:
        kb_manager = KnowledgeBaseManager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö KB
        existing_kbs = kb_manager.get_knowledge_bases(active_only=True)
        print(f"üìö –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö KB: {len(existing_kbs)}")
        
        for kb in existing_kbs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - ID {kb['id']}: {kb['name']} ({kb['category']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π KB
        test_kb_name = "–¢–µ—Å—Ç–æ–≤–∞—è KB –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        test_kb_category = "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
        test_kb_description = "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
        
        print(f"\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π KB...")
        kb_id = kb_manager.create_knowledge_base(
            name=test_kb_name,
            description=test_kb_description,
            category=test_kb_category,
            created_by="Test Script"
        )
        
        print(f"‚úÖ KB —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ KB —Å–æ–∑–¥–∞–ª–∞—Å—å
        created_kb = kb_manager.get_knowledge_base(kb_id)
        if created_kb:
            print(f"‚úÖ KB —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {created_kb['name']}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é KB
            if kb_manager.delete_knowledge_base(kb_id):
                print(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è KB —É–¥–∞–ª–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é KB")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é KB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KB: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('PROXYAPI_KEY')
    if not api_key:
        print("‚ùå PROXYAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export PROXYAPI_KEY=your_key")
        sys.exit(1)
    
    print(f"üîë API –∫–ª—é—á: {api_key[:10]}...{api_key[-4:]}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success1 = test_kb_save_functionality()
    success2 = test_kb_creation()
    
    if success1 and success2:
        print("\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ KB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(0)
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
