"""
AI Billing System - Simplified Application
Focused on using Knowledge Bases through RAG system
"""

import streamlit as st
import logging
from logging.handlers import RotatingFileHandler
import os
import sys

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import core modules
from modules.core import init_db, verify_login
from modules.rag.multi_kb_rag import MultiKBRAG

# Configure application logging
def _configure_logging() -> None:
    """Configure logging for the application"""
    try:
        os.makedirs("logs", exist_ok=True)
        log_path = os.path.join("logs", "ai_billing.log")
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        # Avoid adding multiple handlers on reruns
        if not any(isinstance(h, RotatingFileHandler) for h in logger.handlers):
            fh = RotatingFileHandler(log_path, maxBytes=2_000_000, backupCount=3, encoding='utf-8')
            fh.setLevel(logging.INFO)
            fmt = logging.Formatter('%(asctime)s [%(levelname)s] %(name)s: %(message)s')
            fh.setFormatter(fmt)
            logger.addHandler(fh)

        if not any(isinstance(h, logging.StreamHandler) and not isinstance(h, RotatingFileHandler) for h in logger.handlers):
            ch = logging.StreamHandler()
            ch.setLevel(logging.INFO)
            ch.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(name)s: %(message)s'))
            logger.addHandler(ch)
    except Exception as e:
        print(f"Logging configuration failed: {e}")


def initialize_session_state():
    """Initialize session state variables"""
    # Authentication state
    st.session_state.setdefault('authenticated', False)
    st.session_state.setdefault('username', None)
    st.session_state.setdefault('role', None)
    st.session_state.setdefault('company', None)
    st.session_state.setdefault('is_staff', False)
    
    # RAG system state
    st.session_state.setdefault('rag_initialized', False)
    st.session_state.setdefault('rag_initializing', False)
    st.session_state.setdefault('multi_rag', None)
    st.session_state.setdefault('kb_loaded_count', 0)
    st.session_state.setdefault('loaded_kbs_info', [])
    
    # UI state
    st.session_state.setdefault('user_question', "")
    st.session_state.setdefault('rag_response', "")


def initialize_rag_system():
    """Initialize RAG system for Knowledge Base access"""
    if st.session_state.get('rag_initializing'):
        return

    if not st.session_state.rag_initialized:
        try:
            st.session_state.rag_initializing = True
            
            # Initialize Multi-KB RAG
            st.session_state.multi_rag = MultiKBRAG()
            
            # Set default RAG model
            if 'rag_assistant_model' not in st.session_state:
                st.session_state.rag_assistant_model = 'qwen2.5:1.5b'
            
            # Apply the selected RAG model
            try:
                st.session_state.multi_rag.set_chat_backend("ollama", st.session_state.rag_assistant_model)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å RAG –º–æ–¥–µ–ª—å: {e}")
            
            # Load active knowledge bases
            try:
                loaded_count = st.session_state.multi_rag.load_all_active_kbs()
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ë–ó: {loaded_count}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ë–ó: {e}")
            
            # Get available KBs info
            available_kbs = st.session_state.multi_rag.get_available_kbs()
            st.session_state.kb_loaded_count = len(available_kbs)
            st.session_state.loaded_kbs_info = available_kbs
            st.session_state.rag_initialized = True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
        finally:
            st.session_state.rag_initializing = False


def login_page():
    """Render login page"""
    st.title("üõ∞Ô∏è –°–¢–≠–ö–ö–û–ú - AI Billing System")
    st.markdown("### –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submit_button = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if submit_button:
            if username and password:
                success, role, company = verify_login(username, password)
                if success:
                    st.session_state.authenticated = True
                    st.session_state.username = username
                    st.session_state.role = role
                    st.session_state.company = company
                    st.session_state.is_staff = (role == 'staff')
                    st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")


def render_rag_interface():
    """Render RAG interface for Knowledge Base queries"""
    st.title("ü§ñ AI Assistant - –†–∞–±–æ—Ç–∞ —Å –ë–∞–∑–∞–º–∏ –ó–Ω–∞–Ω–∏–π")
    
    # System status
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    if st.session_state.get('rag_initialized'):
        st.sidebar.success("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        st.sidebar.warning("‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if st.session_state.get('kb_loaded_count', 0) > 0:
        st.sidebar.success(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ó: {st.session_state.kb_loaded_count}")
        
        if st.session_state.get('loaded_kbs_info'):
            with st.sidebar.expander("üìã –î–µ—Ç–∞–ª–∏ –ë–ó"):
                for kb in st.session_state.loaded_kbs_info:
                    st.write(f"‚Ä¢ {kb}")
    else:
        st.sidebar.warning("üìö –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # RAG query interface
    st.markdown("### üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –±–∞–∑–∞–º –∑–Ω–∞–Ω–∏–π")
    
    # Model selection
    col1, col2 = st.columns([2, 1])
    with col1:
        model_options = ['qwen2.5:1.5b', 'qwen3:8b', 'llama3.1:8b']
        selected_model = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è RAG:",
            model_options,
            index=model_options.index(st.session_state.get('rag_assistant_model', 'qwen2.5:1.5b'))
        )
        
        if selected_model != st.session_state.get('rag_assistant_model'):
            st.session_state.rag_assistant_model = selected_model
            if st.session_state.multi_rag:
                try:
                    st.session_state.multi_rag.set_chat_backend("ollama", selected_model)
                    st.success(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏: {e}")
    
    with col2:
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ë–ó"):
            if st.session_state.multi_rag:
                try:
                    loaded_count = st.session_state.multi_rag.load_all_active_kbs()
                    st.success(f"‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ó: {loaded_count}")
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ë–ó: {e}")
    
    # Question input
    user_question = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.get('user_question', ''),
        height=100,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å –ø–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        ask_button = st.button("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", type="primary")
    
    # Process question
    if ask_button and user_question:
        if not st.session_state.rag_initialized or not st.session_state.multi_rag:
            st.error("RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            with st.spinner("–ò—â—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π..."):
                try:
                    response = st.session_state.multi_rag.query(user_question)
                    st.session_state.rag_response = response
                    st.session_state.user_question = user_question
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # Display response
    if st.session_state.get('rag_response'):
        st.markdown("### üìù –û—Ç–≤–µ—Ç:")
        st.markdown(st.session_state.rag_response)
        
        # Clear response button
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç"):
            st.session_state.rag_response = ""
            st.session_state.user_question = ""
            st.rerun()


def main():
    """Main application function"""
    # Configure logging
    _configure_logging()
    
    # Initialize database
    init_db()
    
    # Initialize session state
    initialize_session_state()
    
    # Hide Streamlit main menu
    st.markdown("""
    <style>
    [data-testid="stMainMenu"] {visibility: hidden;}
    #MainMenu {visibility: hidden;}
    </style>
    """, unsafe_allow_html=True)
    
    # Initialize RAG system
    if not st.session_state.rag_initialized:
        initialize_rag_system()
    
    # Check authentication
    if not st.session_state.authenticated:
        login_page()
        return
    
    # Main interface
    st.sidebar.title(f"üëã {st.session_state.username}")
    st.sidebar.markdown(f"**–†–æ–ª—å:** {st.session_state.role}")
    st.sidebar.markdown(f"**–ö–æ–º–ø–∞–Ω–∏—è:** {st.session_state.company}")
    
    # Render RAG interface
    render_rag_interface()
    
    # Logout button
    if st.sidebar.button("üö™ –í—ã–π—Ç–∏"):
        keys_to_clear = [
            'authenticated', 'username', 'role', 'company', 'is_staff',
            'user_question', 'rag_response'
        ]
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()


if __name__ == "__main__":
    main()