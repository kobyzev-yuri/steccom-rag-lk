#!/usr/bin/env python3
"""
–¢–µ—Å—Ç SQL Assistant –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.core.rag import SQLAgent

def test_sql_assistant():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL Assistant"""
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL Assistant")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQL Agent
    try:
        sql_agent = SQLAgent()
        print("‚úÖ SQL Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQL Agent: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–û—Ç—á–µ—Ç –æ —Ç—Ä–∞—Ñ–∏–∫–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –≤ 2025 –≥–æ–¥—É –ø–æ–º–µ—Å—è—á–Ω–æ",
        "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
        "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º",
        "SBD —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ —è–Ω–≤–∞—Ä—å 2025"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {question}")
        print("-" * 40)
        
        start_time = time.time()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
            sql_query = sql_agent.generate_sql_query(question)
            
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:")
            print(sql_query)
            
            if duration > 30:
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥ (>30 —Å–µ–∫)")
            
        except Exception as e:
            end_time = time.time()
            duration = end_time - start_time
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        print()

def test_ollama_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Ollama API"""
    print("\nüîß –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Ollama API")
    print("=" * 50)
    
    import requests
    import json
    
    url = "http://localhost:11434/v1/chat/completions"
    
    payload = {
        "model": "qwen2.5:1.5b",
        "messages": [
            {"role": "user", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ—Å—Ç–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"}
        ],
        "temperature": 0.1,
        "max_tokens": 500
    }
    
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama...")
    start_time = time.time()
    
    try:
        response = requests.post(url, json=payload, timeout=60)
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(content)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>60 —Å–µ–∫)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SQL Assistant - {datetime.now()}")
    
    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API
    test_ollama_direct()
    
    # –¢–µ—Å—Ç SQL Assistant
    test_sql_assistant()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
