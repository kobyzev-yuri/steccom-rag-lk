#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –æ—Ç–¥–µ–ª—å–Ω–æ
"""

import pytesseract
from PIL import Image
import cv2
import numpy as np
from pdf2image import convert_from_path
import os

def test_ocr_on_pdf():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –Ω–∞ billmaster_7.pdf"""
    
    pdf_path = "/mnt/ai/cnn/steccom/data/uploads/billmaster_7.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        return
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º OCR –Ω–∞ —Ñ–∞–π–ª–µ: {pdf_path}")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        images = convert_from_path(pdf_path, dpi=300)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
        configs = [
            ("–ë–∞–∑–æ–≤—ã–π —Ä—É—Å—Å–∫–∏–π", r'--oem 3 --psm 6 -l rus'),
            ("–†—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", r'--oem 3 --psm 6 -l rus+eng'),
            ("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è", r'--oem 3 --psm 3 -l rus+eng'),
            ("–° OSD", r'--oem 3 --psm 1 -l rus+eng'),
            ("–û–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü", r'--oem 3 --psm 4 -l rus+eng'),
            ("–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π PSM 6", r'--oem 3 --psm 6 -l rus'),
            ("–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π PSM 3", r'--oem 3 --psm 3 -l rus'),
        ]
        
        for page_num, image in enumerate(images[:1]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print(f"\nüìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}:")
            
            for config_name, config in configs:
                try:
                    print(f"\nüîß {config_name}:")
                    print(f"   –ö–æ–Ω—Ñ–∏–≥: {config}")
                    
                    text = pytesseract.image_to_string(image, config=config)
                    text_preview = text[:200].replace('\n', ' ').strip()
                    
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤): {text_preview}...")
                    
                    if len(text.strip()) > 50:
                        print(f"   ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                    else:
                        print(f"   ‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        print(f"\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ OpenCV
        cv_image = cv2.cvtColor(np.array(images[0]), cv2.COLOR_RGB2BGR)
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        scale_factor = 2.0
        new_width = int(gray.shape[1] * scale_factor)
        new_height = int(gray.shape[0] * scale_factor)
        resized = cv2.resize(gray, (new_width, new_height), interpolation=cv2.INTER_CUBIC)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
        enhanced = clahe.apply(resized)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞
        denoised = cv2.medianBlur(enhanced, 3)
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        binary = cv2.adaptiveThreshold(denoised, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        
        # –û–±—Ä–∞—Ç–Ω–æ –≤ PIL
        processed_image = Image.fromarray(binary)
        
        # OCR —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        config = r'--oem 3 --psm 6 -l rus+eng'
        text = pytesseract.image_to_string(processed_image, config=config)
        text_preview = text[:200].replace('\n', ' ').strip()
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤): {text_preview}...")
        
        if len(text.strip()) > 50:
            print(f"   ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π!")
        else:
            print(f"   ‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –¥–∞–∂–µ —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_tesseract_langs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏"""
    print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ Tesseract:")
    try:
        langs = pytesseract.get_languages()
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {langs}")
        
        if 'rus' in langs:
            print("   ‚úÖ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("   ‚ùå –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR")
    print("=" * 50)
    
    test_tesseract_langs()
    print()
    test_ocr_on_pdf()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

