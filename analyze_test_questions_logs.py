#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
"""

import re
import sys
from pathlib import Path

def analyze_logs(log_file_path: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    if not Path(log_file_path).exists():
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file_path}")
        return
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 60)
    
    with open(log_file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    test_questions_pattern = r'–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏'
    test_questions_matches = re.findall(test_questions_pattern, content)
    
    if not test_questions_matches:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_questions_matches)} –∑–∞–ø–∏—Å–µ–π –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_size_pattern = r'–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: (\d+) —Å–∏–º–≤–æ–ª–æ–≤'
    doc_size_matches = re.findall(doc_size_pattern, content)
    if doc_size_matches:
        print(f"üìÑ –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_size_matches[-1]} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_name_pattern = r'–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: (.+)'
    doc_name_matches = re.findall(doc_name_pattern, content)
    if doc_name_matches:
        print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_name_matches[-1]}")
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_category_pattern = r'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: (.+)'
    doc_category_matches = re.findall(doc_category_pattern, content)
    if doc_category_matches:
        print(f"üìÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_category_matches[-1]}")
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    model_type_pattern = r'–¢–∏–ø –º–æ–¥–µ–ª–∏: (.+)'
    model_type_matches = re.findall(model_type_pattern, content)
    if model_type_matches:
        print(f"ü§ñ –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_type_matches[-1]}")
    
    model_name_pattern = r'–ú–æ–¥–µ–ª—å: (.+)'
    model_name_matches = re.findall(model_name_pattern, content)
    if model_name_matches:
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_name_matches[-1]}")
    
    # –ò—â–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    response_pattern = r'–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: (.+?)(?=\n|$)'
    response_matches = re.findall(response_pattern, content, re.DOTALL)
    if response_matches:
        print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {response_matches[-1][:200]}...")
    
    # –ò—â–µ–º –æ—à–∏–±–∫–∏
    error_pattern = r'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: (.+)'
    error_matches = re.findall(error_pattern, content)
    if error_matches:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {error_matches[-1]}")
    
    json_error_pattern = r'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: (.+)'
    json_error_matches = re.findall(json_error_pattern, content)
    if json_error_matches:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error_matches[-1]}")
    
    # –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    basic_questions_pattern = r'‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: (.+)'
    basic_questions_matches = re.findall(basic_questions_pattern, content)
    if basic_questions_matches:
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {basic_questions_matches[-1]}")
    
    # –ò—â–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    success_pattern = r'‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ (\d+) —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ LLM'
    success_matches = re.findall(success_pattern, content)
    if success_matches:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {success_matches[-1]} –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ LLM")
    
    print("\n" + "=" * 60)
    print("üìä –°–≤–æ–¥–∫–∞:")
    
    if success_matches:
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM: –£–°–ü–ï–®–ù–û")
    elif basic_questions_matches:
        print("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM: –ù–ï–£–î–ê–ß–ù–û (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã)")
    else:
        print("‚ùì –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ù–ï–ò–ó–í–ï–°–¢–ù–û")
    
    if error_matches:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {error_matches[-1]}")
    
    if json_error_matches:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error_matches[-1]}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_test_questions_logs.py <–ø—É—Ç—å_–∫_–ª–æ–≥–∞–º>")
        print("–ü—Ä–∏–º–µ—Ä: python analyze_test_questions_logs.py /var/log/kb_admin.log")
        sys.exit(1)
    
    log_file_path = sys.argv[1]
    analyze_logs(log_file_path)
