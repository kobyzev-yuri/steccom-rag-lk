#!/usr/bin/env python3
"""
Knowledge Base Management Interface
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KB
"""

import streamlit as st
import json
import os
import tempfile
import sqlite3
from pathlib import Path
from typing import List, Dict, Any, Optional
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import time

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KB
from modules.rag.multi_kb_rag import MultiKBRAG
from modules.documents.pdf_processor import PDFProcessor
from tests.kb_test_protocol import KBTestProtocol, TestQuestion, ModelResponse, RelevanceAssessment
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
import re


class KBManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Knowledge Base"""
    
    def __init__(self):
        self.rag = MultiKBRAG()
        self.pdf_processor = PDFProcessor()
        self.protocol = KBTestProtocol()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.chunk_configs = {
            "regulations": {
                "chunk_size": 600,
                "chunk_overlap": 100,
                "separators": ["\n\n", "\n", ". ", "! ", "? ", ", ", " ", ""],
                "description": "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
            },
            "manuals": {
                "chunk_size": 800,
                "chunk_overlap": 150,
                "separators": ["\n\n", "\n", ". ", "! ", "? ", "; ", ", ", " ", ""],
                "description": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            },
            "faq": {
                "chunk_size": 400,
                "chunk_overlap": 50,
                "separators": ["\n\n", "\n", "? ", ". ", "! ", ", ", " ", ""],
                "description": "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
            },
            "general": {
                "chunk_size": 1000,
                "chunk_overlap": 200,
                "separators": ["\n\n", "\n", ". ", "! ", "? ", ", ", " ", ""],
                "description": "–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            }
        }
    
    def analyze_text_structure(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        analysis = {
            'total_length': len(text),
            'paragraphs_by_double_newline': len([p for p in text.split('\n\n') if p.strip()]),
            'lines_by_single_newline': len([l for l in text.split('\n') if l.strip()]),
            'sections_by_numbers': len(re.split(r'\n\s*(\d+\.\s)', text)),
            'avg_section_length': 0,
            'section_lengths': [],
            'recommended_chunk_size': 600,
            'recommended_overlap': 100
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º
        sections = re.split(r'\n\s*(\d+\.\s)', text)
        section_lengths = []
        
        for i in range(1, len(sections), 2):
            if i < len(sections):
                section_content = sections[i]
                if section_content.strip():
                    section_lengths.append(len(section_content.strip()))
        
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        if not section_lengths:
            paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]
            section_lengths = [len(p) for p in paragraphs if len(p) > 50]
        
        analysis['section_lengths'] = section_lengths
        analysis['avg_section_length'] = sum(section_lengths) / len(section_lengths) if section_lengths else 0
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —á–∞–Ω–∫–∞
        avg_length = analysis['avg_section_length']
        if avg_length < 500:
            analysis['recommended_chunk_size'] = 400
            analysis['recommended_overlap'] = 50
        elif avg_length < 1000:
            analysis['recommended_chunk_size'] = 600
            analysis['recommended_overlap'] = 100
        else:
            analysis['recommended_chunk_size'] = 800
            analysis['recommended_overlap'] = 150
        
        return analysis
    
    def create_text_splitter(self, config: Dict[str, Any]) -> RecursiveCharacterTextSplitter:
        """–°–æ–∑–¥–∞–Ω–∏–µ text splitter —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        return RecursiveCharacterTextSplitter(
            chunk_size=config['chunk_size'],
            chunk_overlap=config['chunk_overlap'],
            length_function=len,
            separators=config['separators']
        )
    
    def test_chunk_configuration(self, text: str, config: Dict[str, Any], test_questions: List[str]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = Document(page_content=text, metadata={'source': 'test'})
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        splitter = self.create_text_splitter(config)
        chunks = splitter.split_documents([doc])
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        vectorstore = self.rag.embeddings.from_documents(chunks, self.rag.embeddings)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        search_results = []
        for question in test_questions:
            docs = vectorstore.similarity_search(question, k=3)
            search_results.append({
                'question': question,
                'found_docs': len(docs),
                'avg_relevance': sum(len(doc.page_content) for doc in docs) / len(docs) if docs else 0
            })
        
        return {
            'chunk_count': len(chunks),
            'avg_chunk_size': sum(len(chunk.page_content) for chunk in chunks) / len(chunks),
            'search_results': search_results,
            'config': config
        }


def render_kb_manager():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KB"""
    st.set_page_config(
        page_title="KB Manager - –°–¢–≠–ö–ö–û–ú",
        page_icon="üìö",
        layout="wide"
    )
    
    st.title("üìö Knowledge Base Manager")
    st.markdown("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if 'kb_manager' not in st.session_state:
        st.session_state.kb_manager = KBManager()
    
    kb_manager = st.session_state.kb_manager
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            [
                "üìä –û–±–∑–æ—Ä KB",
                "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞–Ω–∫–æ–≤",
                "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è"
            ]
        )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if page == "üìä –û–±–∑–æ—Ä KB":
        render_kb_overview(kb_manager)
    elif page == "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
        render_file_upload(kb_manager)
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞–Ω–∫–æ–≤":
        render_chunk_configuration(kb_manager)
    elif page == "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        render_kb_testing(kb_manager)
    elif page == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        render_analytics(kb_manager)
    elif page == "üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è":
        render_reindexing(kb_manager)


def render_kb_overview(kb_manager: KBManager):
    """–û–±–∑–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö KB"""
    st.header("üìä –û–±–∑–æ—Ä Knowledge Bases")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ KB
    available_kbs = kb_manager.rag.get_available_kbs()
    loaded_kbs = list(kb_manager.rag.vectorstores.keys())
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ KB", len(available_kbs))
    
    with col2:
        st.metric("–ó–∞–≥—Ä—É–∂–µ–Ω–æ", len(loaded_kbs))
    
    with col3:
        total_chunks = sum(
            kb_manager.rag.kb_metadata.get(kb_id, {}).get('chunk_count', 0)
            for kb_id in loaded_kbs
        )
        st.metric("–í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤", total_chunks)
    
    with col4:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(kb_manager, 'last_test_results'):
            avg_accuracy = kb_manager.last_test_results.get('average_accuracy', 0)
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å", f"{avg_accuracy:.1%}")
        else:
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å", "–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å")
    
    # –¢–∞–±–ª–∏—Ü–∞ KB
    st.subheader("üìö –°–ø–∏—Å–æ–∫ Knowledge Bases")
    
    if available_kbs:
        kb_data = []
        for kb in available_kbs:
            kb_id = kb.get('id', 1)
            metadata = kb_manager.rag.kb_metadata.get(kb_id, {})
            
            kb_data.append({
                'ID': kb_id,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': kb.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': kb.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                '–ó–∞–≥—Ä—É–∂–µ–Ω–∞': '‚úÖ' if kb_id in loaded_kbs else '‚ùå',
                '–î–æ–∫—É–º–µ–Ω—Ç–æ–≤': metadata.get('doc_count', 0),
                '–ß–∞–Ω–∫–æ–≤': metadata.get('chunk_count', 0)
            })
        
        df = pd.DataFrame(kb_data)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Knowledge Bases")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ KB", type="primary"):
            with st.spinner("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ KB..."):
                kb_manager.rag.clear_all()
                for kb in available_kbs:
                    kb_id = kb.get('id', 1)
                    kb_manager.rag.load_knowledge_base(kb_id)
                st.success("KB –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.rerun()
    
    with col2:
        if st.button("üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç"):
            st.session_state.run_quick_test = True
            st.rerun()
    
    with col3:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            st.session_state.show_detailed_stats = True
            st.rerun()


def render_file_upload(kb_manager: KBManager):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    file_type = st.radio(
        "–¢–∏–ø —Ñ–∞–π–ª–∞:",
        ["PDF", "JSON"],
        horizontal=True
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        f"–í—ã–±–µ—Ä–∏—Ç–µ {file_type} —Ñ–∞–π–ª:",
        type=[file_type.lower()],
        help=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è {file_type} —Ñ–∞–π–ª—ã –¥–æ 200MB"
    )
    
    if uploaded_file is not None:
        st.success(f"–§–∞–π–ª {uploaded_file.name} –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{uploaded_file.size / 1024:.1f} KB")
        with col2:
            st.metric("–¢–∏–ø", uploaded_file.type)
        with col3:
            st.metric("–ò–º—è", uploaded_file.name)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞..."):
                try:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content = uploaded_file.read()
                    
                    if file_type == "PDF":
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                            tmp_file.write(content)
                            tmp_file.flush()
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                            text = kb_manager.pdf_processor.extract_text(tmp_file.name)
                            os.unlink(tmp_file.name)
                    
                    elif file_type == "JSON":
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON
                        json_data = json.loads(content.decode('utf-8'))
                        if isinstance(json_data, list):
                            text = "\n\n".join([item.get('text', '') for item in json_data if isinstance(item, dict)])
                        else:
                            text = json_data.get('text', str(json_data))
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    analysis = kb_manager.analyze_text_structure(text)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.metric("–û–±—â–∞—è –¥–ª–∏–Ω–∞", f"{analysis['total_length']:,} —Å–∏–º–≤–æ–ª–æ–≤")
                        st.metric("–ê–±–∑–∞—Ü–µ–≤", analysis['paragraphs_by_double_newline'])
                        st.metric("–°—Ç—Ä–æ–∫", analysis['lines_by_single_newline'])
                    
                    with col2:
                        st.metric("–†–∞–∑–¥–µ–ª–æ–≤", analysis['sections_by_numbers'])
                        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞", f"{analysis['avg_section_length']:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
                        st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞", analysis['recommended_chunk_size'])
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    
                    if analysis['avg_section_length'] < 500:
                        st.info("üìù **–ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 400 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º 50")
                    elif analysis['avg_section_length'] < 1000:
                        st.info("üìÑ **–°—Ä–µ–¥–Ω–∏–µ –∞–±–∑–∞—Ü—ã**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 600 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º 100")
                    else:
                        st.info("üìö **–î–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 800 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º 150")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    st.session_state.file_analysis = {
                        'file_name': uploaded_file.name,
                        'file_type': file_type,
                        'text': text,
                        'analysis': analysis
                    }
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")


def render_chunk_configuration(kb_manager: KBManager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏")
    
    if 'file_analysis' not in st.session_state:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤'")
        return
    
    file_data = st.session_state.file_analysis
    text = file_data['text']
    analysis = file_data['analysis']
    
    st.subheader(f"üìÑ –§–∞–π–ª: {file_data['file_name']}")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_type = st.selectbox(
        "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        list(kb_manager.chunk_configs.keys()),
        format_func=lambda x: f"{x} - {kb_manager.chunk_configs[x]['description']}"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–æ–≤
    st.subheader("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        chunk_size = st.slider(
            "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (—Å–∏–º–≤–æ–ª–æ–≤):",
            min_value=200,
            max_value=2000,
            value=analysis['recommended_chunk_size'],
            step=50,
            help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 400-800 –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤, 800-1200 –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö"
        )
    
    with col2:
        chunk_overlap = st.slider(
            "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ (—Å–∏–º–≤–æ–ª–æ–≤):",
            min_value=0,
            max_value=500,
            value=analysis['recommended_overlap'],
            step=25,
            help="–û–±—ã—á–Ω–æ 10-20% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞"
        )
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    st.subheader("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–µ–∫—Å—Ç–∞")
    
    default_separators = kb_manager.chunk_configs[doc_type]['separators']
    separators = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):",
        ["\n\n", "\n", ". ", "! ", "? ", "; ", ", ", " ", ""],
        default=default_separators,
        help="–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏"
    )
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    if st.button("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", type="primary"):
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤..."):
            config = {
                'chunk_size': chunk_size,
                'chunk_overlap': chunk_overlap,
                'separators': separators
            }
            
            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
            doc = Document(page_content=text, metadata={'source': 'preview'})
            splitter = kb_manager.create_text_splitter(config)
            chunks = splitter.split_documents([doc])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤", len(chunks))
            with col2:
                avg_size = sum(len(chunk.page_content) for chunk in chunks) / len(chunks)
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä", f"{avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            with col3:
                min_size = min(len(chunk.page_content) for chunk in chunks)
                max_size = max(len(chunk.page_content) for chunk in chunks)
                st.metric("–†–∞–∑–º–µ—Ä (–º–∏–Ω-–º–∞–∫—Å)", f"{min_size}-{max_size}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
            st.subheader("üìù –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤")
            
            for i, chunk in enumerate(chunks[:5]):
                with st.expander(f"–ß–∞–Ω–∫ {i+1} ({len(chunk.page_content)} —Å–∏–º–≤–æ–ª–æ–≤)"):
                    st.text(chunk.page_content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            st.session_state.chunk_config = config
            st.session_state.chunks = chunks
            
            st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


def render_kb_testing(kb_manager: KBManager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KB"""
    st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Knowledge Base")
    
    # –í—ã–±–æ—Ä KB –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    available_kbs = kb_manager.rag.get_available_kbs()
    loaded_kbs = list(kb_manager.rag.vectorstores.keys())
    
    if not loaded_kbs:
        st.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö KB –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –í—ã–±–æ—Ä KB
    kb_options = {f"{kb.get('name', 'KB')} (ID: {kb.get('id', 1)})": kb.get('id', 1) 
                  for kb in available_kbs if kb.get('id', 1) in loaded_kbs}
    
    selected_kb_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KB –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", list(kb_options.keys()))
    selected_kb_id = kb_options[selected_kb_name]
    
    # –¢–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_type = st.radio(
        "–¢–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        ["–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"],
        horizontal=True
    )
    
    if test_type == "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç":
        render_quick_test(kb_manager, selected_kb_id)
    elif test_type == "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç":
        render_full_test(kb_manager, selected_kb_id)
    elif test_type == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã":
        render_custom_test(kb_manager, selected_kb_id)


def render_quick_test(kb_manager: KBManager, kb_id: int):
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç KB"""
    st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    quick_questions = [
        "–ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤—É—é—Ç –¥–ª—è –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤?",
        "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞?",
        "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–∫–ª—é—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫?",
        "–ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ç—á–µ—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ?"
    ]
    
    selected_questions = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        quick_questions,
        default=quick_questions[:3]
    )
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞..."):
            results = []
            
            for question in selected_questions:
                start_time = time.time()
                try:
                    result = kb_manager.rag.ask_question(question)
                    response_time = time.time() - start_time
                    
                    results.append({
                        'question': question,
                        'answer': result.get('answer', ''),
                        'response_time': response_time,
                        'sources': len(result.get('sources', [])),
                        'success': True
                    })
                except Exception as e:
                    results.append({
                        'question': question,
                        'answer': f"–û—à–∏–±–∫–∞: {e}",
                        'response_time': 0,
                        'sources': 0,
                        'success': False
                    })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            for i, result in enumerate(results, 1):
                with st.expander(f"–í–æ–ø—Ä–æ—Å {i}: {result['question'][:50]}..."):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{result['response_time']:.2f}—Å")
                    with col2:
                        st.metric("–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤", result['sources'])
                    with col3:
                        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result['success'] else "‚ùå –û—à–∏–±–∫–∞"
                        st.metric("–°—Ç–∞—Ç—É—Å", status)
                    
                    st.write("**–û—Ç–≤–µ—Ç:**")
                    st.text(result['answer'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.session_state.test_results = results


def render_full_test(kb_manager: KBManager, kb_id: int):
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç KB —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    st.subheader("üî¨ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    st.info("–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø–æ–ª–Ω–æ—Ç—ã –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
    
    if st.button("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                from tests.kb_test_protocol import LEGACY_SBD_TEST_QUESTIONS
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                protocol_file = kb_manager.protocol.save_protocol()
                
                st.success(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {protocol_file}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
                summary = kb_manager.protocol.get_test_summary()
                st.text(summary)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")


def render_custom_test(kb_manager: KBManager, kb_id: int):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"""
    st.subheader("‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
    
    # –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
        placeholder="–ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π?\n–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞?\n...",
        height=150
    )
    
    if questions_text:
        questions = [q.strip() for q in questions_text.split('\n') if q.strip()]
        
        st.write(f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        if st.button("üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", type="primary"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤..."):
                results = []
                
                for question in questions:
                    start_time = time.time()
                    try:
                        result = kb_manager.rag.ask_question(question)
                        response_time = time.time() - start_time
                        
                        results.append({
                            'question': question,
                            'answer': result.get('answer', ''),
                            'response_time': response_time,
                            'sources': len(result.get('sources', [])),
                            'success': True
                        })
                    except Exception as e:
                        results.append({
                            'question': question,
                            'answer': f"–û—à–∏–±–∫–∞: {e}",
                            'response_time': 0,
                            'sources': 0,
                            'success': False
                        })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for i, result in enumerate(results, 1):
                    with st.expander(f"–í–æ–ø—Ä–æ—Å {i}: {result['question']}"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.metric("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{result['response_time']:.2f}—Å")
                            st.metric("–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤", result['sources'])
                        
                        with col2:
                            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result['success'] else "‚ùå –û—à–∏–±–∫–∞"
                            st.metric("–°—Ç–∞—Ç—É—Å", status)
                        
                        st.write("**–û—Ç–≤–µ—Ç:**")
                        st.text(result['answer'])


def render_analytics(kb_manager: KBManager):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ KB"""
    st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Knowledge Base")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if 'test_results' not in st.session_state:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KB –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return
    
    results = st.session_state.test_results
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_questions = len(results)
        st.metric("–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", total_questions)
    
    with col2:
        successful = sum(1 for r in results if r['success'])
        st.metric("–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", f"{successful}/{total_questions}")
    
    with col3:
        avg_time = sum(r['response_time'] for r in results) / len(results)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_time:.2f}—Å")
    
    with col4:
        avg_sources = sum(r['sources'] for r in results) / len(results)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", f"{avg_sources:.1f}")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    response_times = [r['response_time'] for r in results if r['success']]
    if response_times:
        fig = px.bar(
            x=list(range(1, len(response_times) + 1)),
            y=response_times,
            title="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º",
            labels={'x': '–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞', 'y': '–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sources_count = [r['sources'] for r in results]
    if sources_count:
        fig = px.bar(
            x=list(range(1, len(sources_count) + 1)),
            y=sources_count,
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
            labels={'x': '–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'}
        )
        st.plotly_chart(fig, use_container_width=True)


def render_reindexing(kb_manager: KBManager):
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è KB"""
    st.header("üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è Knowledge Base")
    
    st.info("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏.")
    
    # –í—ã–±–æ—Ä KB –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    available_kbs = kb_manager.rag.get_available_kbs()
    
    if not available_kbs:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö KB –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        return
    
    kb_options = {f"{kb.get('name', 'KB')} (ID: {kb.get('id', 1)})": kb.get('id', 1) 
                  for kb in available_kbs}
    
    selected_kb_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KB –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:", list(kb_options.keys()))
    selected_kb_id = kb_options[selected_kb_name]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        chunk_size = st.number_input(
            "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞:",
            min_value=200,
            max_value=2000,
            value=600,
            step=50
        )
    
    with col2:
        chunk_overlap = st.number_input(
            "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ:",
            min_value=0,
            max_value=500,
            value=100,
            step=25
        )
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    st.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é", type="primary"):
        with st.spinner("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è KB..."):
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                st.success(f"KB {selected_kb_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!")
                st.info("–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å KB –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    render_kb_manager()
