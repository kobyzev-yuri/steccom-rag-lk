"""
Utility functions for satellite billing system
Contains helper functions for charts, data display, and other utilities
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from typing import Tuple, Optional
import logging
from .database import execute_query

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_chart(df: pd.DataFrame, chart_type: str = "line") -> None:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö DataFrame"""
    logger.info(f"create_chart –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–∏–ø–æ–º: {chart_type}")
    logger.info(f"DataFrame –ø—É—Å—Ç–æ–π: {df.empty}")
    logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    logger.info(f"–†–∞–∑–º–µ—Ä: {df.shape}")
    
    st.write(f"üîç DEBUG: create_chart –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–∏–ø–æ–º: {chart_type}")
    st.write(f"üîç DEBUG: DataFrame –ø—É—Å—Ç–æ–π: {df.empty}")
    st.write(f"üîç DEBUG: –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    st.write(f"üîç DEBUG: –†–∞–∑–º–µ—Ä: {df.shape}")
    
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    
    try:
        if chart_type == "line" and 'total_usage' in df.columns:
            # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            if 'month' in df.columns:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
                if 'service_type' in df.columns:
                    fig = px.line(df, x='month', y='total_usage', color='service_type',
                                 title='–î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥',
                                 labels={'month': '–ú–µ—Å—è—Ü', 'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
                else:
                    fig = px.line(df, x='month', y='total_usage', 
                                 title='–î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º',
                                 labels={'month': '–ú–µ—Å—è—Ü', 'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            elif 'device_id' in df.columns:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)
                fig = px.line(df, x='device_id', y='total_usage',
                             title='–¢—Ä–∞—Ñ–∏–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º',
                             labels={'device_id': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            else:
                # –û–±—â–∏–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                fig = px.line(df, y='total_usage',
                             title='–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞',
                             labels={'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "bar" and 'total_usage' in df.columns:
            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if 'device_id' in df.columns:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
                fig = px.bar(df, x='device_id', y='total_usage',
                            title='–¢—Ä–∞—Ñ–∏–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º',
                            labels={'device_id': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            elif 'service_type' in df.columns:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥
                fig = px.bar(df, x='service_type', y='total_usage',
                            title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥',
                            labels={'service_type': '–¢–∏–ø —É—Å–ª—É–≥–∏', 'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            else:
                # –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫
                fig = px.bar(df, y='total_usage',
                            title='–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞',
                            labels={'total_usage': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "pie" and 'total_usage' in df.columns:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
            if 'device_id' in df.columns:
                # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
                fig = px.pie(df, values='total_usage', names='device_id',
                            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º')
            elif 'service_type' in df.columns:
                # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥
                fig = px.pie(df, values='total_usage', names='service_type',
                            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥')
            else:
                # –û–±—â–∞—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                fig = px.pie(df, values='total_usage',
                            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞')
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "scatter" and 'usage_amount' in df.columns and 'duration_minutes' in df.columns:
            # –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π
            if 'service_type' in df.columns:
                fig = px.scatter(df, x='duration_minutes', y='usage_amount', color='service_type',
                               title='–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥',
                               labels={'duration_minutes': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)', 'usage_amount': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            else:
                fig = px.scatter(df, x='duration_minutes', y='usage_amount',
                               title='–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å vs –æ–±—ä–µ–º',
                               labels={'duration_minutes': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)', 'usage_amount': '–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞'})
            st.plotly_chart(fig, use_container_width=True)
            
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            st.info("–°–æ–∑–¥–∞—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫...")
            
            # –ù–∞–π–¥–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
            if numeric_cols:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                y_col = numeric_cols[0]
                x_col = df.columns[0] if len(df.columns) > 1 else None
                
                if chart_type == "line":
                    if x_col:
                        fig = px.line(df, x=x_col, y=y_col, title=f'–ì—Ä–∞—Ñ–∏–∫: {y_col}')
                    else:
                        fig = px.line(df, y=y_col, title=f'–ì—Ä–∞—Ñ–∏–∫: {y_col}')
                elif chart_type == "bar":
                    if x_col:
                        fig = px.bar(df, x=x_col, y=y_col, title=f'–î–∏–∞–≥—Ä–∞–º–º–∞: {y_col}')
                    else:
                        fig = px.bar(df, y=y_col, title=f'–î–∏–∞–≥—Ä–∞–º–º–∞: {y_col}')
                elif chart_type == "pie":
                    if x_col and y_col:
                        fig = px.pie(df, names=x_col, values=y_col, title=f'–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {y_col}')
                    else:
                        st.warning("–î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω—É–∂–Ω—ã –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏")
                        return
                else:
                    st.warning(f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ '{chart_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


def display_query_results(query: str, params: Tuple = ()) -> None:
    """Helper function to display query results with charts."""
    logger.info(f"display_query_results –≤—ã–∑–≤–∞–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query[:50]}...")
    st.write(f"üîç DEBUG: display_query_results –≤—ã–∑–≤–∞–Ω–∞")
    
    results = execute_query(query, params)
    
    if isinstance(results, tuple) and len(results) == 2:
        df, error = results
        if error:
            st.error(f"Error executing query: {error}")
        else:
            st.dataframe(df)
            
            # Chart section
            if not df.empty:
                st.markdown("### üìä –ì—Ä–∞—Ñ–∏–∫")
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    chart_type = st.selectbox(
                        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
                        ["line", "bar", "pie", "scatter"],
                        format_func=lambda x: {
                            "line": "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
                            "bar": "üìä –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", 
                            "pie": "ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
                            "scatter": "üîç –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"
                        }[x],
                        key=f"chart_type_{hash(query)}_{len(query)}"
                    )
                
                with col2:
                    if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", key=f"build_chart_{hash(query)}_{len(query)}"):
                        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query[:50]}...")
                        logger.info(f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: {chart_type}")
                        logger.info(f"–î–∞–Ω–Ω—ã–µ: {df.shape}, –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                        
                        st.write(f"üîç –û—Ç–ª–∞–¥–∫–∞: –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–∞ {chart_type}")
                        st.write(f"üîç –û—Ç–ª–∞–¥–∫–∞: –î–∞–Ω–Ω—ã–µ: {df.shape}, –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                        create_chart(df, chart_type)
            
            # Download option
            if not df.empty:
                csv = df.to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"query_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
    else:
        st.error("Unexpected query result format")


def _generate_quick_question() -> str:
    """Generate a random quick question for the user"""
    import random
    from .queries import QUICK_QUESTIONS
    return random.choice(QUICK_QUESTIONS)
