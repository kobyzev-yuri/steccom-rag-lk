"""
Agent Statistics Panel
–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import streamlit as st
import pandas as pd
import sqlite3
from typing import Dict, List, Any
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
sys.path.append(str(Path(__file__).parent.parent.parent))
from config.settings import DATABASE_PATH

class AgentStatsPanel:
    """–ü–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.db_path = DATABASE_PATH
    
    def render_agent_stats(self):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
        st.subheader("ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤")
        
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            c.execute("""
                CREATE TABLE IF NOT EXISTS llm_usage (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    provider TEXT,
                    model TEXT,
                    agent_name TEXT,
                    prompt_tokens INTEGER,
                    completion_tokens INTEGER,
                    total_tokens INTEGER,
                    question TEXT,
                    response_length INTEGER
                )
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
            c.execute("""
                SELECT 
                    COALESCE(agent_name, 'unknown') as agent,
                    COUNT(*) as requests,
                    COALESCE(SUM(prompt_tokens), 0) as prompt_tokens,
                    COALESCE(SUM(completion_tokens), 0) as completion_tokens,
                    COALESCE(SUM(total_tokens), 0) as total_tokens
                FROM llm_usage
                GROUP BY agent_name
                ORDER BY total_tokens DESC
            """)
            
            agent_stats = c.fetchall()
            
            if agent_stats:
                # –°–æ–∑–¥–∞–µ–º DataFrame
                df_agents = pd.DataFrame(agent_stats, columns=[
                    '–ê–≥–µ–Ω—Ç', '–ó–∞–ø—Ä–æ—Å–æ–≤', '–ü—Ä–æ–º–ø—Ç —Ç–æ–∫–µ–Ω—ã', '–û—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω—ã', '–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤'
                ])
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                col1, col2, col3, col4 = st.columns(4)
                
                total_requests = df_agents['–ó–∞–ø—Ä–æ—Å–æ–≤'].sum()
                total_tokens = df_agents['–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤'].sum()
                total_agents = len(df_agents)
                avg_tokens_per_request = total_tokens / total_requests if total_requests > 0 else 0
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤", total_agents)
                with col2:
                    st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", total_requests)
                with col3:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤", f"{total_tokens:,}")
                with col4:
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å", f"{avg_tokens_per_request:.1f}")
                
                st.markdown("---")
                
                # –¢–∞–±–ª–∏—Ü–∞ –∞–≥–µ–Ω—Ç–æ–≤
                st.markdown("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:**")
                st.dataframe(df_agents, use_container_width=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                if len(df_agents) > 1:
                    st.markdown("**üìà –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:**")
                    chart_data = df_agents.set_index('–ê–≥–µ–Ω—Ç')['–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤']
                    st.bar_chart(chart_data)
                
            else:
                st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∞–≥–µ–Ω—Ç–æ–≤")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
            st.markdown("---")
            st.markdown("**üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º:**")
            
            c.execute("""
                SELECT 
                    COALESCE(agent_name, 'unknown') as agent,
                    COALESCE(model, 'unknown') as model,
                    COALESCE(provider, 'unknown') as provider,
                    COUNT(*) as requests,
                    COALESCE(SUM(total_tokens), 0) as total_tokens
                FROM llm_usage
                GROUP BY agent_name, model, provider
                ORDER BY total_tokens DESC
            """)
            
            model_stats = c.fetchall()
            
            if model_stats:
                df_models = pd.DataFrame(model_stats, columns=[
                    '–ê–≥–µ–Ω—Ç', '–ú–æ–¥–µ–ª—å', '–ü—Ä–æ–≤–∞–π–¥–µ—Ä', '–ó–∞–ø—Ä–æ—Å–æ–≤', '–¢–æ–∫–µ–Ω–æ–≤'
                ])
                st.dataframe(df_models, use_container_width=True)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            st.markdown("---")
            st.markdown("**‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (20):**")
            
            c.execute("""
                SELECT 
                    timestamp,
                    COALESCE(agent_name, 'unknown') as agent,
                    COALESCE(model, 'unknown') as model,
                    COALESCE(total_tokens, 0) as tokens,
                    LENGTH(question) as question_length
                FROM llm_usage
                ORDER BY timestamp DESC
                LIMIT 20
            """)
            
            recent_ops = c.fetchall()
            
            if recent_ops:
                df_recent = pd.DataFrame(recent_ops, columns=[
                    '–í—Ä–µ–º—è', '–ê–≥–µ–Ω—Ç', '–ú–æ–¥–µ–ª—å', '–¢–æ–∫–µ–Ω–æ–≤', '–î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞'
                ])
                st.dataframe(df_recent, use_container_width=True)
            
            conn.close()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    def get_agent_leaderboard(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            
            c.execute("""
                SELECT 
                    COALESCE(agent_name, 'unknown') as agent,
                    COUNT(*) as requests,
                    COALESCE(SUM(total_tokens), 0) as total_tokens,
                    COALESCE(AVG(total_tokens), 0) as avg_tokens_per_request
                FROM llm_usage
                GROUP BY agent_name
                ORDER BY total_tokens DESC
                LIMIT 10
            """)
            
            leaderboard = []
            for row in c.fetchall():
                leaderboard.append({
                    'agent': row[0],
                    'requests': row[1],
                    'total_tokens': row[2],
                    'avg_tokens_per_request': row[3]
                })
            
            conn.close()
            return leaderboard
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            return []
