"""
Prompt Management Module
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ SQL Assistant –∏ KB Assistant
"""

import streamlit as st
import os
from pathlib import Path
from typing import Dict, Optional
import json

class PromptManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, prompts_dir: str = "resources/prompts"):
        self.prompts_dir = Path(prompts_dir)
        self.prompts_dir.mkdir(parents=True, exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_files = {
            "SQL Assistant": "sql_prompt.txt",
            "KB Assistant": "rag_prompt.txt",
            "General Assistant": "assistant_prompt.txt"
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã
        self.current_prompts = self._load_all_prompts()
    
    def _load_all_prompts(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        prompts = {}
        for name, filename in self.prompt_files.items():
            file_path = self.prompts_dir / filename
            if file_path.exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        prompts[name] = f.read()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {name}: {e}")
                    prompts[name] = ""
            else:
                prompts[name] = ""
        return prompts
    
    def _save_prompt(self, prompt_name: str, content: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª"""
        try:
            filename = self.prompt_files[prompt_name]
            file_path = self.prompts_dir / filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.current_prompts[prompt_name] = content
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_name}: {e}")
            return False
    
    def render_prompt_editor(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
        st.header("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
        st.markdown("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.")
        
        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        selected_prompt = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            list(self.prompt_files.keys()),
            key="prompt_selector"
        )
        
        if selected_prompt:
            st.markdown(f"### –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {selected_prompt}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            current_content = self.current_prompts.get(selected_prompt, "")
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edited_content = st.text_area(
                "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞:",
                value=current_content,
                height=400,
                key=f"prompt_editor_{selected_prompt}",
                help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö: {question}, {context}, {company} –∏ —Ç.–¥."
            )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{selected_prompt}"):
                    if self._save_prompt(selected_prompt, edited_content):
                        st.success(f"–ü—Ä–æ–º–ø—Ç '{selected_prompt}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                        st.rerun()
            
            with col2:
                if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key=f"reset_{selected_prompt}"):
                    st.rerun()
            
            with col3:
                if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key=f"copy_{selected_prompt}"):
                    st.code(edited_content, language="text")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–µ
            st.markdown("---")
            st.markdown("#### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–µ")
            
            if selected_prompt == "SQL Assistant":
                st.info("""
                **SQL Assistant** - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
                
                **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**
                - `{question}` - –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - `{company}` - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
                - `{schema}` - —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                
                **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
                - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è SQLite
                - –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏
                - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
                """)
            
            elif selected_prompt == "KB Assistant":
                st.info("""
                **KB Assistant** - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑ –∑–Ω–∞–Ω–∏–π.
                
                **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**
                - `{question}` - –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - `{context}` - –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                
                **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
                - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
                - –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑ –∑–Ω–∞–Ω–∏–π
                """)
            
            elif selected_prompt == "General Assistant":
                st.info("""
                **General Assistant** - –æ–±—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
                
                **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**
                - `{question}` - –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - `{context}` - –∫–æ–Ω—Ç–µ–∫—Å—Ç
                - `{role}` - —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
                - –ü–æ–º–æ–≥–∞–µ—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å–∏—Å—Ç–µ–º–µ
                - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–°–∏–º–≤–æ–ª–æ–≤", len(edited_content))
            
            with col2:
                st.metric("–°—Ç—Ä–æ–∫", len(edited_content.split('\n')))
            
            with col3:
                st.metric("–°–ª–æ–≤", len(edited_content.split()))
    
    def get_prompt_content(self, prompt_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞"""
        return self.current_prompts.get(prompt_name, "")
    
    def reload_prompts(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        self.current_prompts = self._load_all_prompts()
