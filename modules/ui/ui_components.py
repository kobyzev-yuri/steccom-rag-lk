"""
UI Components module for satellite billing system
Contains all Streamlit UI rendering functions
"""

import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
from typing import Optional

from ..core.database import execute_standard_query, execute_query
from ..core.rag import generate_sql
from ..core.utils import display_query_results
from ..core.charts import create_chart
from ..core.queries import STANDARD_QUERIES, QUICK_QUESTIONS


def render_user_view():
    """Render the main user interface"""
    st.title("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –°–¢–≠–ö–ö–û–ú")
    
    # Navigation
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å", "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", "‚ùì –ü–æ–º–æ—â—å"],
        key="user_page"
    )
    
    # System status in sidebar
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    if st.session_state.get('rag_initialized'):
        st.sidebar.success("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        st.sidebar.warning("‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if st.session_state.get('kb_loaded_count', 0) > 0:
        st.sidebar.success(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ó: {st.session_state.kb_loaded_count}")
        
        if st.session_state.get('loaded_kbs_info'):
            with st.sidebar.expander("üìã –î–µ—Ç–∞–ª–∏ –ë–ó"):
                for kb in st.session_state.loaded_kbs_info:
                    st.write(f"‚Ä¢ {kb}")
    else:
        st.sidebar.warning("üìö –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # Route to appropriate page
    if page == "üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã":
        render_standard_reports()
    elif page == "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å":
        render_custom_query()
    elif page == "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫":
        render_smart_assistant()
    elif page == "‚ùì –ü–æ–º–æ—â—å":
        render_help()


def render_standard_reports():
    """Render standard reports page"""
    st.subheader("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
    
    # Use session_state for report type
    report_type = st.selectbox(
        "–¢–∏–ø –æ—Ç—á–µ—Ç–∞:",
        [
            "–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä",
            "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            "–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
            "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥",
            "–ü–æ–º–µ—Å—è—á–Ω—ã–π SBD —Ç—Ä–∞—Ñ–∏–∫",
            "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_DATA —Ç—Ä–∞—Ñ–∏–∫",
            "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_VOICE —Ç—Ä–∞—Ñ–∏–∫",
            "SBD —Å–µ—Å—Å–∏–∏",
            "VSAT_DATA —Å–µ—Å—Å–∏–∏",
            "VSAT_VOICE —Å–µ—Å—Å–∏–∏"
        ],
        index=["–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä", "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü", 
               "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥", "–ü–æ–º–µ—Å—è—á–Ω—ã–π SBD —Ç—Ä–∞—Ñ–∏–∫", "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_DATA —Ç—Ä–∞—Ñ–∏–∫", "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_VOICE —Ç—Ä–∞—Ñ–∏–∫", "SBD —Å–µ—Å—Å–∏–∏", "VSAT_DATA —Å–µ—Å—Å–∏–∏", "VSAT_VOICE —Å–µ—Å—Å–∏–∏"].index(st.session_state.current_report_type),
        key="report_type"
    )
    
    # Update session_state when report type changes
    if report_type != st.session_state.current_report_type:
        st.session_state.current_report_type = report_type
    
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç", key="show_report"):
        st.write(f"üîç DEBUG: –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è: {report_type}")
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞..."):
            # Determine user role for access control
            user_role = 'staff' if st.session_state.is_staff else 'user'
            st.write(f"üîç DEBUG: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}")
            
            if report_type == "–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä":
                query = STANDARD_QUERIES["Current agreement"]
            elif report_type == "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤":
                query = STANDARD_QUERIES["My devices"]
            elif report_type == "–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü":
                query = STANDARD_QUERIES["My monthly traffic"]
            elif report_type == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                query = STANDARD_QUERIES["Current month usage"]
            elif report_type == "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                query = STANDARD_QUERIES["Service sessions"]
            elif report_type == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥":
                query = """
                SELECT 
                    st.name as service_type,
                    st.unit as unit,
                    COUNT(DISTINCT d.imei) as device_count,
                    SUM(b.usage_amount) as total_usage,
                    ROUND(SUM(b.amount), 2) as total_amount,
                    ROUND(AVG(b.usage_amount), 2) as avg_usage_per_device
                FROM billing_records b
                JOIN agreements a ON b.agreement_id = a.id
                JOIN users u ON a.user_id = u.id
                JOIN service_types st ON b.service_type_id = st.id
                LEFT JOIN devices d ON b.imei = d.imei
                WHERE u.company = ?
                GROUP BY st.name, st.unit
                ORDER BY total_usage DESC;
                """
            elif report_type == "–ü–æ–º–µ—Å—è—á–Ω—ã–π SBD —Ç—Ä–∞—Ñ–∏–∫":
                query = STANDARD_QUERIES["SBD monthly traffic"]
            elif report_type == "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_DATA —Ç—Ä–∞—Ñ–∏–∫":
                query = STANDARD_QUERIES["VSAT_DATA monthly traffic"]
            elif report_type == "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_VOICE —Ç—Ä–∞—Ñ–∏–∫":
                query = STANDARD_QUERIES["VSAT_VOICE monthly traffic"]
            elif report_type == "SBD —Å–µ—Å—Å–∏–∏":
                query = STANDARD_QUERIES["SBD sessions"]
            elif report_type == "VSAT_DATA —Å–µ—Å—Å–∏–∏":
                query = STANDARD_QUERIES["VSAT_DATA sessions"]
            elif report_type == "VSAT_VOICE —Å–µ—Å—Å–∏–∏":
                query = STANDARD_QUERIES["VSAT_VOICE sessions"]
            
            # Execute query
            st.write(f"üîç DEBUG: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {st.session_state.company}")
            df, error = execute_query(query, (st.session_state.company,))
            st.write(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {type(df)}, –æ—à–∏–±–∫–∞: {error}")
            
            if error:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {error}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤ session_state
                report_key = f"standard_report_{report_type}"
                st.session_state[f"{report_key}_data"] = df
                st.session_state[f"{report_key}_query"] = query
                
                st.write(f"üîç DEBUG: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {df.shape}, –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                st.write(f"üîç DEBUG: DataFrame –ø—É—Å—Ç–æ–π: {df.empty}")
                st.write(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:")
                st.write(df.head(3))
                
                st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—á–µ—Ç–∞")
                if df.empty:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                else:
                    st.table(df)
                
                # Download option - —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
                if not df.empty:
                    csv = df.to_csv(index=False)
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ CSV",
                        data=csv,
                        file_name=f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                
                # Chart section - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                if not df.empty:
                    st.markdown("### üìä –ì—Ä–∞—Ñ–∏–∫")
                    
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                    chart_key = f"chart_{hash(report_type)}"
                    
                    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
                    chart_type = st.selectbox(
                        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
                        ["line", "bar", "pie", "scatter"],
                        format_func=lambda x: {
                            "line": "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
                            "bar": "üìä –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", 
                            "pie": "ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
                            "scatter": "üîç –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"
                        }[x],
                        key=f"standard_chart_type_{chart_key}"
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                    st.write(f"üîç DEBUG: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–∞: {chart_type}")
                    st.write(f"üîç DEBUG: –î–∞–Ω–Ω—ã–µ: {df.shape}, –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                    create_chart(df, chart_type)


def render_custom_query():
    """Render custom query page"""
    st.subheader("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
    st.write("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    # Show example questions
    with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"):
        st.markdown("""
        **üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
        - –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        - –ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?
        - –°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π?
        
        **üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ:**
        - –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω—Ç–µ–Ω–Ω–µ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?
        - –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GPS —Ç—Ä–µ–∫–∏–Ω–≥?
        - –ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã?
        
        **üìã –î–æ–∫—É–º–µ–Ω—Ç—ã:**
        - –ü–æ–∫–∞–∂–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
        - –ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?
        - –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """)
    
    # Use session_state for user question
    user_question = st.text_area(
        "üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.current_user_question,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
        height=100,
        key="user_question"
    )
    
    # Update session_state when question changes
    if user_question != st.session_state.current_user_question:
        st.session_state.current_user_question = user_question
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", key="create_query"):
        if user_question:
            # DEBUG: Print the user question before processing
            print(f"üîç DEBUG: User question in render_custom_query: '{user_question}'")
            print(f"üîç DEBUG: Question length: {len(user_question)}")
            
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å..."):
                # Try to use multi-KB RAG first for enhanced context
                if st.session_state.get('multi_rag') and st.session_state.multi_rag.get_available_kbs():
                    # Use multi-KB RAG for enhanced context
                    kb_response = st.session_state.multi_rag.get_response_with_context(
                        user_question, context_limit=3
                    )
                    if kb_response and "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" not in kb_response:
                        st.markdown("#### üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                        st.info(kb_response)
                        st.markdown("---")
                
                # Generate SQL query using direct function (preserves full user question)
                print(f"üîç DEBUG: About to call generate_sql with: '{user_question}'")
                query = generate_sql(user_question, st.session_state.company)
                if query:
                    # Store results in session_state
                    st.session_state.current_sql_query = query
                    st.session_state.current_query_explanation = f"SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è: {user_question}"
                    st.session_state.current_query_results = execute_query(query)
                    
                    st.markdown("#### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞")
                    st.info(st.session_state.current_query_explanation)
                    st.markdown("#### SQL –ó–∞–ø—Ä–æ—Å")
                    st.code(query, language="sql")
                    st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    display_query_results(query)
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    
    # Display stored results if available
    if st.session_state.current_query_explanation and st.session_state.current_sql_query:
        st.markdown("#### –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å")
        st.markdown("**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞**")
        st.info(st.session_state.current_query_explanation)
        st.markdown("**SQL –ó–∞–ø—Ä–æ—Å**")
        st.code(st.session_state.current_sql_query, language="sql")
        st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã**")
        display_query_results(st.session_state.current_sql_query)


def render_smart_assistant():
    """Render smart assistant page"""
    st.subheader("ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
    st.write("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º.")
    
    # Quick questions
    st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", key="quick_traffic"):
            st.session_state.current_assistant_question = "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    
    with col2:
        if st.button("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", key="quick_tech"):
            st.session_state.current_assistant_question = "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?"
    
    with col3:
        if st.button("üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", key="quick_docs"):
            st.session_state.current_assistant_question = "–ü–æ–∫–∞–∂–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    
    # Question input
    assistant_question = st.text_area(
        "üí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.current_assistant_question,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω—Ç–µ–Ω–Ω–µ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
        height=100,
        key="assistant_question"
    )
    
    # Update session_state when question changes
    if assistant_question != st.session_state.current_assistant_question:
        st.session_state.current_assistant_question = assistant_question
    
    if st.button("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", key="ask_assistant"):
        if assistant_question:
            with st.spinner("–ò—â—É –æ—Ç–≤–µ—Ç..."):
                if st.session_state.rag_helper:
                    # Determine role for filtering (admin can see user docs too)
                    role = 'admin' if st.session_state.get('is_staff') else 'user'
                    response = st.session_state.rag_helper.get_response(assistant_question, role=role)
                    st.session_state.assistant_answer = response
                else:
                    st.error("–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    
    # Display assistant answer if available
    if st.session_state.assistant_answer:
        st.markdown("#### üí¨ –û—Ç–≤–µ—Ç:")
        st.markdown(st.session_state.assistant_answer)


def render_help():
    """Render help page"""
    st.subheader("‚ùì –ü–æ–º–æ—â—å")
    st.markdown("""
    ### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
    
    #### 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    - –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç"
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    
    #### 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    - –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç SQL-–∑–∞–ø—Ä–æ—Å
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∞
    
    #### 3. –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
    - –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    #### 4. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    - –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
    - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è
    - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    """)
    
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä–∞–≤–∫—É..."):
            if st.session_state.rag_helper:
                help_text = st.session_state.rag_helper.get_response("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º?")
                st.markdown(help_text)
            else:
                st.error("–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def render_staff_view():
    """Render staff/admin view"""
    st.title("üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –°–¢–≠–ö–ö–û–ú")
    
    # Navigation tabs
    tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    
    with tab1:
        # Company selector
        companies_query = "SELECT DISTINCT company FROM users WHERE role = 'user' ORDER BY company"
        conn = sqlite3.connect('satellite_billing.db')
        df = pd.read_sql_query(companies_query, conn)
        conn.close()
        
        selected_company = st.selectbox("Select Company:", ["All Companies"] + df['company'].tolist())
    
    # AI Query Assistant
    st.header("AI Query Assistant")
    user_question = st.text_area(
        "Ask a question:",
        placeholder="e.g., Show traffic statistics for last month",
        height=100
    )
    
    if st.button("Generate Query"):
        if user_question:
            with st.spinner("Generating query..."):
                # Use company filter if specific company selected
                company_filter = selected_company if selected_company != "All Companies" else None
                query = generate_sql(user_question, company_filter)
                
                if query:
                    st.markdown("#### Generated SQL Query")
                    st.code(query, language="sql")
                    
                    # Execute and display results
                    st.markdown("#### Query Results")
                    if company_filter:
                        df, error = execute_query(query, (company_filter,))
                    else:
                        df, error = execute_query(query)
                    
                    if error:
                        st.error(f"Query execution error: {error}")
                    else:
                        st.dataframe(df)
                        
                        # Chart
                        if not df.empty:
                            st.markdown("#### Chart")
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è staff –ø–∞–Ω–µ–ª–∏
                            import time
                            staff_unique_key = f"staff_{int(time.time() * 1000)}"
                            chart_type = st.selectbox(
                                "Chart Type:",
                                ["line", "bar", "pie", "scatter"],
                                key=f"staff_chart_type_{staff_unique_key}"
                            )
                            if st.button("Create Chart", key=f"create_staff_chart_{staff_unique_key}"):
                                create_chart(df, chart_type)
                else:
                    st.error("Failed to generate query. Please try rephrasing your question.")
        else:
            st.warning("Please enter a question.")
    
    with tab2:
        st.header("Standard Reports")
        # Standard reports functionality for staff
        render_standard_reports()
    
    with tab3:
        st.header("Admin Panel")
        st.write("Administrative functions will be implemented here.")
