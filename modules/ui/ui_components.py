"""
UI Components module for satellite billing system
Contains all Streamlit UI rendering functions
"""

import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
from typing import Optional
import plotly.express as px

# Optional RAG helper import for admin actions
try:
    from ..rag.rag_helper import RAGHelper
    _RAG_AVAILABLE = True
except Exception:
    _RAG_AVAILABLE = False

from ..core.database import execute_standard_query, execute_query
from ..core.rag import generate_sql
from ..core.utils import display_query_results
from ..core.charts import create_chart
from ..core.queries import STANDARD_QUERIES, QUICK_QUESTIONS


def render_user_view():
    """Render the main user interface"""
    st.title("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –°–¢–≠–ö–ö–û–ú")
    
    # Navigation
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å", "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", "‚ùì –ü–æ–º–æ—â—å"],
        key="user_page"
    )
    
    # System status in sidebar
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    if st.session_state.get('rag_initialized'):
        st.sidebar.success("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        st.sidebar.warning("‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if st.session_state.get('kb_loaded_count', 0) > 0:
        st.sidebar.success(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ë–ó: {st.session_state.kb_loaded_count}")
        
        if st.session_state.get('loaded_kbs_info'):
            with st.sidebar.expander("üìã –î–µ—Ç–∞–ª–∏ –ë–ó"):
                for kb in st.session_state.loaded_kbs_info:
                    st.write(f"‚Ä¢ {kb}")
    else:
        st.sidebar.warning("üìö –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # Route to appropriate page
    if page == "üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã":
        render_standard_reports()
    elif page == "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å":
        render_custom_query()
    elif page == "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫":
        render_smart_assistant()
    elif page == "‚ùì –ü–æ–º–æ—â—å":
        render_help()


def render_standard_reports(company_override: Optional[str] = None):
    """Render standard reports page"""
    st.subheader("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
    
    # For staff: inline company selector (with All Companies)
    if st.session_state.is_staff:
        try:
            companies_query = "SELECT DISTINCT company FROM users WHERE role = 'user' ORDER BY company"
            conn = sqlite3.connect('satellite_billing.db')
            _df_companies = pd.read_sql_query(companies_query, conn)
            conn.close()
            company_options = ["All Companies"] + _df_companies['company'].tolist()
        except Exception:
            company_options = ["All Companies"]
        selected_company_sr = st.selectbox("–ö–æ–º–ø–∞–Ω–∏—è:", company_options, key="standard_reports_company_selector")
        # Prefer inline selector over external override
        company_override = selected_company_sr
    
    # Use session_state for report type
    report_type = st.selectbox(
        "–¢–∏–ø –æ—Ç—á–µ—Ç–∞:",
        [
            "–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä",
            "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            "–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
            "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥",
            "–ü–æ–º–µ—Å—è—á–Ω—ã–π SBD —Ç—Ä–∞—Ñ–∏–∫",
            "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_DATA —Ç—Ä–∞—Ñ–∏–∫",
            "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_VOICE —Ç—Ä–∞—Ñ–∏–∫",
            "SBD —Å–µ—Å—Å–∏–∏",
            "VSAT_DATA —Å–µ—Å—Å–∏–∏",
            "VSAT_VOICE —Å–µ—Å—Å–∏–∏"
        ],
        index=["–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä", "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü", 
               "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥", "–ü–æ–º–µ—Å—è—á–Ω—ã–π SBD —Ç—Ä–∞—Ñ–∏–∫", "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_DATA —Ç—Ä–∞—Ñ–∏–∫", "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_VOICE —Ç—Ä–∞—Ñ–∏–∫", "SBD —Å–µ—Å—Å–∏–∏", "VSAT_DATA —Å–µ—Å—Å–∏–∏", "VSAT_VOICE —Å–µ—Å—Å–∏–∏"].index(st.session_state.current_report_type),
        key="report_type"
    )
    
    # Pre-select chart type before running
    chart_type_selection = st.selectbox(
        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
        ["line", "bar", "pie", "scatter"],
        format_func=lambda x: {
            "line": "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
            "bar": "üìä –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", 
            "pie": "ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            "scatter": "üîç –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"
        }[x],
        key="standard_chart_type_global"
    )
    
    # Update session_state when report type changes
    if report_type != st.session_state.current_report_type:
        st.session_state.current_report_type = report_type
    
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç", key="show_report"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞..."):
            # Determine user role for access control
            user_role = 'staff' if st.session_state.is_staff else 'user'
            
            # Determine target company for query execution
            if st.session_state.is_staff:
                # Staff uses inline selector (may be All Companies)
                if report_type == "–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä" and (company_override is None or company_override == "All Companies"):
                    st.warning("–î–ª—è –æ—Ç—á–µ—Ç–∞ '–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä' –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é.")
                    return
                company_for_query = company_override if company_override and company_override != "All Companies" else None
            else:
                company_for_query = st.session_state.company
            
            if report_type == "–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä":
                query = STANDARD_QUERIES["Current agreement"]
            elif report_type == "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤":
                query = STANDARD_QUERIES["My devices"]
            elif report_type == "–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü":
                query = STANDARD_QUERIES["My monthly traffic"]
            elif report_type == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                query = STANDARD_QUERIES["Current month usage"]
            elif report_type == "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                query = STANDARD_QUERIES["Service sessions"]
            elif report_type == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥":
                query = """
                SELECT 
                    st.name as service_type,
                    st.unit as unit,
                    COUNT(DISTINCT d.imei) as device_count,
                    SUM(b.usage_amount) as total_usage,
                    ROUND(SUM(b.amount), 2) as total_amount,
                    ROUND(AVG(b.usage_amount), 2) as avg_usage_per_device
                FROM billing_records b
                JOIN agreements a ON b.agreement_id = a.id
                JOIN users u ON a.user_id = u.id
                JOIN service_types st ON b.service_type_id = st.id
                LEFT JOIN devices d ON b.imei = d.imei
                WHERE u.company = ?
                GROUP BY st.name, st.unit
                ORDER BY total_usage DESC;
                """
            elif report_type == "–ü–æ–º–µ—Å—è—á–Ω—ã–π SBD —Ç—Ä–∞—Ñ–∏–∫":
                query = STANDARD_QUERIES["SBD monthly traffic"]
            elif report_type == "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_DATA —Ç—Ä–∞—Ñ–∏–∫":
                query = STANDARD_QUERIES["VSAT_DATA monthly traffic"]
            elif report_type == "–ü–æ–º–µ—Å—è—á–Ω—ã–π VSAT_VOICE —Ç—Ä–∞—Ñ–∏–∫":
                query = STANDARD_QUERIES["VSAT_VOICE monthly traffic"]
            elif report_type == "SBD —Å–µ—Å—Å–∏–∏":
                query = STANDARD_QUERIES["SBD sessions"]
            elif report_type == "VSAT_DATA —Å–µ—Å—Å–∏–∏":
                query = STANDARD_QUERIES["VSAT_DATA sessions"]
            elif report_type == "VSAT_VOICE —Å–µ—Å—Å–∏–∏":
                query = STANDARD_QUERIES["VSAT_VOICE sessions"]
            
            # Execute query
            if report_type != "–¢–µ–∫—É—â–∏–π –¥–æ–≥–æ–≤–æ—Ä" and st.session_state.is_staff and (company_override == "All Companies"):
                # Remove company filter for aggregated admin view
                query_to_run = query.replace("WHERE u.company = ?", "WHERE 1=1")
                df, error = execute_query(query_to_run)
            else:
                if st.session_state.is_staff and company_for_query is None:
                    # Safety fallback (should not happen due to early return)
                    st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
                    return
                df, error = execute_query(query, (company_for_query,))
            
            if error:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {error}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤ session_state
                report_key = f"standard_report_{report_type}"
                st.session_state[f"{report_key}_data"] = df
                st.session_state[f"{report_key}_query"] = query
                
                st.write(df.head(3))
                
                st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—á–µ—Ç–∞")
                if df.empty:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                else:
                    st.table(df)
                
                # Download option - —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
                if not df.empty:
                    csv = df.to_csv(index=False)
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ CSV",
                        data=csv,
                        file_name=f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                
                # Chart section - use pre-selected chart type
                if not df.empty:
                    st.markdown("### üìä –ì—Ä–∞—Ñ–∏–∫")
                    try:
                        if "service_type" in df.columns and df["service_type"].nunique() > 1:
                            for svc in df["service_type"].dropna().unique():
                                st.markdown(f"#### {svc}")
                                df_svc = df[df["service_type"] == svc]
                                create_chart(df_svc, chart_type_selection)
                        else:
                            # Guard: different units without service_type separation ‚Üí skip chart
                            if "unit" in df.columns and df["unit"].nunique() > 1 and "service_type" not in df.columns:
                                st.warning("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
                            else:
                                create_chart(df, chart_type_selection)
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")


def render_custom_query():
    """Render custom query page"""
    st.subheader("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
    st.write("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    # Show example questions
    with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"):
        st.markdown("""
        **üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
        - –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        - –ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?
        - –°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π?
        
        **üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ:**
        - –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω—Ç–µ–Ω–Ω–µ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?
        - –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GPS —Ç—Ä–µ–∫–∏–Ω–≥?
        - –ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã?
        
        **üìã –î–æ–∫—É–º–µ–Ω—Ç—ã:**
        - –ü–æ–∫–∞–∂–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
        - –ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?
        - –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """)
    
    # Use session_state for user question
    user_question = st.text_area(
        "üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.current_user_question,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
        height=100,
        key="user_question"
    )
    
    # Update session_state when question changes
    if user_question != st.session_state.current_user_question:
        st.session_state.current_user_question = user_question
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", key="create_query"):
        if user_question:
            # DEBUG: Print the user question before processing
            
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å..."):
                # Try to use multi-KB RAG first for enhanced context
                if st.session_state.get('multi_rag') and st.session_state.multi_rag.get_available_kbs():
                    # Use multi-KB RAG for enhanced context
                    kb_response = st.session_state.multi_rag.get_response_with_context(
                        user_question, context_limit=3
                    )
                    if kb_response and "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" not in kb_response:
                        st.markdown("#### üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                        st.info(kb_response)
                        st.markdown("---")
                
                # Generate SQL query using direct function (preserves full user question)
                query = generate_sql(user_question, st.session_state.company)
                if query:
                    # Store results in session_state
                    st.session_state.current_sql_query = query
                    st.session_state.current_query_explanation = f"SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è: {user_question}"
                    st.session_state.current_query_results = execute_query(query)
                    
                    st.markdown("#### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞")
                    st.info(st.session_state.current_query_explanation)
                    st.markdown("#### SQL –ó–∞–ø—Ä–æ—Å")
                    st.code(query, language="sql")
                    st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    display_query_results(query)
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    
    # Note: —É–±—Ä–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è


def render_smart_assistant():
    """Render smart assistant page"""
    st.subheader("ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
    st.write("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º.")
    
    # Quick questions
    st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", key="quick_traffic"):
            st.session_state.current_assistant_question = "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    
    with col2:
        if st.button("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", key="quick_tech"):
            st.session_state.current_assistant_question = "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?"
    
    with col3:
        if st.button("üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", key="quick_docs"):
            st.session_state.current_assistant_question = "–ü–æ–∫–∞–∂–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    
    # Question input
    assistant_question = st.text_area(
        "üí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.current_assistant_question,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω—Ç–µ–Ω–Ω–µ –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏?",
        height=100,
        key="assistant_question"
    )
    
    # Update session_state when question changes
    if assistant_question != st.session_state.current_assistant_question:
        st.session_state.current_assistant_question = assistant_question
    
    if st.button("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", key="ask_assistant"):
        if assistant_question:
            with st.spinner("–ò—â—É –æ—Ç–≤–µ—Ç..."):
                if st.session_state.rag_helper:
                    # Determine role for filtering (admin can see user docs too)
                    role = 'admin' if st.session_state.get('is_staff') else 'user'
                    response = st.session_state.rag_helper.get_response(assistant_question, role=role)
                    st.session_state.assistant_answer = response
                else:
                    st.error("–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    
    # Display assistant answer if available
    if st.session_state.assistant_answer:
        st.markdown("#### üí¨ –û—Ç–≤–µ—Ç:")
        st.markdown(st.session_state.assistant_answer)


def render_help():
    """Render help page"""
    st.subheader("‚ùì –ü–æ–º–æ—â—å")
    st.markdown("""
    ### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
    
    #### 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    - –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç"
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    
    #### 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    - –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç SQL-–∑–∞–ø—Ä–æ—Å
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∞
    
    #### 3. –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
    - –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    #### 4. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    - –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
    - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è
    - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    """)
    
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä–∞–≤–∫—É..."):
            if st.session_state.rag_helper:
                help_text = st.session_state.rag_helper.get_response("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º?")
                st.markdown(help_text)
            else:
                st.error("–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def render_staff_view():
    """Render staff/admin view"""
    st.title("üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –°–¢–≠–ö–ö–û–ú")
    
    # Navigation tabs
    tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    
    with tab1:
        # Company selector
        companies_query = "SELECT DISTINCT company FROM users WHERE role = 'user' ORDER BY company"
        conn = sqlite3.connect('satellite_billing.db')
        df = pd.read_sql_query(companies_query, conn)
        conn.close()
        
        selected_company = st.selectbox("Select Company:", ["All Companies"] + df['company'].tolist())
        # Pre-select chart type for analytics
        chart_type_analytics = st.selectbox(
            "Chart Type:",
            ["line", "bar", "pie", "scatter"],
            key="staff_chart_type_analytics"
        )
    
    # Smart Assistant tab (RAG-only)
    with tab2:
        render_smart_assistant()

    # Admin Panel + SQL Agent
    with tab3:
        # AI Query Assistant (SQL only)
        st.header("AI Query Assistant")
        user_question = st.text_area(
            "Ask a question:",
            placeholder="e.g., Show traffic statistics for last month",
            height=100
        )
        
        if st.button("Generate Query"):
            if user_question:
                with st.spinner("Generating query..."):
                    # Use company filter if specific company selected
                    company_filter = selected_company if selected_company != "All Companies" else None
                    query = generate_sql(user_question, company_filter)
                    
                    if query:
                        st.markdown("#### Generated SQL Query")
                        st.code(query, language="sql")
                        
                        # Execute and display results
                        st.markdown("#### Query Results")
                        # Pass parameters only if the SQL has placeholders
                        if company_filter and ("?" in query):
                            df, error = execute_query(query, (company_filter,))
                        else:
                            df, error = execute_query(query)
                        
                        if error:
                            st.error(f"Query execution error: {error}")
                        else:
                            st.dataframe(df)
                            
                            # Chart
                            if not df.empty:
                                st.markdown("#### Chart")
                                try:
                                    if chart_type_analytics == "pie" and ("month" in df.columns) and ("company" in df.columns):
                                        # Render per-month pies with slices per company
                                        df_local = df.copy()
                                        # Ensure month label
                                        try:
                                            df_local["month_str"] = pd.to_datetime(df_local["month"], errors='coerce').dt.strftime('%Y-%m').fillna(df_local["month"].astype(str))
                                        except Exception:
                                            df_local["month_str"] = df_local["month"].astype(str)
                                        # Determine values column (prefer common metrics)
                                        value_candidates = ["total_usage", "total_amount", "usage_amount", "total_traffic"]
                                        values_col = next((c for c in value_candidates if c in df_local.columns), None)
                                        if values_col is None:
                                            # fallback to first numeric column
                                            exclude = {"month", "month_str", "company", "service_type", "unit", "device_id", "imei"}
                                            numeric_cols = [c for c in df_local.columns if c not in exclude and pd.api.types.is_numeric_dtype(pd.to_numeric(df_local[c], errors='coerce'))]
                                            values_col = numeric_cols[0] if numeric_cols else None
                                        for m in df_local["month_str"].dropna().unique():
                                            st.markdown(f"##### {m}")
                                            df_m = df_local[df_local["month_str"] == m]
                                            if values_col is None:
                                                st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")
                                            else:
                                                df_m = df_m.copy()
                                                df_m[values_col] = pd.to_numeric(df_m[values_col], errors='coerce')
                                                fig = px.pie(df_m, names="company", values=values_col)
                                                st.plotly_chart(fig, use_container_width=True)
                                    elif "service_type" in df.columns and df["service_type"].nunique() > 1:
                                        for svc in df["service_type"].dropna().unique():
                                            st.markdown(f"##### {svc}")
                                            df_svc = df[df["service_type"] == svc]
                                            create_chart(df_svc, chart_type_analytics)
                                    else:
                                        if "unit" in df.columns and df["unit"].nunique() > 1 and "service_type" not in df.columns:
                                            st.warning("–ù–µ—Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥. –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")
                                        else:
                                            create_chart(df, chart_type_analytics)
                                except Exception as e:
                                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
                    else:
                        st.error("Failed to generate query. Please try rephrasing your question.")
            else:
                st.warning("Please enter a question.")

        st.header("Admin Panel")
        st.write("Administrative functions.")

        st.subheader("RAG Management")
        col_a, col_b = st.columns(2)
        with col_a:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å RAG —Å–∏—Å—Ç–µ–º—É", key="admin_reload_rag"):
                if _RAG_AVAILABLE:
                    try:
                        st.session_state.rag_helper = RAGHelper()
                        st.session_state.rag_initialized = True
                        st.success("RAG —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ RAG: {e}")
                else:
                    st.error("RAGHelper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        with col_b:
            if st.button("üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ KB", key="admin_list_kb"):
                try:
                    import glob
                    kb_files = sorted(glob.glob("docs/kb/*.json"))
                    if kb_files:
                        st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ KB —Ñ–∞–π–ª—ã:")
                        for f in kb_files:
                            st.write(f"‚Ä¢ {f}")
                    else:
                        st.info("KB —Ñ–∞–π–ª—ã –≤ docs/kb/ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ KB: {e}")

        st.markdown("---")
        st.subheader("Data Utilities")
        st.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö VOICE-—Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: scripts/generate_vsat_voice_data.py")

        st.markdown("---")
        st.subheader("KB Files Management")
        try:
            import glob
            import os
            import json
            kb_files = sorted(glob.glob("docs/kb/*.json"))
            selected_kb = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KB –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:", ["‚Äî"] + kb_files, key="kb_select")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π KB", key="kb_delete"):
                    if selected_kb != "‚Äî":
                        try:
                            os.remove(selected_kb)
                            st.success(f"–£–¥–∞–ª–µ–Ω: {selected_kb}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                    else:
                        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            with col2:
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", key="kb_refresh_list"):
                    st.rerun()

            st.markdown("### –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å KB")
            new_name = st.text_input("–ò–º—è —Ñ–∞–π–ª–∞ (docs/kb/*.json)", value="docs/kb/new_kb.json", key="kb_new_name")
            default_payload = '[\n  {\n    "title": "–ü—Ä–∏–º–µ—Ä KB",\n    "audience": ["user", "admin"],\n    "scope": ["legacy_billing"],\n    "status": "reference",\n    "source": {"file": "data/uploads/reg_07032015.pdf", "pointer": "–ø.9"},\n    "content": [\n      {"title": "–£—Å–ª—É–≥–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞", "text": "–†–∞–∑–¥–µ–ª —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞‚Ä¶"}\n    ]\n  }\n]'
            payload = st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON", height=240, value=default_payload, key="kb_payload")
            if st.button("üíæ –°–æ–∑–¥–∞—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å", key="kb_save"):
                try:
                    # Validate JSON
                    data = json.loads(payload)
                    # Ensure correct path
                    if not new_name.startswith("docs/kb/") or not new_name.endswith('.json'):
                        st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ docs/kb/ –∏ –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json")
                    else:
                        os.makedirs("docs/kb", exist_ok=True)
                        with open(new_name, 'w', encoding='utf-8') as f:
                            json.dump(data, f, ensure_ascii=False, indent=2)
                        st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {new_name}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KB: {e}")

        st.markdown("---")
        st.subheader("–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        try:
            import os
            log_file = os.path.join("logs", "app.log")
            if os.path.exists(log_file):
                max_lines = st.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ø–æ–∫–∞–∑–∞—Ç—å?", min_value=50, max_value=2000, value=500, step=50, key="log_lines")
                level_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é", ["ALL", "ERROR", "WARNING", "INFO"], index=0, key="log_level")
                with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    lines = f.readlines()[-max_lines:]
                if level_filter != "ALL":
                    lines = [ln for ln in lines if f"[{level_filter}]" in ln]
                st.code("".join(lines) or "(–ø—É—Å—Ç–æ)", language="text")
            else:
                st.info("–õ–æ–≥-—Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: {e}")

        st.caption("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö —è —Å–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â—É –≤–∞–º, –∞ —É–∂–µ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        st.subheader("PDF Uploads ‚Üí KB (Legacy)")
        try:
            import os
            os.makedirs("data/uploads", exist_ok=True)
            uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ data/uploads)", type=["pdf"], key="kb_pdf_uploader")
            if uploaded is not None:
                pdf_path = os.path.join("data/uploads", uploaded.name)
                with open(pdf_path, 'wb') as f:
                    f.write(uploaded.getbuffer())
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {pdf_path}")

            # List current uploads
            import glob as _glob
            pdfs = sorted(_glob.glob("data/uploads/*.pdf"))
            if pdfs:
                st.write("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ PDF:")
                st.write("\n".join([f"‚Ä¢ {p}" for p in pdfs]))
            else:
                st.info("–í data/uploads –Ω–µ—Ç PDF")

            st.markdown("### –°–æ–∑–¥–∞—Ç—å KB –∏–∑ PDF (—Å—Å—ã–ª–æ—á–Ω—ã–π, LEGACY)")
            sel_pdf = st.selectbox("PDF –∏—Å—Ç–æ—á–Ω–∏–∫:", ["‚Äî"] + pdfs, key="pdf_select_for_kb")
            kb_title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫ KB", value="–£—Å–ª—É–≥–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—Ä–µ–≥–ª–∞–º–µ–Ω—Ç)", key="pdf_kb_title")
            pointer = st.text_input("–£–∫–∞–∑–∞—Ç–µ–ª—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø.9')", value="–ø.9", key="pdf_pointer")
            audience = st.multiselect("–ê—É–¥–∏—Ç–æ—Ä–∏—è", ["user", "admin"], default=["user", "admin"], key="pdf_audience")
            status = st.selectbox("–°—Ç–∞—Ç—É—Å", ["reference", "released", "preview", "deprecated"], index=0, key="pdf_status")
            target_json = st.text_input("–ò–º—è KB —Ñ–∞–π–ª–∞", value="docs/kb/legacy_reglament.json", key="pdf_target_json")

            if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å KB JSON", key="pdf_create_kb_json"):
                try:
                    if sel_pdf == "‚Äî":
                        st.error("–í—ã–±–µ—Ä–∏—Ç–µ PDF –∏—Å—Ç–æ—á–Ω–∏–∫")
                    elif not target_json.startswith("docs/kb/") or not target_json.endswith('.json'):
                        st.error("–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ docs/kb/ –∏ .json")
                    else:
                        payload = [
                            {
                                "title": kb_title,
                                "audience": audience,
                                "scope": ["legacy_billing"],
                                "status": status,
                                "source": {"file": sel_pdf, "pointer": pointer},
                                "content": [
                                    {"title": kb_title, "text": f"–°–º. {pointer} –≤ {sel_pdf}."}
                                ]
                            }
                        ]
                        import json as _json
                        os.makedirs("docs/kb", exist_ok=True)
                        with open(target_json, 'w', encoding='utf-8') as f:
                            _json.dump(payload, f, ensure_ascii=False, indent=2)
                        st.success(f"–°–æ–∑–¥–∞–Ω KB: {target_json}")
                        st.info("–ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å RAG —Å–∏—Å—Ç–µ–º—É' –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ KB: {e}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF/—Å–æ–∑–¥–∞–Ω–∏—è KB: {e}")

        st.markdown("---")
        st.subheader("MediaWiki Integration")
        try:
            from ..integrations import MediaWikiClient, KBToWikiPublisher
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MediaWiki
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            wiki_url = st.text_input("URL MediaWiki", value="http://localhost:8080/w/api.php", key="wiki_url")
            wiki_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="wiki_username")
            wiki_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="wiki_password")
            namespace_prefix = st.text_input("–ü—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω", value="–°–¢–≠–ö–ö–û–ú", key="wiki_namespace")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", key="wiki_test"):
                    if wiki_url and wiki_username and wiki_password:
                        try:
                            client = MediaWikiClient(wiki_url, wiki_username, wiki_password)
                            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MediaWiki —É—Å–ø–µ—à–Ω–æ")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    else:
                        st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            with col2:
                if st.button("üìö –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ KB", key="wiki_publish_all"):
                    if wiki_url and wiki_username and wiki_password:
                        try:
                            client = MediaWikiClient(wiki_url, wiki_username, wiki_password)
                            publisher = KBToWikiPublisher(client)
                            
                            with st.spinner("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ MediaWiki..."):
                                results = publisher.publish_all_kb_files("docs/kb", namespace_prefix)
                                
                            st.success("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            for kb_file, file_results in results.items():
                                with st.expander(f"üìÑ {kb_file}"):
                                    for success, message in file_results:
                                        if success:
                                            st.success(f"‚úÖ {message}")
                                        else:
                                            st.error(f"‚ùå {message}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    else:
                        st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            st.markdown("### –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            try:
                import glob
                kb_files = sorted(glob.glob("docs/kb/*.json"))
                selected_kb = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KB —Ñ–∞–π–ª:", ["‚Äî"] + kb_files, key="wiki_kb_select")
                
                if st.button("üì§ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª", key="wiki_publish_selected"):
                    if selected_kb != "‚Äî" and wiki_url and wiki_username and wiki_password:
                        try:
                            client = MediaWikiClient(wiki_url, wiki_username, wiki_password)
                            publisher = KBToWikiPublisher(client)
                            
                            with st.spinner(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è {selected_kb}..."):
                                results = publisher.publish_kb_file(selected_kb, namespace_prefix)
                            
                            for success, message in results:
                                if success:
                                    st.success(f"‚úÖ {message}")
                                else:
                                    st.error(f"‚ùå {message}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤: {e}")
                
        except ImportError as e:
            st.error(f"–ú–æ–¥—É–ª—å MediaWiki –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ MediaWiki –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
