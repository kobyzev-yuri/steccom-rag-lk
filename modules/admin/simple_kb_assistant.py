"""
Simple Knowledge Base Assistant
–ü—Ä–æ—Å—Ç–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑ –∑–Ω–∞–Ω–∏–π
"""

import streamlit as st
import os
from pathlib import Path
from typing import List

class SimpleKBAssistant:
    def __init__(self, kb_manager, pdf_processor):
        self.kb_manager = kb_manager
        self.pdf_processor = pdf_processor
    
    def render_assistant(self):
        """Render simple KB creation assistant"""
        st.header("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        # Check for existing files
        upload_dir = Path("data/uploads")
        if not upload_dir.exists():
            st.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        pdf_files = list(upload_dir.glob("*.pdf"))
        
        if not pdf_files:
            st.warning("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤")
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'")
            return
        
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤")
        
        # Show files
        with st.expander("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
            for pdf_file in pdf_files:
                file_size = pdf_file.stat().st_size / 1024
                st.write(f"‚Ä¢ **{pdf_file.name}** ({file_size:.1f} KB)")
        
        # Check existing KBs
        existing_kbs = self.kb_manager.get_knowledge_bases()
        
        if existing_kbs:
            st.subheader("üìö –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            for kb in existing_kbs:
                docs = self.kb_manager.get_documents(kb['id'])
                st.write(f"‚Ä¢ **{kb['name']}** ({kb['category']}) - {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # Test existing KB
            st.subheader("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–ó")
            if st.button("üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–ó", type="secondary"):
                st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞")
                st.markdown("**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**")
                st.markdown("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'")
                st.markdown("2. –ù–∞–∂–º–∏—Ç–µ 'üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'")
                st.markdown("3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏'")
                st.markdown("4. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏'")
        
        # Quick creation options
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ó")
        
        col1, col2 = st.columns(2)
        
        with col1:
            kb_name = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã v2" if any(kb['name'] == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã" for kb in existing_kbs) else "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã"
            if st.button(f"üöÄ –°–æ–∑–¥–∞—Ç—å –ë–ó '{kb_name}'", type="primary"):
                self._create_kb_with_files(kb_name, pdf_files)
        
        with col2:
            kb_name = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú v2" if any(kb['name'] == "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú" for kb in existing_kbs) else "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú"
            if st.button(f"üìö –°–æ–∑–¥–∞—Ç—å –ë–ó '{kb_name}'"):
                self._create_kb_with_files(kb_name, pdf_files)
        
        # Manual creation
        st.subheader("üîß –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ")
        
        with st.form("manual_kb"):
            kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ë–ó", value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã")
            kb_category = st.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
                 "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∏–ª–ª–∏–Ω–≥–∞", "–î—Ä—É–≥–æ–µ"]
            )
            kb_description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ", 
                value="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏ –°–¢–≠–ö–ö–û–ú"
            )
            
            submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ë–ó")
            
            if submitted:
                self._create_kb_with_files(kb_name, pdf_files, kb_category, kb_description)
    
    def _create_kb_with_files(self, name: str, pdf_files: List[Path], 
                             category: str = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", 
                             description: str = None):
        """Create KB with all PDF files"""
        try:
            # Create KB
            kb_id = self.kb_manager.create_knowledge_base(
                name=name,
                description=description or f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {name}",
                category=category,
                created_by=st.session_state.get('username', 'admin')
            )
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
            
            # Process files
            processed_count = 0
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, pdf_file in enumerate(pdf_files):
                try:
                    status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_file.name}")
                    
                    # Read file
                    with open(pdf_file, 'rb') as f:
                        file_content = f.read()
                    
                    # Create mock uploaded file
                    class MockFile:
                        def __init__(self, name, content):
                            self.name = name
                            self._content = content
                        
                        def getvalue(self):
                            return self._content
                    
                    mock_file = MockFile(pdf_file.name, file_content)
                    
                    # Process PDF
                    result = self.pdf_processor.process_pdf(
                        mock_file, 
                        kb_id, 
                        pdf_file.stem
                    )
                    
                    if result['success']:
                        # Add to database
                        doc_id = self.kb_manager.add_document(
                            kb_id,
                            result['title'],
                            result['file_path'],
                            result['content_type'],
                            result['file_size'],
                            result['metadata']
                        )
                        
                        # Mark as processed
                        self.kb_manager.update_document_status(doc_id, True, 'completed')
                        processed_count += 1
                        
                        st.write(f"‚úÖ {pdf_file.name}")
                    else:
                        st.error(f"‚ùå {pdf_file.name}: {result.get('error', 'Unknown error')}")
                
                except Exception as e:
                    st.error(f"‚ùå {pdf_file.name}: {e}")
                
                # Update progress
                progress_bar.progress((i + 1) / len(pdf_files))
            
            status_text.text("–ì–æ—Ç–æ–≤–æ!")
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
            
            # Show next steps
            st.info("""
            **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üîç –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            2. –ù–∞–∂–º–∏—Ç–µ "üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
            """)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
