"""
Knowledge Base Creation Assistant
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑ –∑–Ω–∞–Ω–∏–π
"""

import streamlit as st
import os
import sqlite3
from pathlib import Path
from typing import List, Dict
import json
from datetime import datetime

class KBAssistant:
    def __init__(self, kb_manager, pdf_processor):
        self.kb_manager = kb_manager
        self.pdf_processor = pdf_processor
    
    def render_assistant(self):
        """Render KB creation assistant interface"""
        st.header("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        # Step 1: Analyze existing files
        st.subheader("üìÅ –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        
        upload_dir = Path("data/uploads")
        if upload_dir.exists():
            pdf_files = list(upload_dir.glob("*.pdf"))
            
            if pdf_files:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads")
                
                # Show file analysis
                with st.expander("üìã –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤"):
                    for pdf_file in pdf_files:
                        file_size = pdf_file.stat().st_size / 1024  # KB
                        st.write(f"‚Ä¢ **{pdf_file.name}** ({file_size:.1f} KB)")
                        
                        # Try to extract basic info
                        try:
                            metadata = self.pdf_processor.get_pdf_metadata(str(pdf_file))
                            if metadata.get('title'):
                                st.write(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {metadata['title']}")
                            if metadata.get('pages'):
                                st.write(f"  - –°—Ç—Ä–∞–Ω–∏—Ü: {metadata['pages']}")
                        except:
                            st.write("  - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                # Suggest KB structure
                st.subheader("üí° –®–∞–≥ 2: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–ó")
                
                # Analyze filenames to suggest categories
                suggested_categories = self._analyze_filenames(pdf_files)
                
                if suggested_categories:
                    st.write("**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤:**")
                    for category, files in suggested_categories.items():
                        st.write(f"‚Ä¢ **{category}**: {', '.join(files)}")
                
                # Quick setup options
                st.subheader("‚ö° –®–∞–≥ 3: –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –ë–ó '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã'"):
                        self._create_tech_regulations_kb(pdf_files)
                
                with col2:
                    if st.button("üìö –°–æ–∑–¥–∞—Ç—å –ë–ó '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú'"):
                        self._create_steccom_docs_kb(pdf_files)
                
                # Manual setup
                st.subheader("üîß –®–∞–≥ 4: –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                
                with st.form("manual_kb_setup"):
                    kb_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ë–ó", value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã")
                    kb_category = st.selectbox(
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                        ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
                         "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∏–ª–ª–∏–Ω–≥–∞", "–î—Ä—É–≥–æ–µ"]
                    )
                    kb_description = st.text_area(
                        "–û–ø–∏—Å–∞–Ω–∏–µ", 
                        value="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –°–¢–≠–ö–ö–û–ú"
                    )
                    
                    # File selection
                    st.write("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:**")
                    selected_files = []
                    for pdf_file in pdf_files:
                        if st.checkbox(f"–í–∫–ª—é—á–∏—Ç—å: {pdf_file.name}", value=True):
                            selected_files.append(pdf_file)
                    
                    submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ë–ó —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
                    
                    if submitted and selected_files:
                        self._create_manual_kb(kb_name, kb_category, kb_description, selected_files)
            else:
                st.warning("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤")
                st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'")
        else:
            st.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def _analyze_filenames(self, pdf_files: List[Path]) -> Dict[str, List[str]]:
        """Analyze filenames to suggest categories"""
        categories = {}
        
        for pdf_file in pdf_files:
            filename = pdf_file.name.lower()
            
            if 'reg' in filename or '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç' in filename:
                category = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã"
            elif 'sbd' in filename:
                category = "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏"
            elif 'gps' in filename or 'track' in filename:
                category = "–°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            elif 'monitor' in filename:
                category = "–°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            else:
                category = "–û–±—â–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
            
            if category not in categories:
                categories[category] = []
            categories[category].append(pdf_file.name)
        
        return categories
    
    def _create_tech_regulations_kb(self, pdf_files: List[Path]):
        """Create technical regulations KB with all files"""
        try:
            # Create KB
            kb_id = self.kb_manager.create_knowledge_base(
                name="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                description="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –°–¢–≠–ö–ö–û–ú",
                category="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                created_by=st.session_state.get('username', 'admin')
            )
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
            
            # Process all files
            processed_count = 0
            progress_bar = st.progress(0)
            
            for i, pdf_file in enumerate(pdf_files):
                try:
                    # Read file content
                    with open(pdf_file, 'rb') as f:
                        file_content = f.read()
                    
                    # Create a mock uploaded file object
                    class MockUploadedFile:
                        def __init__(self, name, content):
                            self.name = name
                            self._content = content
                        
                        def getvalue(self):
                            return self._content
                    
                    mock_file = MockUploadedFile(pdf_file.name, file_content)
                    
                    # Process PDF
                    result = self.pdf_processor.process_pdf(
                        mock_file, 
                        kb_id, 
                        pdf_file.stem
                    )
                    
                    if result['success']:
                        # Add to database
                        doc_id = self.kb_manager.add_document(
                            kb_id,
                            result['title'],
                            result['file_path'],
                            result['content_type'],
                            result['file_size'],
                            result['metadata']
                        )
                        
                        # Mark as processed
                        self.kb_manager.update_document_status(doc_id, True, 'completed')
                        processed_count += 1
                        
                        st.write(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {pdf_file.name}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pdf_file.name}: {result['error']}")
                
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pdf_file.name}: {e}")
                
                # Update progress
                progress_bar.progress((i + 1) / len(pdf_files))
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
            st.rerun()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
    
    def _create_steccom_docs_kb(self, pdf_files: List[Path]):
        """Create STECCOM documentation KB"""
        try:
            kb_id = self.kb_manager.create_knowledge_base(
                name="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú",
                description="–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏ –°–¢–≠–ö–ö–û–ú",
                category="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã",
                created_by=st.session_state.get('username', 'admin')
            )
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
            
            # Process files with better titles
            title_mapping = {
                'reg_07032015.pdf': '–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (2015)',
                'reg_gpstrack_14042014.pdf': '–†–µ–≥–ª–∞–º–µ–Ω—Ç GPS-—Ç—Ä–µ–∫–∏–Ω–≥–∞ (2014)',
                'reg_monitor_16112013.pdf': '–†–µ–≥–ª–∞–º–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (2013)',
                'reg_sbd_en.pdf': 'SBD Protocol Specification (EN)',
                'reg_sbd.pdf': '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ SBD'
            }
            
            processed_count = 0
            progress_bar = st.progress(0)
            
            for i, pdf_file in enumerate(pdf_files):
                try:
                    with open(pdf_file, 'rb') as f:
                        file_content = f.read()
                    
                    class MockUploadedFile:
                        def __init__(self, name, content):
                            self.name = name
                            self._content = content
                        
                        def getvalue(self):
                            return self._content
                    
                    mock_file = MockUploadedFile(pdf_file.name, file_content)
                    
                    # Use better title if available
                    title = title_mapping.get(pdf_file.name, pdf_file.stem)
                    
                    result = self.pdf_processor.process_pdf(
                        mock_file, 
                        kb_id, 
                        title
                    )
                    
                    if result['success']:
                        doc_id = self.kb_manager.add_document(
                            kb_id,
                            result['title'],
                            result['file_path'],
                            result['content_type'],
                            result['file_size'],
                            result['metadata']
                        )
                        
                        self.kb_manager.update_document_status(doc_id, True, 'completed')
                        processed_count += 1
                        
                        st.write(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {title}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name}")
                
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name} - {e}")
                
                progress_bar.progress((i + 1) / len(pdf_files))
            
            st.success(f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–¢–≠–ö–ö–û–ú –≥–æ—Ç–æ–≤–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Ñ–∞–π–ª–æ–≤")
            st.rerun()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
    
    def _create_manual_kb(self, name: str, category: str, description: str, selected_files: List[Path]):
        """Create KB with manually selected files"""
        try:
            kb_id = self.kb_manager.create_knowledge_base(
                name=name,
                description=description,
                category=category,
                created_by=st.session_state.get('username', 'admin')
            )
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π '{name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {kb_id}")
            
            processed_count = 0
            progress_bar = st.progress(0)
            
            for i, pdf_file in enumerate(selected_files):
                try:
                    with open(pdf_file, 'rb') as f:
                        file_content = f.read()
                    
                    class MockUploadedFile:
                        def __init__(self, name, content):
                            self.name = name
                            self._content = content
                        
                        def getvalue(self):
                            return self._content
                    
                    mock_file = MockUploadedFile(pdf_file.name, file_content)
                    
                    result = self.pdf_processor.process_pdf(
                        mock_file, 
                        kb_id, 
                        pdf_file.stem
                    )
                    
                    if result['success']:
                        doc_id = self.kb_manager.add_document(
                            kb_id,
                            result['title'],
                            result['file_path'],
                            result['content_type'],
                            result['file_size'],
                            result['metadata']
                        )
                        
                        self.kb_manager.update_document_status(doc_id, True, 'completed')
                        processed_count += 1
                        
                        st.write(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {pdf_file.name}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name}")
                
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {pdf_file.name} - {e}")
                
                progress_bar.progress((i + 1) / len(selected_files))
            
            st.success(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Ñ–∞–π–ª–æ–≤")
            st.rerun()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ó: {e}")
