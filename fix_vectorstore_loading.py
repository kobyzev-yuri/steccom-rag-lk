#!/usr/bin/env python3
"""
Fix Vectorstore Loading - Convert pickle-only vectorstores to FAISS format
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è pickle-only –≤ —Ñ–æ—Ä–º–∞—Ç FAISS
"""

import sys
from pathlib import Path
import pickle
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "kb_admin"))

def fix_vectorstore_loading():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â"""
    
    try:
        from modules.rag.multi_kb_rag import MultiKBRAG
        from langchain_community.vectorstores import FAISS
        from sentence_transformers import SentenceTransformer
        
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        rag = MultiKBRAG()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        import sqlite3
        conn = sqlite3.connect(rag.db_path)
        c = conn.cursor()
        
        c.execute("SELECT id, name, is_active FROM knowledge_bases WHERE is_active = 1")
        active_kbs = c.fetchall()
        
        print(f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {len(active_kbs)}")
        
        loaded_count = 0
        
        for kb_id, name, is_active in active_kbs:
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ KB {kb_id}: {name}")
            
            vectorstore_path = Path(f"data/knowledge_bases/vectorstore_{kb_id}")
            pkl_file = vectorstore_path / "index.pkl"
            faiss_file = vectorstore_path / "index.faiss"
            
            if pkl_file.exists() and not faiss_file.exists():
                print(f"   üìÑ –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ pickle —Ñ–∞–π–ª: {pkl_file}")
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å pickle —Ñ–∞–π–ª
                    with open(pkl_file, 'rb') as f:
                        vectorstore = pickle.load(f)
                    
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ pickle")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ FAISS
                    vectorstore.save_local(str(vectorstore_path))
                    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ FAISS")
                    
                    # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ FAISS
                    vectorstore_loaded = FAISS.load_local(str(vectorstore_path), rag.embeddings, allow_dangerous_deserialization=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAG —Å–∏—Å—Ç–µ–º—É
                    rag.vectorstores[kb_id] = vectorstore_loaded
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    c.execute("SELECT COUNT(*) FROM knowledge_documents WHERE kb_id = ? AND processed = 1", (kb_id,))
                    doc_count = c.fetchone()[0]
                    
                    c.execute("SELECT COUNT(*) FROM document_chunks dc JOIN knowledge_documents kd ON dc.doc_id = kd.id WHERE kd.kb_id = ? AND kd.processed = 1", (kb_id,))
                    chunk_count = c.fetchone()[0]
                    
                    rag.kb_metadata[kb_id] = {
                        'name': name,
                        'description': f'–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π {name}',
                        'category': '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
                        'doc_count': doc_count,
                        'chunk_count': chunk_count
                    }
                    
                    loaded_count += 1
                    print(f"   ‚úÖ KB {kb_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ KB {kb_id}: {e}")
                    
            elif faiss_file.exists():
                print(f"   ‚úÖ FAISS —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {faiss_file}")
                
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ FAISS
                    vectorstore_loaded = FAISS.load_local(str(vectorstore_path), rag.embeddings, allow_dangerous_deserialization=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAG —Å–∏—Å—Ç–µ–º—É
                    rag.vectorstores[kb_id] = vectorstore_loaded
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    c.execute("SELECT COUNT(*) FROM knowledge_documents WHERE kb_id = ? AND processed = 1", (kb_id,))
                    doc_count = c.fetchone()[0]
                    
                    c.execute("SELECT COUNT(*) FROM document_chunks dc JOIN knowledge_documents kd ON dc.doc_id = kd.id WHERE kd.kb_id = ? AND kd.processed = 1", (kb_id,))
                    chunk_count = c.fetchone()[0]
                    
                    rag.kb_metadata[kb_id] = {
                        'name': name,
                        'description': f'–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π {name}',
                        'category': '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
                        'doc_count': doc_count,
                        'chunk_count': chunk_count
                    }
                    
                    loaded_count += 1
                    print(f"   ‚úÖ KB {kb_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ KB {kb_id}: {e}")
            else:
                print(f"   ‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {vectorstore_path}")
        
        conn.close()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–∞–∑ –∑–Ω–∞–Ω–∏–π: {loaded_count}")
        print(f"   - –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â: {len(rag.vectorstores)}")
        print(f"   - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {len(rag.kb_metadata)}")
        
        if loaded_count > 0:
            print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return True
        else:
            print("‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    fix_vectorstore_loading()












