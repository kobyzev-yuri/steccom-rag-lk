#!/usr/bin/env python3
"""
Create FAISS Files - Convert pickle-only vectorstores to FAISS format
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ FAISS - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è pickle-only –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –≤ —Ñ–æ—Ä–º–∞—Ç FAISS
"""

import sys
from pathlib import Path
import pickle
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "kb_admin"))

def create_faiss_files():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã FAISS"""
    
    try:
        from langchain_community.vectorstores import FAISS
        from sentence_transformers import SentenceTransformer
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ FAISS...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º embeddings
        embedding_model = SentenceTransformer("intfloat/multilingual-e5-base")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        import sqlite3
        db_path = "kb_admin/kbs.db"
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        
        c.execute("SELECT id, name, is_active FROM knowledge_bases WHERE is_active = 1")
        active_kbs = c.fetchall()
        
        print(f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {len(active_kbs)}")
        
        created_count = 0
        
        for kb_id, name, is_active in active_kbs:
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ KB {kb_id}: {name}")
            
            vectorstore_path = Path(f"kb_admin/data/knowledge_bases/vectorstore_{kb_id}")
            pkl_file = vectorstore_path / "index.pkl"
            faiss_file = vectorstore_path / "index.faiss"
            
            if pkl_file.exists() and not faiss_file.exists():
                print(f"   üìÑ –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ pickle —Ñ–∞–π–ª: {pkl_file}")
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å pickle —Ñ–∞–π–ª
                    with open(pkl_file, 'rb') as f:
                        vectorstore = pickle.load(f)
                    
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ pickle")
                    
                    # –°–æ–∑–¥–∞–µ–º FAISS-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—ä–µ–∫—Ç
                    if hasattr(vectorstore, 'docstore') and hasattr(vectorstore, 'index'):
                        # –≠—Ç–æ —É–∂–µ FAISS –æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        vectorstore.save_local(str(vectorstore_path))
                        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ FAISS")
                        created_count += 1
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ KB {kb_id}: {e}")
                    
            elif faiss_file.exists():
                print(f"   ‚úÖ FAISS —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {faiss_file}")
                created_count += 1
            else:
                print(f"   ‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {vectorstore_path}")
        
        conn.close()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–∑ –∑–Ω–∞–Ω–∏–π: {created_count}")
        
        if created_count > 0:
            print("‚úÖ –§–∞–π–ª—ã FAISS —Å–æ–∑–¥–∞–Ω—ã!")
            return True
        else:
            print("‚ùå –§–∞–π–ª—ã FAISS –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ FAISS: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    create_faiss_files()












